[
  {
    "objectID": "course-team.html",
    "href": "course-team.html",
    "title": "Teaching team",
    "section": "",
    "text": "Dr. Mine Çetinkaya-Rundel (she/her) is Professor of the Practice and Director of Undergraduate Studies at the Department of Statistical Science at Duke University and an affiliated faculty in the Computational Media, Arts, and Cultures. Mine’s work focuses on innovation in statistics and data science pedagogy, with an emphasis on computing, reproducible research, student-centered learning, and open-source education as well as pedagogical approaches for enhancing retention of women and under-represented minorities in STEM.\n\n\n\nOffice hours\nLocation\n\n\n\n\nThursdays 10 - 11 am\nOld Chem 213"
  },
  {
    "objectID": "course-team.html#instructor",
    "href": "course-team.html#instructor",
    "title": "Teaching team",
    "section": "",
    "text": "Dr. Mine Çetinkaya-Rundel (she/her) is Professor of the Practice and Director of Undergraduate Studies at the Department of Statistical Science at Duke University and an affiliated faculty in the Computational Media, Arts, and Cultures. Mine’s work focuses on innovation in statistics and data science pedagogy, with an emphasis on computing, reproducible research, student-centered learning, and open-source education as well as pedagogical approaches for enhancing retention of women and under-represented minorities in STEM.\n\n\n\nOffice hours\nLocation\n\n\n\n\nThursdays 10 - 11 am\nOld Chem 213"
  },
  {
    "objectID": "course-team.html#teaching-assistant",
    "href": "course-team.html#teaching-assistant",
    "title": "Teaching team",
    "section": "Teaching assistant",
    "text": "Teaching assistant\n\nShelby Tisdale is our teaching assistant. Shelby is a Statistical Science major and she is also pursuing secondary teacher certification in mathematics and a certificate in Child Policy Research.\n\n\n\nOffice hours\nLocation\n\n\n\n\nThu 3 - 4 pm\nOld Chem 025\n\n\nSun 7 - 8 pm\nZoom"
  },
  {
    "objectID": "project/project-1.html",
    "href": "project/project-1.html",
    "title": "Project 1",
    "section": "",
    "text": "For this project, you will be use the Pell Grants dataset from the TidyTuesday project. Your task for the project is to come up with one question to answer, answer it with two data visualizations, and write-up and present your analysis and findings. You will also get to peer review others’ projects."
  },
  {
    "objectID": "project/project-1.html#dataset",
    "href": "project/project-1.html#dataset",
    "title": "Project 1",
    "section": "Dataset",
    "text": "Dataset\nTo learn more about the dataset, visit https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-08-30/readme.md."
  },
  {
    "objectID": "project/project-1.html#question",
    "href": "project/project-1.html#question",
    "title": "Project 1",
    "section": "Question",
    "text": "Question\nThe question you come up with should involve more than two variables two answer."
  },
  {
    "objectID": "project/project-1.html#due-dates",
    "href": "project/project-1.html#due-dates",
    "title": "Project 1",
    "section": "Due dates",
    "text": "Due dates\n\nProposal: Thu, Sep 28\nPeer review: Tue, Oct 10\nWrite-up and presentation: Thu, Oct 12"
  },
  {
    "objectID": "project/project-1.html#deliverables",
    "href": "project/project-1.html#deliverables",
    "title": "Project 1",
    "section": "Deliverables",
    "text": "Deliverables\n\nProposal\nYour proposal should include:\n\nA brief description of your dataset including its provenance, dimensions, etc. (Make sure to load the data and use inline code for some of this information.)\nThe question you want to answer.\nA plan for answering the question, including the variables involved, variables to be created (if any), external data to be merged in (if any) as well as the types of visualizations you’re planning to make.\n\n\n\nPeer review\n\nReviewer tasks\nEach team will review the project of one other team. A few days before the peer review deadline, teams will have access to the project repo of the team whose work they’re reviewing. Reviews should start by cloning the team’s repo, re-rendering it locally to make sure you can reproduce their work, and then adding an issue to their repo with your peer review feedback.\nThe reviewer / reviewee assignments can be found below:\n\nCoding Clowns will review Just Make Some Noise\nJust Make Some Noise will review Stats Slayers\nStats Slayers will review Coding Clowns\n\nTeams will develop the review together, with discussion among all team members, but only one team member will submit it as an issue on the project repo. To do so, go to the Issues tab, click on the green New issue button on the top right, and then click on the green Get started button for the issue template titled Peer review.\nThis will start a new issue with a peer review form that you can fill out. Make sure to update the introductory paragraph with your team name and the names of the team members participating in the review. Then, answer each of the questions in the spaces provided underneath them. You’re expected to be thorough in your review, but this doesn’t necessarily require lengthy responses.\nRemember, your goal is to help the team whose project proposal you’re reviewing. The team will not lose points because of issues you point out, as long as they address them before I review their proposals. You should be critical, but respectful in your review. Also remember that you will be evaluated on the quality of your review. So that’s an additional incentive to do a good job.\n\n\nReviewee tasks\nOnce you receive feedback from your peers, you should address them. You should do this by directly updating your proposal or making any other updates to your repo as needed. You can do these updates all in one commit or you can spread it across multiple commits. Regardless, in the last commit that addresses the peer review comments, you should use a keyword in your commit message that will close the peer review issues. These words are close, closes, closed, fix, fixes, fixed, resolve, resolves, and resolved and they need to be followed by the issue number (which you can find next to the issue title). So, your commit message can say something like “Finished updates based on peer review, fixes #1”.\n\n\n\nWrite-up\nYour write-up should consist of three parts:\n\nIntroduction (1-2 paragraphs): Brief introduction to the dataset. You may repeat some of the information about the dataset provided in the introduction to the dataset on the TidyTuesday repository, paraphrasing on your own terms, but you should rephrase it. Imagine that your project is a standalone document and the grader has no prior knowledge of the dataset. The introduction should also introduce the question you’re answering in our project.\nAnalysis (2-3 code blocks, 2 visualizations, text/code comments as needed): In this section, provide the code that generates your visualizations. Use scale functions to provide nice axis labels and guides. You are welcome to use theme functions to customize the appearance of your plot, but you are not required to do so. All visualizations must be made with ggplot2. Do not use base R or lattice plotting functions.\nDiscussion (1-3 paragraphs): In the Discussion section, interpret the results of your analysis. Identify any trends revealed (or not revealed) by the visualizations. Speculate about why the visualizations look the way they do.\n\nWe encourage you to be concise. A paragraph should typically not be longer than 5 sentences.\n\n\nPresentation\nYour presentation should generally follow the same structure as your write-up. Each team will have 5-8 minutes for their presentation, and each team member must speak (roughly equally) during this time. You can create your presentation with any software you like, just make sure to place a PDF of your presentation, titled presentation.pdf, in your repo, replacing the placeholder PDF in your repo.\nRoughly I recommend 1-2 slides for introduction, one slide for each of the visualizations you create, and 1 slide for discussion. You can imagine spending roughly one minute on each slide. You should feel free to have more (or fewer) slides. Your evaluation will be based on your content, professionalism (including sticking to time), and your performance during the Q&A (question and answer). We don’t care how many slides you use to do this."
  },
  {
    "objectID": "project/project-1.html#repo-organization",
    "href": "project/project-1.html#repo-organization",
    "title": "Project 1",
    "section": "Repo organization",
    "text": "Repo organization\nThe following folders and files in your project repository:\n\nabout.qmd: Information about your team members\ndata/:\n\ndata/pell.csv: Your dataset in CSV format\ndata/README.md: Codebook of your dataset\n\nindex.qmd: Your project write-up\npresentation.pdf: Your project presentation\nproposal.qmd: Your project proposal"
  },
  {
    "objectID": "project/project-1.html#grading",
    "href": "project/project-1.html#grading",
    "title": "Project 1",
    "section": "Grading",
    "text": "Grading\n\n\n\n\n\n\n\nTotal\n100 pts\n\n\n\n\nProposal\n10 pts\n\n\nPresentation\n30 pts\n\n\n\n(25 pts from teaching team, 5 pts from audience)\n\n\nWrite-up\n30 pts\n\n\nReproducibility, style, and organization1\n10 pts\n\n\nWithin team peer evaluation2\n10 pts\n\n\nBetween team peer evaluation3\n10 pts\n\n\n\nSome of the components are further detailed below.\n\nProposal (10 points)\n\nWrite-up - All required components included.\nWorkflow - A reasonable number of commits.\nTeamwork - All team members must contribute to the repo via commits.\n\n\n\nPresentation (30 points)\n\nTeaching team (25 points)\n\nTime management: Did the team divide the time well amongst themselves or got cut off going over time?\nProfessionalism: How well did the team present? Does the presentation appear to be well practiced? Did everyone get a chance to say something meaningful about the project?\nTeamwork: Did the team present a unified story, or did it seem like independent pieces of work patched together?\nSlides: Are the slides well organized, readable, not full of text, featuring visualizations with legible labels, legends, etc.?\nCreativity Critical Thought: Is the project carefully thought out? Does it appear that time and effort went into the planning and implementation of the project?\nContent:\n\nIs the question well articulated in the presentation?\nCan the question be answered with the data?\nDo(es) the data visualization(s) answer the question?\nDo(es) the data visualization(s) follow good visualization practices?\nIs/are the conclusion(s) made based on the visualization(s) justifiable?\nAre the limitations carefully considered and articulated?\n\n\n\n\nPeers (5 points)\n\nContent: Is the research question well designed and is the data being used relevant to the research question?\nContent: Did the team use appropriate visualizations and did they interpret them accurately?\nCreativity and Critical Thought: Is the project carefully thought out? Are the limitations carefully considered? Does it appear that time and effort went into the planning and implementation of the project?\nSlides: Are the slides well organized, readable, not full of text, featuring visualizations with legible labels, legends, etc.?\nProfessionalism: How well did the team present? Does the presentation appear to be well practiced? Are they reading off of a script? Did everyone get a chance to say something meaningful about the project?\n\n\n\n\nWrite-up (30 points)\n\nIntroduction: The introduction provides a clear explanation of the question and the dataset used to answer the question, including a description of all relevant variables in the dataset.\nJustification of approach: The chosen analysis approach and visualizations are clearly explained and justified.\nCode: Code is correct, easy to read, properly formatted, and properly documented.\nVisualization: The visualizations are appropriate, easy to read, and properly labeled.\nDiscussion: Discussion of results is clear and correct, and it has some depth without begin excessively long.\n\n\n\nReproducibility, style, and organization (10 points)\n\nAll required files are provided. Quarto files render without issues and reproduce the necessary outputs.\nData is in the data folder and is loaded from this folder in your writeup.\nDocuments are well structured and easy to follow. No extraneous materials.\nAll issues are closed, mostly with specific commits addressing them."
  },
  {
    "objectID": "project/project-1.html#guidelines",
    "href": "project/project-1.html#guidelines",
    "title": "Project 1",
    "section": "Guidelines",
    "text": "Guidelines\nPlease use the project repository that has been created for your team to complete your project. This means putting all of the content in the Quarto files provided, rendering them to obtain the output, and committing and pushing all files to your repository by the indicated deadlines. Your Quarto files (.qmd) and the resulting html files (.html) will be graded jointly, so they must be consistent (as in, don’t change the Quarto file without also updating the rendered document!).\nAll results presented must have corresponding code. If you do calculations by hand instead of using R and then report the results from the calculations, you will not receive credit for those calculations. Any answers/results given without the corresponding R code that generated the result will not be considered. For example, if you’re reporting the number of observations in your dataset, don’t just write the number manually, use inline R code to calculate the number. All code reported in your final project document should work properly. Please do not include any extraneous code or code which produces error messages. Code which produces certain warnings and messages is acceptable, as long as you understand what the warnings mean. In such cases you can add warning: false and message: false in the relevant R chunks. Warnings that signal lifecycle changes (e.g., a function is deprecated and there’s a newer/better function out there) should generally be addressed by updating your code, not just by hiding the warning."
  },
  {
    "objectID": "project/project-1.html#tips",
    "href": "project/project-1.html#tips",
    "title": "Project 1",
    "section": "Tips",
    "text": "Tips\n\nYou’re working in the same repo as your teammates now, so merge conflicts will happen, issues will arise, and that’s fine! Commit and push often, and ask questions when stuck.\nReview the marking guidelines below and ask questions if any of the expectations are unclear.\nMake sure each team member is contributing, both in terms of quality and quantity of contribution (we will be reviewing commits from different team members).\nSet aside time to work together and apart (physically).\nCode:\n\nIn the output of your write-up, your code should be hidden (echo: false) so that your slides are neat and easy to read and your write-up is about your narrative and results only. However your document should include all your code such that if I re-render your Quarto file I should be able to obtain the results you presented. Exception: If you want to highlight something specific about a piece of code, you’re welcomed to show that portion.\nEven though your code is hidden, it should still conform to good coding practice, style, etc. You will be evaluated on code quality as well, which we will check by explicitly reviewing your Quarto documents (not just the rendered output).\n\nTeamwork: You are to complete the assignment as a team. All team members are expected to contribute equally to the completion of this assignment and team evaluations will be given at its completion - anyone judged to not have sufficiently contributed to the final product will have their grade penalized. While different team members may have different backgrounds and abilities, it is the responsibility of every team member to understand how and why all code and approaches in the assignment work.\nWhen you’re done, review the documents on GitHub to make sure you’re happy with the final state of your work. Then go get some rest!"
  },
  {
    "objectID": "course-syllabus.html",
    "href": "course-syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "This course will teach you how to use modern data science tools to visualize data and, through the lens of visualization, it will introduce you to programming and data science concepts and workflows. Working with data on issues of local, national, and global societal importance, we will learn to create elegant, insightful, and impactful data visualizations through iterative and reproducible processes. We will also discuss the role of visualization in exploratory data analyses as well as in communicating the results of statistical inference and modeling.\nThe main goal of the course is to empower students with a toolkit to explore topics of interest to them via visualizations they create while also learning programming and data science concepts.\nStudents will first learn the basics of the R statistical programming language as well as modern data science toolkit including RStudio for an integrated development environment, Quarto for reproducible computational documents, and Git and GitHub for version control and collaboration.\nBuilding on this foundation, students will continue to hone their visualization skills through the analysis of increasingly complex datasets throughout the semester. These datasets will be selected to reflect current issues of societal importance at the local (Duke/Durham), national, and global levels."
  },
  {
    "objectID": "course-syllabus.html#course-description",
    "href": "course-syllabus.html#course-description",
    "title": "Syllabus",
    "section": "",
    "text": "This course will teach you how to use modern data science tools to visualize data and, through the lens of visualization, it will introduce you to programming and data science concepts and workflows. Working with data on issues of local, national, and global societal importance, we will learn to create elegant, insightful, and impactful data visualizations through iterative and reproducible processes. We will also discuss the role of visualization in exploratory data analyses as well as in communicating the results of statistical inference and modeling.\nThe main goal of the course is to empower students with a toolkit to explore topics of interest to them via visualizations they create while also learning programming and data science concepts.\nStudents will first learn the basics of the R statistical programming language as well as modern data science toolkit including RStudio for an integrated development environment, Quarto for reproducible computational documents, and Git and GitHub for version control and collaboration.\nBuilding on this foundation, students will continue to hone their visualization skills through the analysis of increasingly complex datasets throughout the semester. These datasets will be selected to reflect current issues of societal importance at the local (Duke/Durham), national, and global levels."
  },
  {
    "objectID": "course-syllabus.html#learning-objectives",
    "href": "course-syllabus.html#learning-objectives",
    "title": "Syllabus",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nLearn a modern toolkit commonly used in data science research and careers (R, RStudio, Quarto, Git, GitHub).\nIntroduce students to the ideas and methods of data visualization in a comprehensible reproducible way using this toolkit.\nUnderstand the principles of designing and creating data visualizations.\nEvaluate, critique, and improve upon one’s own and others’ data visualizations through an iterative process.\nUse data visualization to look for and answer questions of societal importance and of interest to students."
  },
  {
    "objectID": "course-syllabus.html#prerequisites",
    "href": "course-syllabus.html#prerequisites",
    "title": "Syllabus",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis course has no pre-requisites."
  },
  {
    "objectID": "course-syllabus.html#workload",
    "href": "course-syllabus.html#workload",
    "title": "Syllabus",
    "section": "Workload",
    "text": "Workload\nYou are expected to put in ~6 hours of work / week outside of class. Some of you will do well with less time than this, and some of you will need more."
  },
  {
    "objectID": "course-syllabus.html#tips-for-success",
    "href": "course-syllabus.html#tips-for-success",
    "title": "Syllabus",
    "section": "Tips for success",
    "text": "Tips for success\n\nComplete the readings before each class.\nBe an active participant during lectures.\nAsk questions - during class or office hours, or by email. Ask me, your TAs, and your classmates.\nDo the homework assignments - start early and make sure you attempt and understand all questions.\nStart your project early and and allow adequate time to complete it.\nGive yourself plenty of time time to prepare a good cheat sheet for exams. This requires going through the material and taking the time to review the concepts that you’re not comfortable with.\nDo not procrastinate - don’t let a unit go by with unanswered questions as it will just make the following unit’s material even more difficult to follow."
  },
  {
    "objectID": "course-syllabus.html#textbooks",
    "href": "course-syllabus.html#textbooks",
    "title": "Syllabus",
    "section": "Textbooks",
    "text": "Textbooks\nReadings for the course will come from the following textbooks. They are freely available online and you do not need to purchase a physical copy of either book to succeed in this class.\n\n[r4ds]: Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund. R for Data Science. 2nd edition. O’Reilly, 2022.\n[socviz] Kieran Healy. Data Visualization: A Practical Introduction. Princeton University Press, 2018.\n[ims]: Mine Çetinkaya-Rundel and Jo Hardin. Introduction to Modern Statistics. (in progress) 2nd edition. OpenIntro, 2023."
  },
  {
    "objectID": "course-syllabus.html#course-community",
    "href": "course-syllabus.html#course-community",
    "title": "Syllabus",
    "section": "Course community",
    "text": "Course community\n\nDuke Community Standard\nAll students must adhere to the Duke Community Standard (DCS): Duke University is a community dedicated to scholarship, leadership, and service and to the principles of honesty, fairness, and accountability. Citizens of this community commit to reflect upon these principles in all academic and non-academic endeavors, and to protect and promote a culture of integrity.\nTo uphold the Duke Community Standard, students agree:\n\nI will not lie, cheat, or steal in my academic endeavors;\nI will conduct myself honorably in all my endeavors; and\nI will act if the Standard is compromised.\n\n\n\n\n\nInclusive community\nIt is my intent that students from all diverse backgrounds and perspectives be well-served by this course, that students’ learning needs be addressed both in and out of class, and that the diversity that the students bring to this class be viewed as a resource, strength, and benefit. It is my intent to present materials and activities that are respectful of diversity and in alignment with Duke’s Commitment to Diversity and Inclusion. Your suggestions are encouraged and appreciated. Please let me know ways to improve the effectiveness of the course for you personally, or for other students or student groups.\nFurthermore, I would like to create a learning environment for my students that supports a diversity of thoughts, perspectives and experiences, and honors your identities. To help accomplish this:\n\nIf you have a name that differs from those that appear in your official Duke records, please let me know! You’ll be able to note this in the Getting to know you survey.\nIf you feel like your performance in the class is being impacted by your experiences outside of class, please don’t hesitate to come and talk with me. If you prefer to speak with someone outside of the course, your academic dean is an excellent resource.\nI (like many people) am still in the process of learning about diverse perspectives and identities. If something was said in class (by anyone) that made you feel uncomfortable, please let me or a member of the teaching team know.\n\n\n\nPronouns\nPronouns are meaningful tools to communicate identities and experiences, and using pronouns supports a campus environment where all community members can thrive.\nPlease update your gender pronouns in Duke Hub. You can learn more at the Center for Sexual and Gender Diversity’s website.\n\n\nAccessibility\nIf there is any portion of the course that is not accessible to you due to challenges with technology or the course format, please let me know so we can make appropriate accommodations.\nThe Student Disability Access Office (SDAO) is available to ensure that students are able to engage with their courses and related assignments. Students should be in touch with the Student Disability Access Office to request or update accommodations under these circumstances.\n\n\nCommunication\nAll lecture notes, assignment instructions, an up-to-date schedule, and other course materials may be found on the course website: sta101-f23.github.io.\nI will regularly send course announcements via email and Canvas, make sure to check one or the other of these regularly. If an announcement is sent Monday through Thursday, I will assume that you have read the announcement by the next day. If an announcement is sent on a Friday or over the weekend, I will assume that you have read it by Monday.\n\n\nWhere to get help\n\nIf you have a question during lectures, feel free to ask it! There are likely other students with the same question, so by asking you will create a learning opportunity for everyone.\nThe teaching team is here to help you be successful in the course. You are encouraged to attend office hours to ask questions about the course content and assignments. Many questions are most effectively answered as you discuss them with others, so office hours are a valuable resource. Please use them!\nOutside of class and office hours, any general questions about course content or assignments should be posted on the course Slack. There is a chance another student has already asked a similar question, so please check the other posts on Slack before adding a new question. If you know the answer to a question posted on Slack, I encourage you to respond!\n\nCheck out the Support page for more resources.\nI want to make sure that you learn everything you were hoping to learn from this class. If this requires flexibility, please don’t hesitate to ask.\n\nYou never owe me personal information about your health (mental or physical) but you’re always welcome to talk to me. If I can’t help, I likely know someone who can.\nI want you to learn lots of things from this class, but I primarily want you to stay healthy, balanced, and grounded during this crisis."
  },
  {
    "objectID": "course-syllabus.html#lectures",
    "href": "course-syllabus.html#lectures",
    "title": "Syllabus",
    "section": "Lectures",
    "text": "Lectures\nThe goal of the lectures is for them to be as interactive as possible. My role as instructor is to introduce you new tools and techniques, but it is up to you to take them and make use of them. A lot of what you do in this course will involve writing code, and coding is a skill that is best learned by doing. Therefore, as much as possible, you will be working on a variety of tasks and activities throughout each lecture. Attendance will not be taken during class but you are expected to attend all lecture sessions and meaningfully contribute to in-class exercises and discussion.\nYou are expected to bring a laptop to each class so that you can take part in the in-class exercises. Please make sure your laptop is fully charged before you come to class as the number of outlets in the classroom will not be sufficient to accommodate everyone. See Duke LIFE loaner laptop program if you need a loaner laptop."
  },
  {
    "objectID": "course-syllabus.html#assessments-and-grading",
    "href": "course-syllabus.html#assessments-and-grading",
    "title": "Syllabus",
    "section": "Assessments and grading",
    "text": "Assessments and grading\nThe final course grade will be calculated as follows:\n\n\n\nCategory\nPercentage\n\n\n\n\nAttendance and participation\n10%\n\n\nHomework\n25%\n\n\nExam 1\n15%\n\n\nExam 2\n15%\n\n\nProject 1\n15%\n\n\nProject 2\n20%\n\n\n\nThe final letter grade will be determined based on the following thresholds:\n\n\n\nLetter Grade\nFinal Course Grade\n\n\n\n\nA\n&gt;= 93\n\n\nA-\n90 - 92.99\n\n\nB+\n87 - 89.99\n\n\nB\n83 - 86.99\n\n\nB-\n80 - 82.99\n\n\nC+\n77 - 79.99\n\n\nC\n73 - 76.99\n\n\nC-\n70 - 72.99\n\n\nD+\n67 - 69.99\n\n\nD\n63 - 66.99\n\n\nD-\n60 - 62.99\n\n\nF\n&lt; 60\n\n\n\nThese are upper bounds for grade cutoffs, depending on the class performance the cutoffs may be lowered but they won’t be increased.\nAll work is expected to be submitted by the deadline and there are no make ups for any missed assessments. See Section 10.2 for policies on late work.\n\nAttendance and participation\nYou are expected to be present at class meeting and actively participate in the discussion. Your attendance and participation during class, as well as your activity on the course Slack will make up a non-insignificant portion of your grade in this class. While I might sometimes call on you during the class discussion, it is your responsibility to be an active participant without being called on.\nIf you attend at least 80% of the classes, you’ll get all available points for this component.\n\n\nHomework\nIn homework assignments, you will apply the concepts discussed in lecture to various data analysis scenarios. Homework assignments will focus on both computation and conceptualization. They will be completed using Quarto and submitted in GitHub repositories. While you may collaborate with others on homework assignments, your final solution should be your own.\nLowest homework score will be dropped.\n\n\nExams\nThere will be two exams. Each exam will be comprised of two components:\n\nIn class: 75 minute in-class exam. This exam is closed book, however you are allowed to use one sheet of notes (“cheat sheet”) to the midterm and the final. This sheet must be no larger than 8 1/2 x 11, and must be prepared by you. You may use both sides of the sheet. (70% of the grade)\nTake home: Following the in class exam, you’ll have 48 hours to complete the take home portion of your exam. The take home portion will follow from the in class exam and focus on the analysis of a dataset introduced in the take home exam. (30% of the grade)\n\nThrough these exams you have the opportunity to demonstrate what you’ve learned in the course thus far. Each exam will include small analyses and computational tasks related to the content in application exercises. More details about the content and structure of the exams will be discussed during the semester.\nSee Section 12 for dates and times of the exams. Exam dates cannot be changed and no make-up exams will be given. If you can’t take the exams on these dates, you should drop this class.\n\n\nProjects\nYou will work on two projects that consist of analyses of datasets of students’ own choosing. The data set may already exist, or students may collect their own data using a survey or by conducting an experiment. The goal of the projects is for you to demonstrate proficiency in the techniques we have covered in this class (and beyond, if preferred) and apply them to a novel data set in a meaningful way.\nThe mid-semester project will be on visualizing a dataset given to you and the final project will be on visualizing a dataset of your own choice. More details about the projects will be provided during the semester. Projects will be completed in teams.\nYou will be assigned to a different team for each of your two projects. You are encouraged to sit with your teammates in lectures. All team members are expected to contribute equally to the completion of each project and you will be asked to evaluate your team members after each assignment is due. Failure to adequately contribute to an assignment will result in a penalty to your mark relative to the team’s overall mark.\nSee Section 12 for dates and times of project deadlines. Project deadlines cannot be changed. If you can’t be in class for the final project presentation, you should drop this class."
  },
  {
    "objectID": "course-syllabus.html#course-policies",
    "href": "course-syllabus.html#course-policies",
    "title": "Syllabus",
    "section": "Course policies",
    "text": "Course policies\n\nAcademic honesty\nTL;DR: Don’t cheat!\nPlease abide by the following as you work on assignments in this course:\n\nCollaboration: Only work that is clearly assigned as team work should be completed collaboratively.\n\nThe homework assignments must also be completed individually and you are welcomed to discuss the assignment with classmates at a high level (e.g., discuss what’s the best way for approaching a problem, what functions are useful for accomplishing a particular task, etc.). However you may not directly share answers to homework questions (including any code) with anyone other than myself and the teaching assistants.\nFor the projects, collaboration within teams is not only allowed, but expected. Communication between teams at a high level is also allowed however you may not share code or components of the project across teams.\nOn individual assignments you may not directly share code with another student in this class, and on team assignments you may not directly share code with another team in this class.\n\nOnline resources: I am well aware that a huge volume of code is available on the web to solve any number of problems. Unless I explicitly tell you not to use something, the course’s policy is that you may make use of any online resources (e.g., StackOverflow) but you must explicitly cite where you obtained any code you directly use (or use as inspiration). Any recycled code that is discovered and is not explicitly cited will be treated as plagiarism.\nUse of generative artificial intelligence (AI): You should treat generative AI, such as ChatGPT, the same as other online resources. There are two guiding principles that govern how you can use AI in this course:1 (1) Cognitive dimension: Working with AI should not reduce your ability to think clearly. We will practice using AI to facilitate—rather than hinder—learning. (2) Ethical dimension: Students using AI should be transparent about their use and make sure it aligns with academic integrity.\n\n✅ AI tools for code: You may make use of the technology for coding examples on assignments; if you do so, you must explicitly cite where you obtained the code. Any recycled code that is discovered and is not explicitly cited will be treated as plagiarism. You may use these guidelines for citing AI-generated content.\n❌ AI tools for narrative: Unless instructed otherwise, you may not use generative AI to write narrative on assignments. In general, you may use generative AI as a resource as you complete assignments but not to answer the exercises for you. You are ultimately responsible for the work you turn in; it should reflect your understanding of the course content.\n\n\nRegardless of course delivery format, it is the responsibility of all students to understand and follow all Duke policies, including academic integrity (e.g., completing one’s own work, following proper citation of sources, adhering to guidance around group work projects, and more). Ignoring these requirements is a violation of the Duke Community Standard. Any questions and/or concerns regarding academic integrity can be directed to the Office of Student Conduct and Community Standards at conduct@duke.edu.\nAny violations in academic honesty standards as outlined in the Duke Community Standard and those specific to this course will\n\nautomatically result in a 0 for the assignment,\ncan further impact your overall course grade, and\nwill be reported to the Office of Student Conduct for further action.\n\n\n\nLate work & extensions\nThe due dates for assignments are there to help you keep up with the course material and to ensure the teaching team can provide feedback within a timely manner. We understand that things come up periodically that could make it difficult to submit an assignment by the deadline.\nPolicy on late work depends on the particular course component:\n\nHomework assignments:\n\nLate, but within 24 hours of deadline: -20% of available points.\nAny later: No credit, and we will not provide written feedback.\nNote that lowest homework score will be dropped, even if that score is a 0.\n\nExams:\n\nIn class portions of the exams can obviously not be turned in late.\nLate exams are not accepted.\n\nProjects: The following three components contribute to your project score.\n\nPresentation: Late presentations are not accepted and there are no make ups for missed presentations.\nWrite up: GitHub repositories will be closed to contributions at the deadline. If you need to submit your work late, Slack/email me to reopen your repository.\n\nLate, but within 24 hours of deadline: -20% of available points.\nAny later: No credit, and we will not provide written feedback.\n\nPeer evaluation: Late peer evaluations are not accepted. If you do not turn in your peer evaluation, you get 0 points for your own peer score as well, regardless of how your teammates have evaluated you.\n\n\n\n\nWaiver for extenuating circumstances\nIf there are circumstances that prevent you from completing a homework assignment by the stated due date, you may email the Head TA (Shuo Wang, shuo.wang717@duke.edu) before the deadline to waive the late penalty. In your email, you only need to request the waiver; you do not need to provide explanation. This waiver may only be used for once in the semester, so only use it for a truly extenuating circumstance.\nIf there are circumstances that are having a longer-term impact on your academic performance, please let your academic dean know, as they can be a resource. Please let me know if you need help contacting your academic dean.\n\n\nRegrade requests\nEvery effort will be made to mark your work accurately. We are on your side, and want you to receive every point you have worked to earn. However, sometimes grading mistakes happen. If you believe that an error has been made, return the paper to the instructor within four days, stating your claim in writing.\nThe following claims will be considered for re-grading:\n\npoints are not totaled correctly;\nthe grader did not see a correct answer that is on your paper;\nyour answer is the same as the correct answer, but in a different form (e.g., you wrote a correct answer as 1/3 and the grader was looking for 0.333);\nyour answer to a free response question is essentially correct but stated slightly differently than the grader’s expectation.\n\nThe following claims will not be considered for re-grading:\n\narguments about the number of points lost;\narguments about question wording.\n\nConsidering re-grades consumes time and resources that TAs and the instructor would rather spend helping you understand material. Please bring only claims of type 1-4 to our attention.\nNote that during the regrade process your score could go up or go down or not change.\n\n\n\n\n\n\nWarning\n\n\n\nNo grades will be changed after the project presentations.\n\n\n\n\nAttendance policy\nResponsibility for class attendance rests with individual students. Since regular and punctual class attendance is expected, students must accept the consequences of failure to attend. More details on Trinity attendance policies are available here.\nHowever, there may be many reasons why you cannot be in class on a given day, particularly with possible extra personal and academic stress and health concerns this semester. All course lectures will be recorded and available to enrolled students after class. If you miss a lecture, make sure to watch the recording and review the material before the next class session. Given the technologies we use in the course, this is straightforward to do asynchronously. Overall these policies are put in place to ensure communication between team members, respect for each others’ time, and also to give you a safety net in the case of illness or other reasons that keep you away from attending class.\nNote that attendance and participation is part of your grade as well.\n\n\nAttendance policy related to COVID symptoms, exposure, or infection\nStudent health, safety, and well-being are the university’s top priorities. To help ensure your well-being and the well-being of those around you, please do not come to class if you have tested positive for COVID-19 or have possible symptoms and have not yet been tested. If any of these situations apply to you, you must follow university guidance related to the ongoing COVID-19 pandemic and current health and safety protocols. If you are experiencing any COVID-19 symptoms, contact student health (dshcheckin@duke.edu, 919- 681-9355). Learn more about current university policy related to COVID-19 at https://coronavirus.duke.edu. To keep the university community as safe and healthy as possible, you will be expected to follow these guidelines. Please reach out to me and your academic dean as soon as possible if you need to quarantine or isolate so that we can discuss arrangements for your continued participation in class.\n\n\nInclement weather policy\nIn the event of inclement weather or other connectivity-related events that prohibit class attendance, I will notify you how we will make up missed course content and work. This might entail holding the class on Zoom synchronously, we may rely on Duke’s designated make-up days, or you may be asked to watch a recording of the class.\n\n\nPolicy on video recording course content\nAll lectures will be recorded and available on Panopto, so students should not need to create their own recordings of lectures. If you feel that you need record the lectures yourself, you must get permission from me ahead of time and these recordings should be used for personal study only, no for distribution. The full policy on recording of lectures falls under the Duke University Policy on Intellectual Property Rights, available at https://policies.provost.duke.edu/docs/faculty-handbook-appendix-m-intellectual-property. Unauthorized distribution is a cause for disciplinary action by the Judicial Board."
  },
  {
    "objectID": "course-syllabus.html#accommodations",
    "href": "course-syllabus.html#accommodations",
    "title": "Syllabus",
    "section": "Accommodations",
    "text": "Accommodations\n\nAcademic accommodations\nIf you are a student with a disability and need accommodations for this class, it is your responsibility to register with the Student Disability Access Office (SDAO) and provide them with documentation of your disability. SDAO will work with you to determine what accommodations are appropriate for your situation. Please note that accommodations are not retroactive and disability accommodations cannot be provided until a Faculty Accommodation Letter has been given to me. Please contact SDAO for more information: sdao@duke.edu or access.duke.edu.\n\n\nReligious accommodations\nStudents are permitted by university policy to be absent from class to observe a religious holiday. Accordingly, Trinity College of Arts & Sciences and the Pratt School of Engineering have established procedures to be followed by students for notifying their instructors of an absence necessitated by the observance of a religious holiday. Please submit requests for religious accommodations at the beginning of the semester so that we can work to make suitable arrangements well ahead of time. You can find the policy and relevant notification form here: https://trinity.duke.edu/undergraduate/academic-policies/religious-holidays.\nNote: If you’ve read this far in the syllabus, email me a picture of your pet if you have one or your favorite meme!"
  },
  {
    "objectID": "course-syllabus.html#sec-important-dates",
    "href": "course-syllabus.html#sec-important-dates",
    "title": "Syllabus",
    "section": "Important dates",
    "text": "Important dates\n\nMonday, August 28: Classes begin\nFriday, September 8: Drop/add ends\nTuesday, October 3: Exam 1 - In class\nThursday, October 5: Exam 1 - Take home due\nThursday, October 12: Project 1 due + presentations\nFriday, October 13: Mid-semester grades reported\nTuesday, October 17: Fall Break - No lecture\nFriday, November 10: Last day to withdraw with W\nTuesday, November 14: Exam 2 - In class\nThursday, November 16: Exam 2 - Take home due\nThursday, November 23: Thanksgiving Break - No lecture\nThursday, December 7: Project 2 due + presentations\n\nFor more important dates, see the full Duke Academic Calendar."
  },
  {
    "objectID": "hw/hw-3.html",
    "href": "hw/hw-3.html",
    "title": "HW 3",
    "section": "",
    "text": "Important\n\n\n\nThis homework is due Thursday, Oct 26 at 5:00 pm ET."
  },
  {
    "objectID": "hw/hw-3.html#packages",
    "href": "hw/hw-3.html#packages",
    "title": "HW 3",
    "section": "Packages",
    "text": "Packages\n\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(scales)\nlibrary(openintro)"
  },
  {
    "objectID": "hw/hw-3.html#sec-guidelines-tips",
    "href": "hw/hw-3.html#sec-guidelines-tips",
    "title": "HW 3",
    "section": "Guidelines + tips",
    "text": "Guidelines + tips\nYour plots should include an informative title, axes should be labeled, and careful consideration should be given to aesthetic choices.\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete this homework and other assignments in this course. There will be periodic reminders in this assignment to remind you to knit, commit, and push your changes to GithHub. You should have at least 3 commits with meaningful commit messages by the end of the assignment.\n\n\n\n\n\n\nNote\n\n\n\nNote: Do not let R output answer the question for you unless the question specifically asks for just a plot. For example, if the question asks for the number of columns in the data set, please type out the number of columns. You are subject to lose points if you do not."
  },
  {
    "objectID": "hw/hw-3.html#workflow-formatting",
    "href": "hw/hw-3.html#workflow-formatting",
    "title": "HW 3",
    "section": "Workflow + formatting",
    "text": "Workflow + formatting\nMake sure to\n\nUpdate author name on your document.\nLabel all code chunks informatively and concisely.\nFollow the Tidyverse code style guidelines.\nMake at least 3 commits.\nResize figures where needed, avoid tiny or huge plots.\nUse informative title and axis labels.\nTurn in an organized, well formatted document."
  },
  {
    "objectID": "hw/hw-3.html#credit-card-balances",
    "href": "hw/hw-3.html#credit-card-balances",
    "title": "HW 3",
    "section": "Credit card balances",
    "text": "Credit card balances\nThe data for Exercises 1-___ is on credit card balances. The variables of interest from the dataset, called credit, are as follows:\nThe dataset is in the data folder of your repository, and it’s called credit.csv. It contains the following variables:\n\nbalance: Credit card balance in $\nincome: Income in $1,000\nstudent: Whether the individual is a student (Yes) or not (No)\nmarried: Whether the individual is a married (Yes) or not (No)\nlimit: Credit limit\n\n\nExercise 1\nLoad the data and save it as credit. Then, make a scatterplot of balance vs. income and overlay the line of best fit, without the uncertainty band around it.\n\n\nExercise 2\nFit the regression model for predicting balance from income, display a tidy output of the model. Then, interpret the slope and the intercept in context of the data.\n\n\nExercise 3\nPlot the residuals vs. the predicted values. Does the plot indicate any problems with the model?\n\n\nExercise 4\nRecreate the following visualization. The only aspect you do not need to match are the colors, however you should use a pair of colors of your own choosing to indicate students and non-students. Choose colors that appear “distinct enough” from each other to you.\nThen, describe the relationship between income and credit card balance, touching on how/if the relationship varies based on whether the individual is a student or not or whether they’re married or not.\nHints:\n\nVisualize the relationship between x (income) and y (balance) for each student and married type.\nPay attention to formatting of the labels in x and y scales.\nNote that this visualization doesn’t have a legend.\nFor labels of facets that indicate the names of the variables along with their levels, see the labeller argument of your faceting function, and specifically review the documentation and examples for the labeller() function.\nThe theme of the plot is theme_bw().\n\n\n\n\nExercise 5\nBased on your answer to Exercise 4, do you think married and student might be useful predictors, in addition to income for predicting credit card balance? Explain your reasoning.\n\n\nExercise 6\nCredit utilization is defined as the proportion of credit balance to credit limit. Calculate credit utilization for all individuals in the credit data, and use it to recreate the following visualization.\nOnce again, the only aspect of the visualization you do not need to match are the colors, but you should use the same colors from the previous exercise.\n\n\n\nExercise 7\nBased on the plot from Exercise 6, how, if at all, are the relationships between income and credit utilization different than the relationships between income and credit balance for individuals with various student and marriage status.\n\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "hw/hw-3.html#us-counties",
    "href": "hw/hw-3.html#us-counties",
    "title": "HW 3",
    "section": "US counties",
    "text": "US counties\nExercises 8 and 9 use the county dataset in the openintro package. You can find out more about the dataset by inspecting its documentation with ?county and you can also find this information here.\n\nExercise 8\na. What does the following code do? Does it work? Does it make sense? Why/why not?\nCode is grammatically correct but the plot is meaningless, it combines levels from two variables on the x-axis.\n\nggplot(county) +\n  geom_point(aes(x = median_edu, y = median_hh_income)) +\n  geom_boxplot(aes(x = smoking_ban, y = pop2017))\n\nb. Which of the following two plots makes it easier to compare poverty levels (poverty) across people from different median education levels (median_edu)? What does this say about when to place a faceting variable across rows or columns?\n\nggplot(county |&gt; filter(!is.na(median_edu))) + \n  geom_point(aes(x = homeownership, y = poverty)) + \n  facet_wrap(~median_edu, nrow = 1)\nggplot(county |&gt; filter(!is.na(median_edu))) + \n  geom_point(aes(x = homeownership, y = poverty)) + \n  facet_wrap(~median_edu, ncol = 1)\n\n\n\n\n\n\n\n\n\n\n\n\nYou know the drill: render, commit, and push!\n\n\n\nExercise 9\nRecreate the R code necessary to generate the following graphs. Note that wherever a categorical variable is used in the plot, it’s metro. You do not need to lay them out in a 2-column format.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRender, commit, and push one last time.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "hw/hw-3.html#review",
    "href": "hw/hw-3.html#review",
    "title": "HW 3",
    "section": "Review",
    "text": "Review\nBefore you call it “done”,\n\nmake sure you’ve answered all questions (or, at least, have not skipped any accidentally) and\nreview the Section 1.2 section and make any edits/corrections needed.\n\nYou can change answers to exercises you’ve “completed” and commit and push again. We will only grade the final version of your assignment. You can commit and push as many times as you like until the deadline."
  },
  {
    "objectID": "hw/hw-3.html#submission",
    "href": "hw/hw-3.html#submission",
    "title": "HW 3",
    "section": "Submission",
    "text": "Submission\nYou do not have to do anything special to “submit” your assignment. We will close the repos to further pushes at the deadline, and will take your work as of that time point as your submission.\nIf you need to submit late for any reason, contact the professor."
  },
  {
    "objectID": "hw/hw-3.html#grading",
    "href": "hw/hw-3.html#grading",
    "title": "HW 3",
    "section": "Grading",
    "text": "Grading\n\nExercise 1-9: 10 points each\nWorkflow + formatting: 10 points\nTotal: 100 points"
  },
  {
    "objectID": "hw/hw-2.html",
    "href": "hw/hw-2.html",
    "title": "HW 2",
    "section": "",
    "text": "Important\n\n\n\nThis homework is due Thursday, Sep 21 at 5:00 pm ET."
  },
  {
    "objectID": "hw/hw-2.html#packages",
    "href": "hw/hw-2.html#packages",
    "title": "HW 2",
    "section": "Packages",
    "text": "Packages\n\nlibrary(tidyverse)\nlibrary(dsbox)\nlibrary(babynames)\nlibrary(nycflights13)"
  },
  {
    "objectID": "hw/hw-2.html#sec-guidelines-tips",
    "href": "hw/hw-2.html#sec-guidelines-tips",
    "title": "HW 2",
    "section": "Guidelines + tips",
    "text": "Guidelines + tips\nAs we’ve discussed in lecture, your plots should include an informative title, axes should be labeled, and careful consideration should be given to aesthetic choices.\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete this homework and other assignments in this course. There will be periodic reminders in this assignment to remind you to knit, commit, and push your changes to GithHub. You should have at least 3 commits with meaningful commit messages by the end of the assignment.\n\n\n\n\n\n\nNote\n\n\n\nNote: Do not let R output answer the question for you unless the question specifically asks for just a plot. For example, if the question asks for the number of columns in the data set, please type out the number of columns. You are subject to lose points if you do not."
  },
  {
    "objectID": "hw/hw-2.html#workflow-formatting",
    "href": "hw/hw-2.html#workflow-formatting",
    "title": "HW 2",
    "section": "Workflow + formatting",
    "text": "Workflow + formatting\nMake sure to\n\nUpdate author name on your document.\nLabel all code chunks informatively and concisely.\nFollow the Tidyverse code style guidelines.\nMake at least 3 commits.\nResize figures where needed, avoid tiny or huge plots.\nUse informative title and axis labels.\nTurn in an organized, well formatted document."
  },
  {
    "objectID": "hw/hw-2.html#read-traffic-accidents-in-edinburgh",
    "href": "hw/hw-2.html#read-traffic-accidents-in-edinburgh",
    "title": "HW 2",
    "section": "Read traffic accidents in Edinburgh",
    "text": "Read traffic accidents in Edinburgh\nThe data for Exercises 1-5 are available online by the UK Government. It covers all recorded accidents in Edinburgh in 2018 and some of the variables were modified for the purposes of this assignment. The data can be found in the dsbox package, and it's called accidents. You can find out more about the dataset by inspecting its documentation with ?accidents and you can also find this information here.\n\nExercise 1\nMake a histogram of the times of road accidents, using 24 bins so that each bin represents (roughly) an hour. Based on this histogram, what are common times of the day that road accidents occur in Edinburgh?\n\n\nExercise 2\nRecreate the following visualization. Describe, in one sentence, what additional information you can glean from this visualization compared to the previous one from Exercise 1.\nHint: To match the transparency level of the density curves, you can use alpha = 0.5.\n\n\n\n\n\n\n\nExercise 3\nCreate a new variable in the accidents data frame called day_of_week_type which takes the value \"Weekend\" if day_of_week is Saturday or Sunday, and \"Weekday\" otherwise. Assign the resulting data frame to accidents, overwriting the original data frame with the new one including the days_of_week_type variable. Print the new accidents data frame, relocating the day_of_week_type and day_of_week to the beginning of the data frame. Spot check that the values of the day_of_week_type have been created correctly.\n\n\nExercise 4\nThe following two visualizations were created by taking the visualization from Exercise 2 and faceting it by the new variable, day_of_week_type. Which plot (Plot A or Plot B) is better for comparing the density and severity of road accidents throughout the day in Edinburgh. Explain your reasoning.\n\n\n\n\n\n\n\n\n\n\n\n\nExercise 5\nRecreate the visualization you chose in Exercise 4.\nHint: The plot uses the viridis color scale.\n\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding. You can use a commit message like “Finished Part 1”."
  },
  {
    "objectID": "hw/hw-2.html#babynames",
    "href": "hw/hw-2.html#babynames",
    "title": "HW 2",
    "section": "Babynames",
    "text": "Babynames\nThe data for Exercises 6-9 come from the babynames package. The name of the data frame you’ll use is babynames, which contains the number of children of each sex given each name, for each year from 1880 to 2017. All names with more than 5 uses are given.\n\nExercise 6\nRecreate the visualization below, with one modification: instead of Elliott, use your name. Or, if your name isn’t in the dataset (like mine, pun intended), use a friend’s name or any name of your choosing. Describe the trend you observe in the plot.\n\n\n\n\n\n\n\nExercise 7\nThe following visualization displays the same information as the one in Exercise 7, except it has been enhanced in a variety of ways.\n\nIdentify and enumerate the differences between the visualization below and the one above.\nImplement the updates you enumerated in part (a) to recreate a visualization below. Note: You should be updating your plot from Exercise 6, not the “Elliott” plot.\n\n\n\n\n\n\n\nNow is again a good time to render, commit, and push, with a commit message line “Finished Part 2”. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "hw/hw-2.html#miscellaneous",
    "href": "hw/hw-2.html#miscellaneous",
    "title": "HW 2",
    "section": "Miscellaneous",
    "text": "Miscellaneous\n\nExercise 8\nRead the docs:\n\nRun the following code. What does it do? Or, another way to ask this question is, what does the result tell you?\n\nflights |&gt; \n  distinct(origin, dest)\n\n\n\n\nNow run the following code. How is the output different? Hint: You may need to “read the docs”, i.e., read the help documentation for distinct(), to find out what setting the .keep_all argument to TRUE does.\n\nflights |&gt; \n  distinct(origin, dest, .keep_all = TRUE)\n\n\n\nYou know the drill: render, commit, and push!\n\n\n\nExercise 9\nCode style: Fix up the code style and briefly describe your fixes. Then, inspect the output. This dataset was introduced in your reading. Briefly describe what this code does.\nHint: You can refer to the Tidyverse style guide.\n\nflights|&gt;group_by(dest)|&gt;summarize(MEAN.Arrival_delay=mean(arr_delay, na.rm = TRUE))|&gt;arrange(desc(MEAN.Arrival_delay))\n\n\nRender, commit, and push one last time.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "hw/hw-2.html#review",
    "href": "hw/hw-2.html#review",
    "title": "HW 2",
    "section": "Review",
    "text": "Review\nBefore you call it “done”,\n\nmake sure you’ve answered all questions (or, at least, have not skipped any accidentally) and\nreview the Section 1.2 section and make any edits/corrections needed.\n\nYou can change answers to exercises you’ve “completed” and commit and push again. We will only grade the final version of your assignment. You can commit and push as many times as you like until the deadline."
  },
  {
    "objectID": "hw/hw-2.html#submission",
    "href": "hw/hw-2.html#submission",
    "title": "HW 2",
    "section": "Submission",
    "text": "Submission\nYou do not have to do anything special to “submit” your assignment. We will close the repos to further pushes at the deadline, and will take your work as of that time point as your submission.\nIf you need to submit late for any reason, contact the professor."
  },
  {
    "objectID": "hw/hw-2.html#grading",
    "href": "hw/hw-2.html#grading",
    "title": "HW 2",
    "section": "Grading",
    "text": "Grading\n\nExercise 1-9: 10 points each\nWorkflow + formatting: 10 points\nTotal: 100 points"
  },
  {
    "objectID": "hw/hw-1.html",
    "href": "hw/hw-1.html",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "",
    "text": "Important\n\n\n\nThis homework is due Thursday, Sep 14 at 5:00 pm ET."
  },
  {
    "objectID": "hw/hw-1.html#packages",
    "href": "hw/hw-1.html#packages",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Packages",
    "text": "Packages\n\nlibrary(tidyverse)"
  },
  {
    "objectID": "hw/hw-1.html#sec-guidelines-tips",
    "href": "hw/hw-1.html#sec-guidelines-tips",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Guidelines + tips",
    "text": "Guidelines + tips\nAs we’ve discussed in lecture, your plots should include an informative title, axes should be labeled, and careful consideration should be given to aesthetic choices.\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete this homework and other assignments in this course. There will be periodic reminders in this assignment to remind you to knit, commit, and push your changes to GithHub. You should have at least 3 commits with meaningful commit messages by the end of the assignment.\n\n\n\n\n\n\nNote\n\n\n\nNote: Do not let R output answer the question for you unless the question specifically asks for just a plot. For example, if the question asks for the number of columns in the data set, please type out the number of columns. You are subject to lose points if you do not."
  },
  {
    "objectID": "hw/hw-1.html#workflow-formatting",
    "href": "hw/hw-1.html#workflow-formatting",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Workflow + formatting",
    "text": "Workflow + formatting\nMake sure to\n\nUpdate author name on your document.\nLabel all code chunks informatively and concisely.\nFollow the Tidyverse code style guidelines.\nMake at least 3 commits.\nResize figures where needed, avoid tiny or huge plots.\nUse informative title and axis labels.\nTurn in an organized, well formatted document."
  },
  {
    "objectID": "hw/hw-1.html#exercise-1",
    "href": "hw/hw-1.html#exercise-1",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Exercise 1",
    "text": "Exercise 1\nUsing inline code to generate the number of rows and columns and include them in a sentence, answer the following questions:\n\nHow many rows are in the anti_lgbtq dataset? What does each row represent?\nHow many columns are in the anti_lgbtq dataset? Indicate the type of each variable (categorical or numerical).\n\n\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding. You can use a commit message like “Finished Exercise 1”."
  },
  {
    "objectID": "hw/hw-1.html#exercise-2",
    "href": "hw/hw-1.html#exercise-2",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Exercise 2",
    "text": "Exercise 2\nVisualize the distribution of contribution amounts using a histogram. Based on the shape, calculate the appropriate summary statistics for the center and spread of the distribution. Using the visualization and the summary statistics you calculated, describe the distribution of contribution amounts to politicians sponsoring anti-LGBTQ+ legislation and/or government policy in the 2021-2022 legislative session.\n\nNow is again a good time to render, commit, and push, with a commit message line “Finished Exercise 2”. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "hw/hw-1.html#exercise-3",
    "href": "hw/hw-1.html#exercise-3",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Exercise 3",
    "text": "Exercise 3\nFor this exercise, make two visualizations that display the distribution of Pride sponsors based on whether the company is a Fortune 500 company.\n\nThe first distribution should allow you to compare the numbers of Pride sponsors who are and are not Fortune 500 companies.\nThe second visualization should allow you to compare the proportions instead.\n\nWhat information about these two variables can you\n\nget from both visualizations?\nget from from the first visualization, but not the second?\nget from from the second visualization, but not the first?\nget from neither visualization?\n\n\nRender, commit, and push, with an appropriate commit message. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "hw/hw-1.html#exercise-4",
    "href": "hw/hw-1.html#exercise-4",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Exercise 4",
    "text": "Exercise 4\nFirst, make a bar plot of hrc_pledge and take note of the number of companies who have take the HRC pledge. Then, visualize the distribution of pride sponsors based on whether the company has made an HRC pledge. Make sure that your visualization allows you to make statements about the proportion of pride sponsors who have and have not made the HRC pledge. Describe the relationship, if any, between these two variables using features of your visualization as justification for your conclusions.\n\nRender, commit, and push, with an appropriate commit message. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "hw/hw-1.html#exercise-5",
    "href": "hw/hw-1.html#exercise-5",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Exercise 5",
    "text": "Exercise 5\nSuppose you’re helping a friend who is writing a piece for The Chronicle about companies that both contribute to anti-LGBTQ+ politicians and sponsor Pride events. Your friend wonders: Does sponsoring a Pride event make a difference?\nLuckily, you can help them answer this question with data visualization!\n\nMake side-by-side box plots of contribution amounts based on whether the company sponsored a Pride.\nInclude informative title and axis labels.\nFinally, write a brief narrative comparing the distributions of anti-LGBTQ+ contribution amounts from companies that did and did not sponsor Pride events. Your narrative should touch on whether having sponsored a Pride event “makes a difference” in terms of the contribution amount.\n\n\nRender, commit, and push, with an appropriate commit message. Before proceeding, check that you’ve committed and pushed all changed documents and your Git pane is completely empty."
  },
  {
    "objectID": "hw/hw-1.html#exercise-6",
    "href": "hw/hw-1.html#exercise-6",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Exercise 6",
    "text": "Exercise 6\nNext, your friend is curious if about the relationship between contribution amounts and number of politicians companies contribute to. They wonder: Does the contribution amount go up as the number of politicians contributed to increases?\nOnce again, data visualization to the rescue!\n\nVisualize the relationship between the number of politicians (on the x-axis) and the contribution amount (on the y-axis) and describe the relationship between these two variables.\nIdentify any extreme outliers – you will need to dive into the data to figure out which companies these are. (Hint: There are two extreme outliers that are visibly very far away from the rest of the data.)\nRe-create the visualization without these two outliers and comment on whether the relationship is different without them.\n\nYour narrative should touch on whether the contribution amount goes up as the number of politicians contributed to increases.\n\nRender, commit, and push, with an appropriate commit message. Before proceeding, check that you’ve committed and pushed all changed documents and your Git pane is completely empty."
  },
  {
    "objectID": "hw/hw-1.html#exercise-7",
    "href": "hw/hw-1.html#exercise-7",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Exercise 7",
    "text": "Exercise 7\nCreate a data visualization of interest to you based on these data. You can use the entire dataset, a subset based on a variable, or just a few companies of particular interest to you. Write a brief (2-3 sentence) narrative on why you chose this visualization and what the visualization displays/reveals.\n\nRender, commit, and push, with an appropriate commit message. Before proceeding, check that you’ve committed and pushed all changed documents and your Git pane is completely empty.\n\n\n\n\n\n\n\nNote\n\n\n\nThe following exercises are conceptual and do not require a dataset or writing original code, however you may need to refer to code documentation to answer them."
  },
  {
    "objectID": "hw/hw-1.html#exercise-8",
    "href": "hw/hw-1.html#exercise-8",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Exercise 8",
    "text": "Exercise 8\n\nDescribe the following terms in your own words:\n\nData-to-ink ratio\nSnake case\nWhisker (of a box plot)\n\nRead ?facet_wrap. What does nrow do? What does ncol do? What other options control the layout of the individual panels? Why doesn’t facet_grid() have nrow and ncol arguments?\n\n\nYou know the drill: render, commit, and push!"
  },
  {
    "objectID": "hw/hw-1.html#exercise-9",
    "href": "hw/hw-1.html#exercise-9",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Exercise 9",
    "text": "Exercise 9\n\nFill in the blanks:\n\nThe gg in the name of the package ggplot2 stands for ___.\nIf you map the same continuous variable to both x and y aesthetics in a scatterplot, you get a straight ___ line. (Choose between “vertical”, “horizontal”, or “diagonal”.)\n\nCode style: Fix up the code style by spaces and line breaks where needed. Briefly describe your fixes. (Hint: You can refer to the Tidyverse style guide.)\n\n\nggplot(data=mpg,mapping=aes(x=drv,fill=class))+geom_bar() +scale_fill_viridis_d()\n\n\nRender, commit, and push one last time.\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "hw/hw-1.html#review",
    "href": "hw/hw-1.html#review",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Review",
    "text": "Review\nBefore you call it “done”,\n\nmake sure you’ve answered all questions (or, at least, have not skipped any accidentally) and\nreview the Section 1.2 section and make any edits/corrections needed.\n\nYou can change answers to exercises you’ve “completed” and commit and push again. We will only grade the final version of your assignment. You can commit and push as many times as you like until the deadline."
  },
  {
    "objectID": "hw/hw-1.html#submission",
    "href": "hw/hw-1.html#submission",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Submission",
    "text": "Submission\nYou do not have to do anything special to “submit” your assignment. We will close the repos to further pushes at the deadline, and will take your work as of that time point as your submission.\nIf you need to submit late for any reason, contact the professor."
  },
  {
    "objectID": "hw/hw-1.html#grading",
    "href": "hw/hw-1.html#grading",
    "title": "HW 1 - Anti-LGBTQ+ contributions",
    "section": "Grading",
    "text": "Grading\n\nExercise 1-9: 10 points each\nWorkflow + formatting: 10 points\nTotal: 100 points"
  },
  {
    "objectID": "course-support.html",
    "href": "course-support.html",
    "title": "Course support",
    "section": "",
    "text": "Most of you will need help at some point and we want to make sure you can identify when that is without getting too frustrated and feel comfortable seeking help."
  },
  {
    "objectID": "course-support.html#lectures",
    "href": "course-support.html#lectures",
    "title": "Course support",
    "section": "Lectures",
    "text": "Lectures\nIf you have a question during a lecture, feel free to ask it! There are likely other students with the same question, so by asking you will create a learning opportunity for everyone."
  },
  {
    "objectID": "course-support.html#office-hours",
    "href": "course-support.html#office-hours",
    "title": "Course support",
    "section": "Office hours",
    "text": "Office hours\nThe teaching team is here to help you be successful in the course. You are encouraged to attend office hours during the times posted on the home page to ask questions about the course content and assignments. A lot of questions are most effectively answered in-person, so office hours are a valuable resource. I encourage each and every one of you to take advantage of this resource! Make a pledge to stop by office hours at least once during the first three weeks of class. If you truly have no questions to ask, just stop by and say hi and introduce yourself. You can find a list of everyone’s office hours here."
  },
  {
    "objectID": "course-support.html#slack",
    "href": "course-support.html#slack",
    "title": "Course support",
    "section": "Slack",
    "text": "Slack\nHave a question that can’t wait for office hours? Prefer to write out your question in detail rather than asking in person? The course Slack is the best venue for these! There is a chance another student has already asked a similar question, so please check the other posts on Slack before asking a new question. If you know the answer to a question that is posted, I encourage you to respond!"
  },
  {
    "objectID": "course-support.html#email",
    "href": "course-support.html#email",
    "title": "Course support",
    "section": "Email",
    "text": "Email\nPlease refrain from emailing any course content questions (those should go to Slack), and only use email for questions about personal matters that may not be appropriate for the public course forum (e.g., illness, accommodations, etc.). For such matters, you may email Dr. Mine Çetinkaya-Rundel at mc301@duke.edu.\nIf there is a question that’s not appropriate for the public forum, you are welcome to email me directly. If you email me, please include “STA 101” in the subject line. Barring extenuating circumstances, I will respond to STA 101 emails within 48 hours Monday - Friday. Response time may be slower for emails sent Friday evening - Sunday."
  },
  {
    "objectID": "course-support.html#academic-support",
    "href": "course-support.html#academic-support",
    "title": "Course support",
    "section": "Academic support",
    "text": "Academic support\nThere are times may need help with the class that is beyond what can be provided by the teaching team. In those instances, I encourage you to visit the Academic Resource Center. The Academic Resource Center (ARC) offers free services to all students during their undergraduate careers at Duke. Services include Learning Consultations, Peer Tutoring and Study Groups, ADHD/LD Coaching, Outreach Workshops, and more. Because learning is a process unique to every individual, they work with each student to discover and develop their own academic strategy for success at Duke. Contact the ARC to schedule an appointment. Undergraduates in any year, studying any discipline can benefit! Contact ARC@duke.edu, 919-684-5917."
  },
  {
    "objectID": "course-support.html#mental-health-and-wellness",
    "href": "course-support.html#mental-health-and-wellness",
    "title": "Course support",
    "section": "Mental health and wellness",
    "text": "Mental health and wellness\nStudent mental health and wellness are of primary importance at Duke, and the university offers resources to support students in managing daily stress and self-care. Duke offers several resources for students to seek assistance on coursework and to nurture daily habits that support overall well-being, some of which are listed below.\n\nThe Academic Resource Center: (919) 684-5917, theARC@duke.edu, or arc.duke.edu.\nDuWell: (919) 681-8421, provides Moments of Mindfulness (stress management and resilience building) and meditation programming to assist students in developing a daily emotional well-being practice. To see schedules for programs please see https://studentaffairs.duke.edu/duwell. All are welcome and no experience necessary.\n\nIf your mental health concerns and/or stressful events negatively affect your daily emotional state, academic performance, or ability to participate in your daily activities, many resources are available to help you through difficult times. Duke encourages all students to access these resources.\n\nDukeReach: Provides comprehensive outreach services to identify and support students in managing all aspects of well-being. If you have concerns about a student’s behavior or health visit the website for resources and assistance: http://studentaffairs.duke.edu/dukereach.\nCounseling and Psychological Services (CAPS): CAPS services include individual and group counseling services, psychiatric services, and workshops. To initiate services, walk-in/call-in 9-4 M,W,Th,F and 9-6 Tuesdays. CAPS also provides referral to off-campus resources for specialized care. (919) 660-1000 or https://students.duke.edu/wellness/caps.\nTimelyCare: (formerly known as Blue Devils Care) An online platform that is a convenient, confidential, and free way for Duke students to receive 24/7 mental health support through TalkNow and scheduled counseling: https://bluedevilscare.duke.edu."
  },
  {
    "objectID": "course-support.html#course-costs",
    "href": "course-support.html#course-costs",
    "title": "Course support",
    "section": "Course costs",
    "text": "Course costs\n\nTextbooks: The textbooks for this course are freely available on the web.\nLaptops: Each student is expected to have a laptop they can bring to each lecture.\n\nIf you are having difficulty with costs associated with this course, here are some resources:\n\nContact the financial aid office (whether or not you are on aid). They have loans and resources for connecting students with programs on campus that might be able to help alleviate these costs.\nDukeLIFE offers course materials assistance for eligible students. Please note that students who are eligible for DukeLIFE benefits are notified prior to the start of the semester; program resources are limited.\nDuke Libraries offers textbook rentals through the Top Textbook Program, where you can rent out a textbook for 3 hours at a time.\nFor course-specific technology needs such as Digital Voice Recorder, HD Video Camera, TI-84 Plus CE, DSLR camera kit, Tripod, Shotgun Mic, iPad Mini 4, a Handheld Projector, or a GoPro, you can reserve rental equipment from the Link."
  },
  {
    "objectID": "course-support.html#assistance-with-canvas-and-zoom",
    "href": "course-support.html#assistance-with-canvas-and-zoom",
    "title": "Course support",
    "section": "Assistance with Canvas and Zoom",
    "text": "Assistance with Canvas and Zoom\nFor technical help with Canvas or Zoom, contact the Duke OIT Service Desk at oit.duke.edu/help. You can also access the self-service help documentation for Zoom here and for Canvas here.\nNote that we will be making minimal use of Canvas in this course (primarily for announcements and grade book). All assignment submission will take place on GitHub and conversation on Slack.\nZoom will be used for online office hours as well as as a backup option should we need to hold the course online instead of in person."
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#coming-up",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#coming-up",
    "title": "Visualizing and modeling relationships I",
    "section": "Coming up",
    "text": "Coming up\n\nHW 3 due next Thursday, to be posted later today\nDue dates for the rest of the semester posted\nPlans for next week\nAny questions before we dive into the rest of the semester?"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#todays-goals",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#todays-goals",
    "title": "Visualizing and modeling relationships I",
    "section": "Today’s goals",
    "text": "Today’s goals\n\nWhat is a model?\nWhy do we model?\nWhat is correlation?\nHow can we leverage visualizations to better understand and evaluate models?"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#setup",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#setup",
    "title": "Visualizing and modeling relationships I",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(gt)"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#mpg-dataset",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#mpg-dataset",
    "title": "Visualizing and modeling relationships I",
    "section": "mpg dataset",
    "text": "mpg dataset\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#two-categorical-variables",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#two-categorical-variables",
    "title": "Visualizing and modeling relationships I",
    "section": "Two categorical variables",
    "text": "Two categorical variables\n\nWhat type of plot would you use to visualize the relationship between two categorical variables?\n\n\n\n\nggplot(\n  mpg, \n  aes(x = class, fill = drv)\n  ) +\n  geom_bar(position = \"fill\") +\n  labs(\n    x = \"Class\",\n    y = \"Count\",\n    fill = \"Drive type\",\n    title = \"Drive type vs. class\"\n  )"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#one-categorical-one-numerical-variable",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#one-categorical-one-numerical-variable",
    "title": "Visualizing and modeling relationships I",
    "section": "One categorical, one numerical variable",
    "text": "One categorical, one numerical variable\n\nWhat type of plot would you use to visualize the relationship between one numerical and one categorical variables?\n\n\n\n\nggplot(\n  mpg, \n  aes(x = class, y = cty)\n  ) +\n  geom_boxplot() +\n  labs(\n    x = \"Class\",\n    y = \"City mileage (MPG)\",\n    title = \"City mileage vs. class\"\n  )"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#two-numerical-variables",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#two-numerical-variables",
    "title": "Visualizing and modeling relationships I",
    "section": "Two numerical variables",
    "text": "Two numerical variables\n\nWhat type of plot would you use to visualize the relationship between two numerical variables?\n\n\n\n\nggplot(\n  mpg, \n  aes(x = cty, y = hwy)\n  ) +\n  geom_point() +\n  labs(\n    x = \"City mileage (MPG)\",\n    y = \"Highway mileage (MPG)\",\n    title = \"Highway vs. city mileage\"\n  )"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#lets-look-a-little-closer",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#lets-look-a-little-closer",
    "title": "Visualizing and modeling relationships I",
    "section": "Let’s look a little closer",
    "text": "Let’s look a little closer\n\nRoughly how many points are there in the plot? How many points are there supposed to be? If there is a discrepancy, what explains it?"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#adjust-alpha",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#adjust-alpha",
    "title": "Visualizing and modeling relationships I",
    "section": "Adjust alpha",
    "text": "Adjust alpha\n\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_point(alpha = 0.5)"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#jitter",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#jitter",
    "title": "Visualizing and modeling relationships I",
    "section": "Jitter",
    "text": "Jitter\n\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_jitter()"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#adjust-alpha-jitter",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#adjust-alpha-jitter",
    "title": "Visualizing and modeling relationships I",
    "section": "Adjust alpha + jitter",
    "text": "Adjust alpha + jitter\n\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_jitter(alpha = 0.5)"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#add-more-jitter",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#add-more-jitter",
    "title": "Visualizing and modeling relationships I",
    "section": "Add more jitter",
    "text": "Add more jitter\n\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_jitter(alpha = 0.5, width = 3, height = 3)"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#bin-the-data",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#bin-the-data",
    "title": "Visualizing and modeling relationships I",
    "section": "Bin the data",
    "text": "Bin the data\n\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_hex(bins = 15)"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#contour-2d-density",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#contour-2d-density",
    "title": "Visualizing and modeling relationships I",
    "section": "Contour 2D density",
    "text": "Contour 2D density\n\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_density_2d()"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#filled-contour-2d-density",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#filled-contour-2d-density",
    "title": "Visualizing and modeling relationships I",
    "section": "Filled contour 2D density",
    "text": "Filled contour 2D density\n\nggplot(mpg, aes(x = cty, y = hwy)) +\n  geom_density_2d_filled()"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#modelling-cars",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#modelling-cars",
    "title": "Visualizing and modeling relationships I",
    "section": "Modelling cars",
    "text": "Modelling cars\n\n\nWhat is the relationship between cars’ city and highway mileage?\nWhat is your best guess for a car’s highway MPG that gets 20 MPG in the city?"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#modelling-1",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#modelling-1",
    "title": "Visualizing and modeling relationships I",
    "section": "Modelling",
    "text": "Modelling\n\nUse models to explain the relationship between variables and to make predictions\nFor now we will focus on linear models (but there are many many other types of models too!)"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#modelling-vocabulary",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#modelling-vocabulary",
    "title": "Visualizing and modeling relationships I",
    "section": "Modelling vocabulary",
    "text": "Modelling vocabulary\n\nPredictor (explanatory variable)\nOutcome (response variable)\nRegression line\n\nSlope\nIntercept\n\nCorrelation"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#predictor-explanatory-variable",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#predictor-explanatory-variable",
    "title": "Visualizing and modeling relationships I",
    "section": "Predictor (explanatory variable)",
    "text": "Predictor (explanatory variable)\n\n\n\n\n\n\n\n  \n    \n    \n      cty\n      hwy\n    \n  \n  \n    18\n29\n    21\n29\n    20\n31\n    21\n30\n    16\n26\n    18\n26\n    ...\n..."
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#outcome-response-variable",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#outcome-response-variable",
    "title": "Visualizing and modeling relationships I",
    "section": "Outcome (response variable)",
    "text": "Outcome (response variable)\n\n\n\n\n\n\n\n  \n    \n    \n      cty\n      hwy\n    \n  \n  \n    18\n29\n    21\n29\n    20\n31\n    21\n30\n    16\n26\n    18\n26\n    ...\n..."
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#regression-line",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#regression-line",
    "title": "Visualizing and modeling relationships I",
    "section": "Regression line",
    "text": "Regression line"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#regression-line-slope",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#regression-line-slope",
    "title": "Visualizing and modeling relationships I",
    "section": "Regression line: slope",
    "text": "Regression line: slope"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#regression-line-intercept",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#regression-line-intercept",
    "title": "Visualizing and modeling relationships I",
    "section": "Regression line: intercept",
    "text": "Regression line: intercept"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#correlation",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#correlation",
    "title": "Visualizing and modeling relationships I",
    "section": "Correlation",
    "text": "Correlation"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#correlation-1",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#correlation-1",
    "title": "Visualizing and modeling relationships I",
    "section": "Correlation",
    "text": "Correlation\n\nRanges between -1 and 1.\nSame sign as the slope."
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#guess-the-correlation",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#guess-the-correlation",
    "title": "Visualizing and modeling relationships I",
    "section": "Guess the correlation",
    "text": "Guess the correlation\n\nAre you good at guessing correlation?\nPlay the game!"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#new-computing-access-duke-containers",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#new-computing-access-duke-containers",
    "title": "Visualizing and modeling relationships I",
    "section": "New computing access: Duke containers",
    "text": "New computing access: Duke containers\n\nGo to https://cmgr.oit.duke.edu/containers\nFind STA 101 on the list, and reserve a container\nClick on the STA 101 container under “My reservation”, then click on Login, then Start"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#set-up-your-ssh-key",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#set-up-your-ssh-key",
    "title": "Visualizing and modeling relationships I",
    "section": "Set up your SSH key",
    "text": "Set up your SSH key\nYou will authenticate GitHub using SSH. Below are an outline of the authentication steps.\n\n\n\n\n\n\n\n\n\nYou only need to do this authentication process one time on a single system.\n\n\n\n\nType credentials::ssh_setup_github() into your console.\nR will ask “No SSH key found. Generate one now?” You should click 1 for yes.\nYou will generate a key. It will begin with “ssh-rsa….” R will then ask “Would you like to open a browser now?” You should click 1 for yes.\nYou may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., sta113).\n\nYou can find more detailed instructions here if you’re interested."
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#configure-git",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#configure-git",
    "title": "Visualizing and modeling relationships I",
    "section": "Configure Git",
    "text": "Configure Git\nType the following lines of code in the console in RStudio filling in your name and the email address associated with your GitHub account.\n\nusethis::use_git_config(\n  user.name = \"Your name\", \n  user.email = \"Email associated with your GitHub account\"\n  )\n\nFor example, mine would be\n\nusethis::use_git_config(\n  user.name = \"Mine Çetinkaya-Rundel\", \n  user.email = \"cetinkaya.mine@gmail.com\"\n  )\n\nYou are now ready interact with GitHub via RStudio on the Duke Containers!"
  },
  {
    "objectID": "lectures/10/10-vizualize-model-relationships-I.html#ae-09",
    "href": "lectures/10/10-vizualize-model-relationships-I.html#ae-09",
    "title": "Visualizing and modeling relationships I",
    "section": "ae-09",
    "text": "ae-09\n\n\n\nGo to the course GitHub org and find your ae-09-fish (repo name will be suffixed with your GitHub name).\nClick on the green CODE button, select Use SSH (this might already be selected by default, and if it is, you’ll see the text Clone with SSH). Click on the clipboard icon to copy the repo URL.\nIn RStudio, go to File ➛ New Project ➛Version Control ➛ Git.\nCopy and paste the URL of your assignment repo into the dialog box Repository URL. Again, please make sure to have SSH highlighted under Clone when you copy the address.\nClick Create Project, and the files from your GitHub repo will be displayed in the Files pane in RStudio.\nClick ae-09-fish.qmd to open the template Quarto file. This is where you will write up your code and narrative for the lab.\n\n\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#reflection",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#reflection",
    "title": "Grammar of data wrangling",
    "section": "Reflection",
    "text": "Reflection\n\n What is one thing you learned from your reading or videos that was “new” to you? And what is one question you have from the reading, videos, or material we’ve covered so far, including the previous application exercise?"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#announcements",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#announcements",
    "title": "Grammar of data wrangling",
    "section": "Announcements",
    "text": "Announcements\n\nHW 1 due today at 5 pm\nSubsequent HW deadlines adjusted accordingly for the first part of the semester\nNext week:\n\nTuesday: Project 1 workday\nThursday: Rubenstein Library rare collections visit"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#github-pats-on-posit-cloud",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#github-pats-on-posit-cloud",
    "title": "Grammar of data wrangling",
    "section": "GitHub PATs on Posit Cloud",
    "text": "GitHub PATs on Posit Cloud\n\nIn the Console, run usethis::create_github_token() to create a new PAT or grab the one you created previously from a space you might have safely stored it (e.g., 1Password or similar)\nIn the Console, run gitcreds::gitcreds_set() and paste your PAT when prompted.\nIn the Terminal, run git config credential.helper store to make sure your PAT persists throughout the whole time you’re working on this assignment / Cloud project."
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#packages",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#packages",
    "title": "Grammar of data wrangling",
    "section": "Packages",
    "text": "Packages\n\nlibrary(tidyverse)\nlibrary(scales)"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#data-hotel-bookings",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#data-hotel-bookings",
    "title": "Grammar of data wrangling",
    "section": "Data: Hotel bookings",
    "text": "Data: Hotel bookings\n\nData from two hotels: one resort and one city hotel\nObservations: Each row represents a hotel booking\n\n\nhotels &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n\nRows: 119390 Columns: 32\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (13): hotel, arrival_date_month, meal, country, market_segment, distrib...\ndbl  (18): is_canceled, lead_time, arrival_date_year, arrival_date_week_numb...\ndate  (1): reservation_status_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#variables",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#variables",
    "title": "Grammar of data wrangling",
    "section": "Variables",
    "text": "Variables\n\nnames(hotels)\n\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\""
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#glimpse",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#glimpse",
    "title": "Grammar of data wrangling",
    "section": "glimpse()",
    "text": "glimpse()\n\nglimpse(hotels)\n\nRows: 119,390\nColumns: 32\n$ hotel                          &lt;chr&gt; \"Resort Hotel\", \"Resort Hotel\", \"Resort…\n$ is_canceled                    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, …\n$ lead_time                      &lt;dbl&gt; 342, 737, 7, 13, 14, 14, 0, 9, 85, 75, …\n$ arrival_date_year              &lt;dbl&gt; 2015, 2015, 2015, 2015, 2015, 2015, 201…\n$ arrival_date_month             &lt;chr&gt; \"July\", \"July\", \"July\", \"July\", \"July\",…\n$ arrival_date_week_number       &lt;dbl&gt; 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,…\n$ arrival_date_day_of_month      &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ stays_in_weekend_nights        &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ stays_in_week_nights           &lt;dbl&gt; 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, …\n$ adults                         &lt;dbl&gt; 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ children                       &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ babies                         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ meal                           &lt;chr&gt; \"BB\", \"BB\", \"BB\", \"BB\", \"BB\", \"BB\", \"BB…\n$ country                        &lt;chr&gt; \"PRT\", \"PRT\", \"GBR\", \"GBR\", \"GBR\", \"GBR…\n$ market_segment                 &lt;chr&gt; \"Direct\", \"Direct\", \"Direct\", \"Corporat…\n$ distribution_channel           &lt;chr&gt; \"Direct\", \"Direct\", \"Direct\", \"Corporat…\n$ is_repeated_guest              &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_cancellations         &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_bookings_not_canceled &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ reserved_room_type             &lt;chr&gt; \"C\", \"C\", \"A\", \"A\", \"A\", \"A\", \"C\", \"C\",…\n$ assigned_room_type             &lt;chr&gt; \"C\", \"C\", \"C\", \"A\", \"A\", \"A\", \"C\", \"C\",…\n$ booking_changes                &lt;dbl&gt; 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ deposit_type                   &lt;chr&gt; \"No Deposit\", \"No Deposit\", \"No Deposit…\n$ agent                          &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"304\", \"240\", \"…\n$ company                        &lt;chr&gt; \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\",…\n$ days_in_waiting_list           &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ customer_type                  &lt;chr&gt; \"Transient\", \"Transient\", \"Transient\", …\n$ adr                            &lt;dbl&gt; 0.00, 0.00, 75.00, 75.00, 98.00, 98.00,…\n$ required_car_parking_spaces    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ total_of_special_requests      &lt;dbl&gt; 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 3, …\n$ reservation_status             &lt;chr&gt; \"Check-Out\", \"Check-Out\", \"Check-Out\", …\n$ reservation_status_date        &lt;date&gt; 2015-07-01, 2015-07-01, 2015-07-02, 20…"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#plan",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#plan",
    "title": "Grammar of data wrangling",
    "section": "Plan",
    "text": "Plan\nWe…\nhave a single data frame\nwant to slice it, and dice it, and juice it, and process it, so we can plot it"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#grammar-of-data-wrangling-1",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#grammar-of-data-wrangling-1",
    "title": "Grammar of data wrangling",
    "section": "Grammar of data wrangling",
    "text": "Grammar of data wrangling\n\n\n\nStart with a data frame\nAnd then (|&gt;)\nTransform it with a function\nResult in a data frame\n\n\n\ndf |&gt;\n  function(...)"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#commonly-used-data-wrangling-functions",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#commonly-used-data-wrangling-functions",
    "title": "Grammar of data wrangling",
    "section": "Commonly used data wrangling functions",
    "text": "Commonly used data wrangling functions\n\ndistinct()\nselect(), relocate()\narrange(), arrange(desc())\nslice(), slice_head(), slice_tail(), slice_sample()\nfilter()\nmutate()\nsummarize(), count()"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#distcint",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#distcint",
    "title": "Grammar of data wrangling",
    "section": "distcint()",
    "text": "distcint()\n\n\n\nhotels |&gt; \n  distinct(hotel)\n\n# A tibble: 2 × 1\n  hotel       \n  &lt;chr&gt;       \n1 Resort Hotel\n2 City Hotel  \n\n\n\n\nhotels |&gt; \n  distinct(is_canceled)\n\n# A tibble: 2 × 1\n  is_canceled\n        &lt;dbl&gt;\n1           0\n2           1"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#select-relocate",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#select-relocate",
    "title": "Grammar of data wrangling",
    "section": "select() / relocate()",
    "text": "select() / relocate()\n\n\n\nhotels |&gt; \n  select(hotel)\n\n# A tibble: 119,390 × 1\n   hotel       \n   &lt;chr&gt;       \n 1 Resort Hotel\n 2 Resort Hotel\n 3 Resort Hotel\n 4 Resort Hotel\n 5 Resort Hotel\n 6 Resort Hotel\n 7 Resort Hotel\n 8 Resort Hotel\n 9 Resort Hotel\n10 Resort Hotel\n# ℹ 119,380 more rows\n\n\n\n\nhotels |&gt; \n  relocate(is_canceled)\n\n# A tibble: 119,390 × 32\n   is_canceled hotel        lead_time\n         &lt;dbl&gt; &lt;chr&gt;            &lt;dbl&gt;\n 1           0 Resort Hotel       342\n 2           0 Resort Hotel       737\n 3           0 Resort Hotel         7\n 4           0 Resort Hotel        13\n 5           0 Resort Hotel        14\n 6           0 Resort Hotel        14\n 7           0 Resort Hotel         0\n 8           0 Resort Hotel         9\n 9           1 Resort Hotel        85\n10           1 Resort Hotel        75\n# ℹ 119,380 more rows\n# ℹ 29 more variables:\n#   arrival_date_year &lt;dbl&gt;,\n#   arrival_date_month &lt;chr&gt;,\n#   arrival_date_week_number &lt;dbl&gt;,\n#   arrival_date_day_of_month &lt;dbl&gt;,\n#   stays_in_weekend_nights &lt;dbl&gt;, …"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#arrange-arrangedesc",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#arrange-arrangedesc",
    "title": "Grammar of data wrangling",
    "section": "arrange() / arrange(desc())",
    "text": "arrange() / arrange(desc())\n\n\n\nhotels |&gt; \n  arrange(adr) |&gt;\n  relocate(adr)\n\n# A tibble: 119,390 × 32\n     adr hotel     is_canceled lead_time\n   &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n 1 -6.38 Resort H…           0       195\n 2  0    Resort H…           0       342\n 3  0    Resort H…           0       737\n 4  0    Resort H…           0        32\n 5  0    Resort H…           0       111\n 6  0    Resort H…           0         0\n 7  0    Resort H…           0         8\n 8  0    Resort H…           0         8\n 9  0    Resort H…           1        57\n10  0    Resort H…           0        57\n# ℹ 119,380 more rows\n# ℹ 28 more variables:\n#   arrival_date_year &lt;dbl&gt;,\n#   arrival_date_month &lt;chr&gt;,\n#   arrival_date_week_number &lt;dbl&gt;,\n#   arrival_date_day_of_month &lt;dbl&gt;,\n#   stays_in_weekend_nights &lt;dbl&gt;, …\n\n\n\n\nhotels |&gt; \n  arrange(desc(adr)) |&gt;\n  relocate(adr)\n\n# A tibble: 119,390 × 32\n     adr hotel     is_canceled lead_time\n   &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;\n 1 5400  City Hot…           1        35\n 2  510  City Hot…           0         0\n 3  508  Resort H…           0         1\n 4  452. City Hot…           0        81\n 5  450  Resort H…           1       378\n 6  437  Resort H…           1        59\n 7  426. Resort H…           0        31\n 8  402  Resort H…           0       104\n 9  397. Resort H…           0        26\n10  392  Resort H…           1       116\n# ℹ 119,380 more rows\n# ℹ 28 more variables:\n#   arrival_date_year &lt;dbl&gt;,\n#   arrival_date_month &lt;chr&gt;,\n#   arrival_date_week_number &lt;dbl&gt;,\n#   arrival_date_day_of_month &lt;dbl&gt;,\n#   stays_in_weekend_nights &lt;dbl&gt;, …"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#slice",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#slice",
    "title": "Grammar of data wrangling",
    "section": "slice()",
    "text": "slice()\n\nhotels |&gt;\n  slice(1:4)\n\n# A tibble: 4 × 32\n  hotel        is_canceled lead_time arrival_date_year arrival_date_month\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;             &lt;dbl&gt; &lt;chr&gt;             \n1 Resort Hotel           0       342              2015 July              \n2 Resort Hotel           0       737              2015 July              \n3 Resort Hotel           0         7              2015 July              \n4 Resort Hotel           0        13              2015 July              \n# ℹ 27 more variables: arrival_date_week_number &lt;dbl&gt;,\n#   arrival_date_day_of_month &lt;dbl&gt;, stays_in_weekend_nights &lt;dbl&gt;,\n#   stays_in_week_nights &lt;dbl&gt;, adults &lt;dbl&gt;, children &lt;dbl&gt;, babies &lt;dbl&gt;,\n#   meal &lt;chr&gt;, country &lt;chr&gt;, market_segment &lt;chr&gt;,\n#   distribution_channel &lt;chr&gt;, is_repeated_guest &lt;dbl&gt;,\n#   previous_cancellations &lt;dbl&gt;, previous_bookings_not_canceled &lt;dbl&gt;,\n#   reserved_room_type &lt;chr&gt;, assigned_room_type &lt;chr&gt;, …"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#slice_head-slice_tail",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#slice_head-slice_tail",
    "title": "Grammar of data wrangling",
    "section": "slice_head() / slice_tail()",
    "text": "slice_head() / slice_tail()\n\n\n\nhotels |&gt; \n  slice_head(n = 5)\n\n# A tibble: 5 × 32\n  hotel        is_canceled lead_time\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;\n1 Resort Hotel           0       342\n2 Resort Hotel           0       737\n3 Resort Hotel           0         7\n4 Resort Hotel           0        13\n5 Resort Hotel           0        14\n# ℹ 29 more variables:\n#   arrival_date_year &lt;dbl&gt;,\n#   arrival_date_month &lt;chr&gt;,\n#   arrival_date_week_number &lt;dbl&gt;,\n#   arrival_date_day_of_month &lt;dbl&gt;,\n#   stays_in_weekend_nights &lt;dbl&gt;,\n#   stays_in_week_nights &lt;dbl&gt;, …\n\n\n\n\nhotels |&gt; \n  slice_tail(n = 5)\n\n# A tibble: 5 × 32\n  hotel      is_canceled lead_time\n  &lt;chr&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n1 City Hotel           0        23\n2 City Hotel           0       102\n3 City Hotel           0        34\n4 City Hotel           0       109\n5 City Hotel           0       205\n# ℹ 29 more variables:\n#   arrival_date_year &lt;dbl&gt;,\n#   arrival_date_month &lt;chr&gt;,\n#   arrival_date_week_number &lt;dbl&gt;,\n#   arrival_date_day_of_month &lt;dbl&gt;,\n#   stays_in_weekend_nights &lt;dbl&gt;,\n#   stays_in_week_nights &lt;dbl&gt;, …"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#slice_sample",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#slice_sample",
    "title": "Grammar of data wrangling",
    "section": "slice_sample()",
    "text": "slice_sample()\n\nhotels |&gt; \n  slice_sample(n = 5)\n\n# A tibble: 5 × 32\n  hotel        is_canceled lead_time arrival_date_year arrival_date_month\n  &lt;chr&gt;              &lt;dbl&gt;     &lt;dbl&gt;             &lt;dbl&gt; &lt;chr&gt;             \n1 Resort Hotel           1        84              2017 August            \n2 City Hotel             1       181              2016 May               \n3 City Hotel             0         0              2015 September         \n4 City Hotel             1       433              2016 September         \n5 Resort Hotel           0         0              2016 February          \n# ℹ 27 more variables: arrival_date_week_number &lt;dbl&gt;,\n#   arrival_date_day_of_month &lt;dbl&gt;, stays_in_weekend_nights &lt;dbl&gt;,\n#   stays_in_week_nights &lt;dbl&gt;, adults &lt;dbl&gt;, children &lt;dbl&gt;, babies &lt;dbl&gt;,\n#   meal &lt;chr&gt;, country &lt;chr&gt;, market_segment &lt;chr&gt;,\n#   distribution_channel &lt;chr&gt;, is_repeated_guest &lt;dbl&gt;,\n#   previous_cancellations &lt;dbl&gt;, previous_bookings_not_canceled &lt;dbl&gt;,\n#   reserved_room_type &lt;chr&gt;, assigned_room_type &lt;chr&gt;, …"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#filter",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#filter",
    "title": "Grammar of data wrangling",
    "section": "filter()",
    "text": "filter()\n\n\n\nhotels |&gt;\n  filter(adr &gt; 1000) |&gt;\n  select(adr, hotel)\n\n# A tibble: 1 × 2\n    adr hotel     \n  &lt;dbl&gt; &lt;chr&gt;     \n1  5400 City Hotel\n\n\n\n\nhotels |&gt; \n  filter(babies &gt; 5) |&gt;\n  select(adults, babies)\n\n# A tibble: 2 × 2\n  adults babies\n   &lt;dbl&gt;  &lt;dbl&gt;\n1      2     10\n2      1      9"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#mutate",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#mutate",
    "title": "Grammar of data wrangling",
    "section": "mutate()",
    "text": "mutate()\n\nhotels |&gt;\n  mutate(people = adults + babies + children) |&gt;\n  relocate(people) |&gt;\n  arrange(desc(people))\n\n# A tibble: 119,390 × 33\n   people hotel       is_canceled lead_time arrival_date_year arrival_date_month\n    &lt;dbl&gt; &lt;chr&gt;             &lt;dbl&gt;     &lt;dbl&gt;             &lt;dbl&gt; &lt;chr&gt;             \n 1     55 Resort Hot…           1       338              2015 October           \n 2     50 Resort Hot…           1       336              2015 September         \n 3     40 Resort Hot…           1       304              2015 September         \n 4     27 Resort Hot…           1       349              2015 September         \n 5     27 Resort Hot…           1       352              2015 September         \n 6     26 Resort Hot…           1       333              2015 September         \n 7     26 Resort Hot…           1       340              2015 September         \n 8     26 Resort Hot…           1       347              2015 September         \n 9     26 Resort Hot…           1       354              2015 September         \n10     26 Resort Hot…           1       361              2015 October           \n# ℹ 119,380 more rows\n# ℹ 27 more variables: arrival_date_week_number &lt;dbl&gt;,\n#   arrival_date_day_of_month &lt;dbl&gt;, stays_in_weekend_nights &lt;dbl&gt;,\n#   stays_in_week_nights &lt;dbl&gt;, adults &lt;dbl&gt;, children &lt;dbl&gt;, babies &lt;dbl&gt;,\n#   meal &lt;chr&gt;, country &lt;chr&gt;, market_segment &lt;chr&gt;,\n#   distribution_channel &lt;chr&gt;, is_repeated_guest &lt;dbl&gt;,\n#   previous_cancellations &lt;dbl&gt;, previous_bookings_not_canceled &lt;dbl&gt;, …"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#summarize",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#summarize",
    "title": "Grammar of data wrangling",
    "section": "summarize()",
    "text": "summarize()\n\n\n\nhotels |&gt;\n  summarize(mean_adr = mean(adr))\n\n# A tibble: 1 × 1\n  mean_adr\n     &lt;dbl&gt;\n1     102.\n\n\n\n\nhotels |&gt;\n  group_by(hotel) |&gt;\n  summarize(mean_adr = mean(adr))\n\n# A tibble: 2 × 2\n  hotel        mean_adr\n  &lt;chr&gt;           &lt;dbl&gt;\n1 City Hotel      105. \n2 Resort Hotel     95.0"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#count",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#count",
    "title": "Grammar of data wrangling",
    "section": "count()",
    "text": "count()\n\nhotels |&gt;\n  count(hotel)\n\n# A tibble: 2 × 2\n  hotel            n\n  &lt;chr&gt;        &lt;int&gt;\n1 City Hotel   79330\n2 Resort Hotel 40060"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#average-cost-of-daily-stay",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#average-cost-of-daily-stay",
    "title": "Grammar of data wrangling",
    "section": "Average cost of daily stay",
    "text": "Average cost of daily stay\n\nWhat are the variables represented in this visualization?"
  },
  {
    "objectID": "lectures/05/05-grammar-of-data-wrangling.html#ae-05",
    "href": "lectures/05/05-grammar-of-data-wrangling.html#ae-05",
    "title": "Grammar of data wrangling",
    "section": "ae-05",
    "text": "ae-05\n\n\n\nGo to the course GitHub org and find your ae-05-hotels (repo name will be suffixed with your GitHub name).\nClone the repo in Posit Cloud, and set up your PAT:\n\nIn the Console, run usethis::create_github_token() to create a new PAT or grab the one you created previously from a space you might have safely stored it (e.g., 1Password or similar)\nIn the Console, run gitcreds::gitcreds_set() and paste your PAT when prompted.\nIn the Terminal, run git config credential.helper store to make sure your PAT persists throughout the whole time you’re working on this assignment / Cloud project.\n\nOpen the Quarto document (.qmd) and follow along and complete the exercises.\nRender, commit, and push your edits as you work through it\n\n\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#reflection",
    "href": "lectures/02/02-meet-toolkit.html#reflection",
    "title": "Meet the toolkit",
    "section": "Reflection",
    "text": "Reflection\n\nWhat is one thing you learned from your reading that was “new” to you? And what is one question you have from the reading?"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#announcements",
    "href": "lectures/02/02-meet-toolkit.html#announcements",
    "title": "Meet the toolkit",
    "section": "Announcements",
    "text": "Announcements\n\nMy office hours: Thursdays 10-11am on Zoom (link to be posted!)\nCourse webpage updated with tentative schedule for due dates"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#application-exercise-un-votes",
    "href": "lectures/02/02-meet-toolkit.html#application-exercise-un-votes",
    "title": "Meet the toolkit",
    "section": "Application exercise: UN Votes",
    "text": "Application exercise: UN Votes\n\nGo to Posit Cloud and start the project called ae-01-un-votes. Render the document titled unvotes.qmd. Review the narrative and the data visualization you just created. Then, change “Turkey” to another country of your choice. Re-render the document. Show the plot you created to your neighbor and discuss (1) why you chose that country and (2) how this new visualization is different than the original (and what that says about country politics, if anything)."
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#learning-goals",
    "href": "lectures/02/02-meet-toolkit.html#learning-goals",
    "title": "Meet the toolkit",
    "section": "Learning goals",
    "text": "Learning goals\nBy the end of the course, you will be able to…\n\n\ngain insight from data\ngain insight from data, reproducibly\ngain insight from data, reproducibly, using modern programming tools and techniques\ngain insight from data, reproducibly and collaboratively, using modern programming tools and techniques\ngain insight from data, reproducibly (with literate programming and version control) and collaboratively, using modern programming tools and techniques"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#reproducibility-checklist",
    "href": "lectures/02/02-meet-toolkit.html#reproducibility-checklist",
    "title": "Meet the toolkit",
    "section": "Reproducibility checklist",
    "text": "Reproducibility checklist\n\nWhat does it mean for a data analysis to be “reproducible”?\n\n\nNear-term goals:\n\nAre the tables and figures reproducible from the code and data?\nDoes the code actually do what you think it does?\nIn addition to what was done, is it clear why it was done?\n\n\n\nLong-term goals:\n\nCan the code be used for other data?\nCan you extend the code to do other things?"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#toolkit-for-reproducibility",
    "href": "lectures/02/02-meet-toolkit.html#toolkit-for-reproducibility",
    "title": "Meet the toolkit",
    "section": "Toolkit for reproducibility",
    "text": "Toolkit for reproducibility\n\nScriptability \\(\\rightarrow\\) R\nLiterate programming (code, narrative, output in one place) \\(\\rightarrow\\) Quarto\nVersion control \\(\\rightarrow\\) Git / GitHub"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#r-and-rstudio-1",
    "href": "lectures/02/02-meet-toolkit.html#r-and-rstudio-1",
    "title": "Meet the toolkit",
    "section": "R and RStudio",
    "text": "R and RStudio\n\n\n\n\n\n\n\n\nR is an open-source statistical programming language\nR is also an environment for statistical computing and graphics\nIt’s easily extensible with packages\n\n\n\n\nRStudio is a convenient interface for R called an IDE (integrated development environment), e.g. “I write R code in the RStudio IDE”\nRStudio is not a requirement for programming with R, but it’s very commonly used by R programmers and data scientists"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#r-vs.-rstudio",
    "href": "lectures/02/02-meet-toolkit.html#r-vs.-rstudio",
    "title": "Meet the toolkit",
    "section": "R vs. RStudio",
    "text": "R vs. RStudio\n\n\n\n\n\n\n\nSource: Modern Dive."
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#r-packages",
    "href": "lectures/02/02-meet-toolkit.html#r-packages",
    "title": "Meet the toolkit",
    "section": "R packages",
    "text": "R packages\n\n\nPackages: Fundamental units of reproducible R code, including reusable R functions, the documentation that describes how to use them, and sample data1\nAs of September 2022, there are over 18,000 R packages available on CRAN (the Comprehensive R Archive Network)2\nWe’re going to work with a small (but important) subset of these!\n\n\n\n\n1 Wickham and Bryan, R Packages.\n2 CRAN contributed packages."
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#tour-r-and-rstudio",
    "href": "lectures/02/02-meet-toolkit.html#tour-r-and-rstudio",
    "title": "Meet the toolkit",
    "section": "Tour: R and RStudio",
    "text": "Tour: R and RStudio"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#a-short-list-for-now-of-r-essentials",
    "href": "lectures/02/02-meet-toolkit.html#a-short-list-for-now-of-r-essentials",
    "title": "Meet the toolkit",
    "section": "A short list (for now) of R essentials",
    "text": "A short list (for now) of R essentials\n\nFunctions are (most often) verbs, followed by what they will be applied to in parentheses:\n\n\ndo_this(to_this)\ndo_that(to_this, to_that, with_those)\n\n\n\nPackages are installed with the install.packages() function and loaded with the library function, once per session:\n\n\ninstall.packages(\"package_name\")\nlibrary(package_name)"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#r-essentials-continued",
    "href": "lectures/02/02-meet-toolkit.html#r-essentials-continued",
    "title": "Meet the toolkit",
    "section": "R essentials (continued)",
    "text": "R essentials (continued)\n\nColumns (variables) in data frames are accessed with $:\n\n\ndataframe$var_name\n\n\n\nObject documentation can be accessed with ?\n\n\n?mean"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#tidyverse",
    "href": "lectures/02/02-meet-toolkit.html#tidyverse",
    "title": "Meet the toolkit",
    "section": "tidyverse",
    "text": "tidyverse\n\n\n\n\n\n\n\n\ntidyverse.org\n\nThe tidyverse is an opinionated collection of R packages designed for data science\nAll packages share an underlying philosophy and a common grammar"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#quarto-1",
    "href": "lectures/02/02-meet-toolkit.html#quarto-1",
    "title": "Meet the toolkit",
    "section": "Quarto",
    "text": "Quarto\n\n\nFully reproducible reports – each time you render the analysis is ran from the beginning\nCode goes in chunks narrative goes outside of chunks\nA visual editor for a familiar / Google docs-like editing experience"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#tour-quarto",
    "href": "lectures/02/02-meet-toolkit.html#tour-quarto",
    "title": "Meet the toolkit",
    "section": "Tour: Quarto",
    "text": "Tour: Quarto"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#how-will-we-use-quarto",
    "href": "lectures/02/02-meet-toolkit.html#how-will-we-use-quarto",
    "title": "Meet the toolkit",
    "section": "How will we use Quarto?",
    "text": "How will we use Quarto?\n\nEvery assignment / report / project / etc. is an Quarto document\nYou’ll always have a template Quarto document to start with\nThe amount of scaffolding in the template will decrease over the semester"
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#application-exercise-flint",
    "href": "lectures/02/02-meet-toolkit.html#application-exercise-flint",
    "title": "Meet the toolkit",
    "section": "Application exercise: Flint",
    "text": "Application exercise: Flint\n\nGo to Posit Cloud and start the project called ae-02-flint. Open the document titled flint.qmd."
  },
  {
    "objectID": "lectures/02/02-meet-toolkit.html#next-time",
    "href": "lectures/02/02-meet-toolkit.html#next-time",
    "title": "Meet the toolkit",
    "section": "Next time",
    "text": "Next time\n\nWe’ll continue out “Meet the toolkit” journey, focusing on version control tools, Git and GitHub, the last piece of the puzzle\nWe’ll then move on to the nuts and bolts of data visualization in R with ggplot2\n\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#peer-review",
    "href": "lectures/09/09-prp-tell-story.html#peer-review",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Peer review",
    "text": "Peer review\n\n\n\nReviewer\nReviewee\n\n\n\n\nCoding Clowns\nJust Make Some Noise\n\n\nJust Make Some Noise\nStats Slayers\n\n\nStats Slayers\nCoding Clowns\n\n\n\n\nGo to the team’s repo and view their website\nClone the team’s repo and render project – note any challenges with reproducing\nFill out the questions in the peer review template issue\nDetailed instructions at https://sta113-f23.github.io/project/project-1.html#reviewer-tasks\n\n\n\n\n−+\n25:00"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#multiple-ways-of-telling-a-story",
    "href": "lectures/09/09-prp-tell-story.html#multiple-ways-of-telling-a-story",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Multiple ways of telling a story",
    "text": "Multiple ways of telling a story\n\nSequential plots: Motivation, then resolution\nA single plot: Resolution, and hidden in it motivation\n\n\n\n\n\n\n\nProject note: you’re asked to create two plots for your question. One possible approach: Start with a plot showing the raw data, and show derived quantities (e.g. percent increases, averages, coefficients of fitted models) in the subsequent plot."
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#simplicity-vs.-complexity",
    "href": "lectures/09/09-prp-tell-story.html#simplicity-vs.-complexity",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Simplicity vs. complexity",
    "text": "Simplicity vs. complexity\n\nWhen you’re trying to show too much data at once you may end up not showing anything.\n\n\nNever assume your audience can rapidly process complex visual displays\nDon’t add variables to your plot that are tangential to your story\nDon’t jump straight to a highly complex figure; first show an easily digestible subset (e.g., show one facet first)\nAim for memorable, but clear\n\n\n\n\n\n\n\nProject note: Make sure to leave time to iterate on your plots after you practice your presentation. If certain plots are getting too wordy to explain, take time to simplify them!"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#consistency-vs.-repetitiveness",
    "href": "lectures/09/09-prp-tell-story.html#consistency-vs.-repetitiveness",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Consistency vs. repetitiveness",
    "text": "Consistency vs. repetitiveness\n\nBe consistent but don’t be repetitive.\n\n\nUse consistent features throughout plots (e.g., same color represents same level on all plots)\nAim to use a different type of visualization for each distinct analysis\n\n\n\n\n\n\n\nProject note: If possible, ask a friend who is not in the class to listen to your presentation and then ask them what they remember. Then, ask yourself: is that what you wanted them to remember?"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#packages-and-data",
    "href": "lectures/09/09-prp-tell-story.html#packages-and-data",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Packages and data",
    "text": "Packages and data\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggrepel)\nlibrary(ggthemes)\n\n\n\nd &lt;- tribble(\n  ~category,                     ~value,\n  \"Cutting tools\"                , 0.03,\n  \"Buildings and administration\" , 0.22,\n  \"Labor\"                        , 0.31,\n  \"Machinery\"                    , 0.27,\n  \"Workplace materials\"          , 0.17\n)\nd\n\n\n# A tibble: 5 × 2\n  category                     value\n  &lt;chr&gt;                        &lt;dbl&gt;\n1 Cutting tools                 0.03\n2 Buildings and administration  0.22\n3 Labor                         0.31\n4 Machinery                     0.27\n5 Workplace materials           0.17"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#keep-it-simple",
    "href": "lectures/09/09-prp-tell-story.html#keep-it-simple",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Keep it simple",
    "text": "Keep it simple"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#judging-relative-area",
    "href": "lectures/09/09-prp-tell-story.html#judging-relative-area",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Judging relative area",
    "text": "Judging relative area\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Data to Viz caveat collection - The issue with pie chart"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#use-color-to-draw-attention",
    "href": "lectures/09/09-prp-tell-story.html#use-color-to-draw-attention",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Use color to draw attention",
    "text": "Use color to draw attention"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#play-with-themes-for-a-non-standard-look",
    "href": "lectures/09/09-prp-tell-story.html#play-with-themes-for-a-non-standard-look",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Play with themes for a non-standard look",
    "text": "Play with themes for a non-standard look"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#go-beyond-ggplot2-themes-ggthemes",
    "href": "lectures/09/09-prp-tell-story.html#go-beyond-ggplot2-themes-ggthemes",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Go beyond ggplot2 themes – ggthemes",
    "text": "Go beyond ggplot2 themes – ggthemes"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#tell-a-story",
    "href": "lectures/09/09-prp-tell-story.html#tell-a-story",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Tell a story",
    "text": "Tell a story\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCredit: Angela Zoss and Eric Monson, Duke DVS"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#leave-out-non-story-details",
    "href": "lectures/09/09-prp-tell-story.html#leave-out-non-story-details",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Leave out non-story details",
    "text": "Leave out non-story details\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCredit: Angela Zoss and Eric Monson, Duke DVS"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#order-matters",
    "href": "lectures/09/09-prp-tell-story.html#order-matters",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Order matters",
    "text": "Order matters\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCredit: Angela Zoss and Eric Monson, Duke DVS"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#clearly-indicate-missing-data",
    "href": "lectures/09/09-prp-tell-story.html#clearly-indicate-missing-data",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Clearly indicate missing data",
    "text": "Clearly indicate missing data\n\n\n\n\n\n\n\nhttp://ivi.sagepub.com/content/10/4/271, Angela Zoss and Eric Monson, Duke DVS"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#reduce-cognitive-load",
    "href": "lectures/09/09-prp-tell-story.html#reduce-cognitive-load",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Reduce cognitive load",
    "text": "Reduce cognitive load\n\n\n\n\n\n\n\nhttp://www.storytellingwithdata.com/2012/09/some-finer-points-of-data-visualization.html"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#use-descriptive-titles",
    "href": "lectures/09/09-prp-tell-story.html#use-descriptive-titles",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Use descriptive titles",
    "text": "Use descriptive titles\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCredit: Angela Zoss and Eric Monson, Duke DVS"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#annotate-figures",
    "href": "lectures/09/09-prp-tell-story.html#annotate-figures",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Annotate figures",
    "text": "Annotate figures\n\n\n\n\n\n\n\nhttps://bl.ocks.org/susielu/23dc3082669ee026c552b85081d90976"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#sample-plots",
    "href": "lectures/09/09-prp-tell-story.html#sample-plots",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Sample plots",
    "text": "Sample plots\n\np_hist &lt;- ggplot(mtcars, aes(x = mpg)) +\n  geom_histogram(binwidth = 2)\n\np_text &lt;- mtcars |&gt;\n  rownames_to_column() |&gt;\n  ggplot(aes(x = disp, y = mpg)) +\n  geom_text_repel(aes(label = rowname)) +\n  coord_cartesian(clip = \"off\")"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#small-fig-width",
    "href": "lectures/09/09-prp-tell-story.html#small-fig-width",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Small fig-width",
    "text": "Small fig-width\nFor a zoomed-in look\n\n```{r}\n#| fig-width: 3\n#| fig-asp: 0.618\n\np_hist\n```"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#large-fig-width",
    "href": "lectures/09/09-prp-tell-story.html#large-fig-width",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Large fig-width",
    "text": "Large fig-width\nFor a zoomed-out look\n\n```{r}\n#| fig-width: 10\n#| fig-asp: 0.618\n\np_hist\n```"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#fig-width-affects-text-size",
    "href": "lectures/09/09-prp-tell-story.html#fig-width-affects-text-size",
    "title": "Presentation readyplots I:Telling a story",
    "section": "fig-width affects text size",
    "text": "fig-width affects text size"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#multiple-plots-on-a-slide",
    "href": "lectures/09/09-prp-tell-story.html#multiple-plots-on-a-slide",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Multiple plots on a slide",
    "text": "Multiple plots on a slide\n\n\n\n\n\n\nFirst, ask yourself, must you include multiple plots on a slide? For example, is your narrative about comparing results from two plots?\n\n\n\n\nIf no, then don’t! Move the second plot to to the next slide!\nIf yes, use columns and sequential reveal."
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#demo",
    "href": "lectures/09/09-prp-tell-story.html#demo",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Demo",
    "text": "Demo\n\nRendering individual documents\nWrite-up:\n\nCross referencing\nCitations\n\nWebsite:\n\nRendering site\nMaking sure your website reflects your latest changes\nCustomizing the look of your website (optional)"
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#take-home-exam-common-issues",
    "href": "lectures/09/09-prp-tell-story.html#take-home-exam-common-issues",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Take home exam common issues",
    "text": "Take home exam common issues\n\n\nDo not use absolute paths to load data, use relative paths, e.g. \"data/tv.csv\" not \"/cloud/project/data/tv.csv\".\nThe tidyverse packages already loads nine packages with it: ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, forcats, lubridate. No need to load these with library() after the tidyverse is loaded.\nSimilarly, no need for readr::read_csv() after tidyverse is loaded, you can just do read_csv().\nPay attention to code style and indentation.\nDo not load data and packages for each question, once per document is sufficient.\nDo not Repeat Yourself - DRY: If using the same data in further analysis (subsequent questions), prep the data (filter) once and save it and use that in subsequent analysis.\nIf using count() to create a frequency table, the resulting n column is numeric, no need to convert it to numeric again."
  },
  {
    "objectID": "lectures/09/09-prp-tell-story.html#take-home-exam-redo-optional",
    "href": "lectures/09/09-prp-tell-story.html#take-home-exam-redo-optional",
    "title": "Presentation readyplots I:Telling a story",
    "section": "Take home exam redo (optional)",
    "text": "Take home exam redo (optional)\n\nDue: Friday, Oct 13 at 1 pm\nMust request opening your exam repo back up for resubmission by end of class on Thursday by messaging me on Slack\nWork in exam-1-redo.qmd, this is a copy of your exam submission, without any changes I might have implemented to get it to render – do not overwrite exam-1.qmd.\nImprove your answers working on your own. The same rules as the exam applies.\nYou will be eligible to receive up to 50% of the points you missed on the take home portion of the exam.\nThere is no in-class exam redo.\n\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "lectures/07/07-tidying-data.html#reflection",
    "href": "lectures/07/07-tidying-data.html#reflection",
    "title": "Tidying data",
    "section": "Reflection",
    "text": "Reflection\n\n What is one thing you learned from your reading or videos that was “new” to you? And what is one question you have from the reading, videos, or material we’ve covered so far, including the previous application exercise?"
  },
  {
    "objectID": "lectures/07/07-tidying-data.html#announcements",
    "href": "lectures/07/07-tidying-data.html#announcements",
    "title": "Tidying data",
    "section": "Announcements",
    "text": "Announcements\n\nProject 1 proposal due today at 5 pm\nNext week:\n\nTuesday: Exam 1 - in class\nThursday: Exam 1 - take home due\nInfo on exams at https://sta113-f23.github.io/course-syllabus.html#exams"
  },
  {
    "objectID": "lectures/07/07-tidying-data.html#tidy-data",
    "href": "lectures/07/07-tidying-data.html#tidy-data",
    "title": "Tidying data",
    "section": "Tidy data",
    "text": "Tidy data\n\nWhat makes a dataset “tidy”?"
  },
  {
    "objectID": "lectures/07/07-tidying-data.html#pivoting-data",
    "href": "lectures/07/07-tidying-data.html#pivoting-data",
    "title": "Tidying data",
    "section": "Pivoting data",
    "text": "Pivoting data\n\nData sets can’t be labeled as wide or long but they can be made wider or longer for a certain analysis that requires a certain format\nOften, to visualize data, we pivot longer to collect information that is spread across column headings in a single column.\nAnd often, to display data in a table, we pivot wider to spread levels of a categorical variable across columns."
  },
  {
    "objectID": "lectures/07/07-tidying-data.html#ae-07",
    "href": "lectures/07/07-tidying-data.html#ae-07",
    "title": "Tidying data",
    "section": "ae-07",
    "text": "ae-07\n\n\n\nGo to the course GitHub org and find your ae-07-majors (repo name will be suffixed with your GitHub name).\nClone the repo in Posit Cloud, and set up your PAT:\n\nIn the Console, run usethis::create_github_token() to create a new PAT or grab the one you created previously from a space you might have safely stored it (e.g., 1Password or similar)\nIn the Console, run gitcreds::gitcreds_set() and paste your PAT when prompted.\nIn the Terminal, run git config credential.helper store to make sure your PAT persists throughout the whole time you’re working on this assignment / Cloud project.\n\nOpen the Quarto document (.qmd) and follow along and complete the exercises.\nRender, commit, and push your edits as you work through it\n\n\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "course-overview.html",
    "href": "course-overview.html",
    "title": "Course overview",
    "section": "",
    "text": "This is the homepage for STA 113FS - Visualizing Data taught by Dr. Mine Çetinkaya-Rundel in Fall 2023 at Duke University. All course materials will be posted on this site.\nYou can find the course syllabus here and the course schedule here."
  },
  {
    "objectID": "course-overview.html#class-meetings",
    "href": "course-overview.html#class-meetings",
    "title": "Course overview",
    "section": "Class meetings",
    "text": "Class meetings\n\n\n\nMeeting\nLocation\nTime\n\n\n\n\nLectures\nPerkins LINK 070 (Seminar 4)\nTue & Thu 1:25 - 2:40 pm"
  },
  {
    "objectID": "course-overview.html#license",
    "href": "course-overview.html#license",
    "title": "Course overview",
    "section": "License",
    "text": "License\n\nThis online work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International. Visit here for more information about the license."
  },
  {
    "objectID": "computing/computing-access.html",
    "href": "computing/computing-access.html",
    "title": "Computing access",
    "section": "",
    "text": "To access computing resources for the introductory data science courses offered by the Duke University Department of Statistical Science, go to the Duke Container Manager website, cmgr.oit.duke.edu/containers.\nIf this is your first time accessing the containers, click on reserve STA198-199 on the Reservations available menu on the right. You only need to do this once, and when you do, you'll see this container moved to the My reservations menu on the left.\nNext, click on STA101 under My reservations to access the RStudio instance you'll use for the course.\n\n\n\n\n\n\nNote\n\n\n\nNote: Before fall break we used Posit Cloud. You can still access your previous work there."
  },
  {
    "objectID": "course-links.html",
    "href": "course-links.html",
    "title": "Useful links",
    "section": "",
    "text": "Posit Cloud\n🔗 Posit Cloud\n\n\nLecture recordings\n🔗 Panopto\n\n\nSlack\n🔗 Slack\n\n\nGradebook\n🔗 on Canvas\n\n\nAnnouncements\n🔗 on Canvas\n\n\nTextbooks\n🔗 R for Data Science, 2nd Edition\n🔗 Data Visualization: A Practical Introduction\n🔗 Introduction to Modern Statistics, 2nd Edition\n\n\nPackage documentation\n🔗 tidyverse: tidyverse.org\n🔗 tidymodels: tidymodels.org"
  },
  {
    "objectID": "ae/ae-09-fish-sa.html",
    "href": "ae/ae-09-fish-sa.html",
    "title": "Modelling fish weights",
    "section": "",
    "text": "For this application exercise, we will work with data on fish. The dataset we will use, called fish, is on two common fish species in fish market sales. We’re going to investigate the relationship between the weights and heights of fish, and later take into consider species as well.\n\nlibrary(tidyverse)\nlibrary(tidymodels)\n\nfish &lt;- read_csv(\"data/fish.csv\")\n\nThe data dictionary is below:\n\n\n\nvariable\ndescription\n\n\n\n\nspecies\nSpecies name of fish\n\n\nweight\nWeight, in grams\n\n\nlength_vertical\nVertical length, in cm\n\n\nlength_diagonal\nDiagonal length, in cm\n\n\nlength_cross\nCross length, in cm\n\n\nheight\nHeight, in cm\n\n\nwidth\nDiagonal width, in cm\n\n\n\n\nVisualizing the relationship\nWe’re going to investigate the relationship between the weights and heights of fish.\n\nDemo: Create an appropriate plot to investigate this relationship. Add appropriate labels to the plot.\n\n\nggplot(fish, aes(x = height, y = weight)) +\n  geom_point() +\n  labs(\n    title = \"Weights vs. heights of fish\",\n    x = \"Height (cm)\",\n    y = \"Weight (gr)\"\n  )\n\n\n\n\n\n\nCorrelation\n\nWhat is correlation? What are values correlation can take?\n\nStrength and direction of a linear relationship. It’s bounded by -1 and 1.\n\nDemo: What is the correlation between heights and weights of fish?\n\n\nfish |&gt;\n  summarize(r = cor(height, weight))\n\n# A tibble: 1 × 1\n      r\n  &lt;dbl&gt;\n1 0.954\n\n\n\n\nVisualizing the model\n\nYour turn: Overlay the line of best fit on your scatterplot.\n\n\nggplot(fish, aes(x = height, y = weight)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Weights vs. lengths of fish\",\n    x = \"Head-to-tail lentgh (cm)\",\n    y = \"Weight of fish (grams)\"\n  )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nWhat types of questions can this plot help answer?\n\nWhat is the relationship between fish heights and weights of fish?\n\n\nModel fitting\n\nDemo: Fit a linear model to predict fish weights from their heights.\n\n\nfish_hw_fit &lt;- linear_reg() |&gt;\n  fit(weight ~ height, data = fish)\n\nfish_hw_fit\n\nparsnip model object\n\n\nCall:\nstats::lm(formula = weight ~ height, data = data)\n\nCoefficients:\n(Intercept)       height  \n    -288.42        60.92  \n\n\n\n\nModel summary\n\nDemo: Display the model summary including estimates for the slope and intercept along with measurements of uncertainty around them. Show how you can extract the values of slope and intercept from the model output.\n\n\nfish_hw_tidy &lt;- tidy(fish_hw_fit)\nfish_hw_tidy\n\n# A tibble: 2 × 5\n  term        estimate std.error statistic  p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)   -288.      34.0      -8.49 1.83e-11\n2 height          60.9      2.64     23.1  2.40e-29\n\n# intercept\nfish_hw_tidy |&gt;\n  filter(term == \"(Intercept)\") |&gt;\n  pull(estimate)\n\n[1] -288.4152\n\n# slope\nfish_hw_tidy |&gt;\n  filter(term == \"height\") |&gt;\n  pull(estimate)\n\n[1] 60.91587\n\n\n\nDemo: Write out your model using mathematical notation.\n\n\\(\\widehat{weight} = 1.96 + 0.233 \\times height\\)\n\nDemo: Interpret the slope and the intercept.\n\nIntercept: The model predicts that fish who are 0 cm in height weigh roughly -288 grams. This doesn’t make sense in context of the data.\nSlope: For each centimeter the fish are taller, we expect the weights of fish to be height, on average, by 61 grams.\n\n\nPrediction\n\nWe can use this line to make predictions. Predict what you think the weight of a fish would be with a height of 10 cm, 15 cm, and 20 cm. Which prediction is considered extrapolation?\n\nAt 10 cm, we estimate a weight of 375 grams. At 15 cm, we estimate a weight of 600 grams At 20 cm, we estimate a weight of 975 grams. 20 cm would be considered extrapolation.\n\nYour turn: Predict what the weight of a fish would be with a height of 10 cm, 15 cm, and 20 cm using the model equation.\n\n\nx &lt;- c(10, 15, 20)\n-288 + 60.92 * x\n\n[1] 321.2 625.8 930.4\n\n\n\nDemo: Predict what the weight of a fish would be with a height of 10 cm, 15 cm, and 20 cm using the predict() function.\n\n\nnew_fish &lt;- tibble(\n  height = c(10, 15, 20)\n)\n\npredict(fish_hw_fit, new_fish)\n\n# A tibble: 3 × 1\n  .pred\n  &lt;dbl&gt;\n1  321.\n2  625.\n3  930.\n\n\n\n\nResiduals\n\nWhat is a residual?\n\nDifference between predicted and observed.\n\nDemo: Calculate predicted weights for all fish in the data and visualize the residuals under this model.\n\n\nfish_hw_aug &lt;- augment(fish_hw_fit, new_data = fish)\n\nggplot(fish_hw_aug, aes(x = height, y = weight)) + \n  geom_point() + \n  geom_smooth(method = \"lm\", se = FALSE, color = \"lightgrey\") +  \n  geom_segment(aes(xend = height, yend = .pred), color = \"gray\") +  \n  geom_point(aes(y = .pred), shape = \"circle open\") + \n  theme_minimal() +\n  labs(\n    title = \"Weights vs. heights of fish\",\n    subtitle = \"Residuals\",\n    x = \"Height (cm)\",\n    y = \"Weight (gr)\"\n  )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nDemo: If the model was a perfect fit, what would the value of the residuals be? Make a histogram of the residuals. Does it appear that the model is a good fit?\n\nThe residuals don’t seem to be centered at 0, but it’s hard to tell.\n\nggplot(fish_hw_aug, aes(x = .resid)) + \n  geom_histogram(binwidth = 20)\n\n\n\n\n\nDemo: Suppose you make a scatterplot of residuals vs. the predicted values. If the model is a good fit, what, if any, patterns would you expect to see in this plot? Now, make the plot. Does the model appear to be a good fit?\n\nThe residuals should be randomly scattered around 0. There should be no patterns. However we do see some patterns here, there seems to be two groups of data, suggesting that the model is not a good fit.\n\nggplot(fish_hw_aug, aes(x = .pred, y = .resid)) + \n  geom_point() + \n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray\") +\n  labs(\n    title = \"Residuals vs. predicted values\",\n    subtitle = \"Residuals\",\n    x = \"Predicted weight (gr)\"\n  )\n\n\n\n\n\nDemo: Make the same plot, but this time using a 2D density as the geom. What does this plot tell you about the data?\n\nThe contour plot makes it even more obvious that there are two groups of data.\n\nggplot(fish_hw_aug, aes(x = .pred, y = .resid)) + \n  geom_density_2d_filled() + \n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray\") +\n  labs(\n    title = \"Residuals vs. predicted values\",\n    subtitle = \"Residuals\",\n    x = \"Predicted weight (gr)\"\n  )\n\n\n\n\n\n\nAdding a second predictor\n\nDemo: Does the apparent relationship between heights and weights of fish change if we take into consideration species? Plot two separate straight lines for the Bream and Roach species.\n\n\nggplot(\n  fish, \n  aes(x = height, y = weight, color = species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Weights vs. heights of fish\",\n    x = \"Height (cm)\",\n    y = \"Weight (gr)\"\n  )\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nDemo: Fit the model with height and species as predictors and then plot the residuals vs. predicted values as well as a histogram of residuals for this model. Comment on the fit of the model compared to the previous one.\n\nThere isn’t grouping left in the residuals.\n\nfish_hws_fit &lt;- linear_reg() |&gt;\n  fit(weight ~ height + species, data = fish)\n\nfish_hws_aug &lt;- augment(fish_hws_fit, new_data = fish)\n\nggplot(fish_hws_aug, aes(x = .resid)) + \n  geom_histogram(binwidth = 20)\n\n\n\nggplot(fish_hws_aug, aes(x = .pred, y = .resid)) + \n  geom_point() + \n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray\") +\n  labs(\n    title = \"Residuals vs. predicted values\",\n    subtitle = \"Weight ~ height + species model\",\n    y = \"Residuals\",\n    x = \"Predicted weight (gr)\"\n  )\n\n\n\nggplot(fish_hws_aug, aes(x = .pred, y = .resid)) + \n  geom_density_2d_filled() + \n  geom_hline(yintercept = 0, linetype = \"dashed\", color = \"gray\") +\n  labs(\n    title = \"Residuals vs. predicted values\",\n    subtitle = \"Weight ~ height + species model\",\n    y = \"Residuals\",\n    x = \"Predicted weight (gr)\"\n  )\n\n\n\n\n\n\nFitting other models\n\nDemo: Plot weights vs. heights of fish and visualize the fit of a “loess” model. What is different from the plot created before?\n\nThis model is non-linear.\n\nggplot(fish, aes(x = height, y = weight)) +\n  geom_point() +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Weights vs. heights of fish\",\n    x = \"Height (cm)\",\n    y = \"Weight (gr)\"\n  )\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "ae/ae-06-fisheries-sa.html",
    "href": "ae/ae-06-fisheries-sa.html",
    "title": "Joining fisheries",
    "section": "",
    "text": "These are suggested answers to the application exercise. They may differ slightly from the code we developed in class and may not be complete. They’re provided after class to help review the application activity, but are not an alternative to working on the exercise and actively participating in class.\nlibrary(tidyverse)\nlibrary(scales)\n\nfisheries &lt;- read_csv(\"data/fisheries.csv\")\ncontinents &lt;- read_csv(\"data/continents.csv\")"
  },
  {
    "objectID": "ae/ae-06-fisheries-sa.html#working-with-multiple-data-frames",
    "href": "ae/ae-06-fisheries-sa.html#working-with-multiple-data-frames",
    "title": "Joining fisheries",
    "section": "Working with multiple data frames",
    "text": "Working with multiple data frames\nOften instead of being provided the data you need for your analysis in a single data frame, you will need to bring information from multiple datasets together into a data frame yourself. These datasets will be linked to each other via a column (usually an identifier, something that links the two datasets together) that you can use to join them together.\nThere are many possible types of joins. All have the format something_join(x, y).\n\nx &lt;- tibble(\n  value = c(1, 2, 3),\n  xcol = c(\"x1\", \"x2\", \"x3\")\n  )\n\ny &lt;- tibble(\n  value = c(1, 2, 4),\n  ycol = c(\"y1\", \"y2\", \"y4\")\n  )\n\nx\n\n# A tibble: 3 × 2\n  value xcol \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\ny\n\n# A tibble: 3 × 2\n  value ycol \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y4   \n\n\nWe will demonstrate each of the joins on these small, toy datasets.\n\ninner_join(): join all rows from x where there are matching values in y\n\ninner_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 2 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n\n\n\n\nleft_join(): include all rows from x\n\nleft_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 3 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n\n\n\n\nright_join(): include all rows from y\n\nright_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 3 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     4 &lt;NA&gt;  y4   \n\n\n\n\nfull_join(): include all rows in x or y (use this one sparingly!!)\n\nfull_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 4 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n4     4 &lt;NA&gt;  y4   \n\n\n\n\nsemi_join(): return all rows from x with match in y\n\nsemi_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 2 × 2\n  value xcol \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n\n\n\n\nanti_join(): return all rows from x without a match in y\n\nanti_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 1 × 2\n  value xcol \n  &lt;dbl&gt; &lt;chr&gt;\n1     3 x3   \n\n\nQuestion: How do the join functions above know to join x and y by value? Hint: Examine the column names to find out.\n\nnames(x)\n\n[1] \"value\" \"xcol\" \n\nnames(y)\n\n[1] \"value\" \"ycol\""
  },
  {
    "objectID": "ae/ae-06-fisheries-sa.html#global-aquaculture-production",
    "href": "ae/ae-06-fisheries-sa.html#global-aquaculture-production",
    "title": "Joining fisheries",
    "section": "Global aquaculture production",
    "text": "Global aquaculture production\nThe Fisheries and Aquaculture Department of the Food and Agriculture Organization of the United Nations collects data on fisheries production of countries.\nOur goal is to create a visualization of the mean share of aquaculture by continent.\nLet’s start by looking at the fisheries data frame.\n\nglimpse(fisheries)\n\nRows: 82\nColumns: 4\n$ country     &lt;chr&gt; \"Angola\", \"Argentina\", \"Australia\", \"Bangladesh\", \"Brazil\"…\n$ capture     &lt;dbl&gt; 486490, 755226, 174629, 1674770, 705000, 629950, 233190, 8…\n$ aquaculture &lt;dbl&gt; 655, 3673, 96847, 2203554, 581230, 172500, 2315, 200765, 9…\n$ total       &lt;dbl&gt; 487145, 758899, 271476, 3878324, 1286230, 802450, 235505, …\n\n\nWe have the countries, but our goal is to make a visualization by continent. Let’s take a look at the continents data frame.\n\nglimpse(continents)\n\nRows: 245\nColumns: 2\n$ country   &lt;chr&gt; \"Afghanistan\", \"Åland Islands\", \"Albania\", \"Algeria\", \"Ameri…\n$ continent &lt;chr&gt; \"Asia\", \"Europe\", \"Europe\", \"Africa\", \"Oceania\", \"Europe\", \"…\n\n\n\nYour turn (2 minutes):\n\nWhich variable(s) will we use to join the fisheries and continents data frames?\nWe want to keep all rows and columns from fisheries and add a column for corresponding continents. Which join function should we use?\n\nDemo: Join the two data frames and name assign the joined data frame back to fisheries.\n\n\nfisheries &lt;- fisheries |&gt;\n  left_join(continents)\n\nJoining with `by = join_by(country)`\n\n\n\nDemo: Take a look at the updated fisheries data frame. There are some countries that were not in continents. First, identify which countries these are (they will have NA values for continent). Then, manually update the continent information for these countries using the case_when function. Finally, check that these updates have been made as intended and no countries are left without continent information.\n\n\nfisheries |&gt;\n  filter(is.na(continent))\n\n# A tibble: 3 × 5\n  country                          capture aquaculture   total continent\n  &lt;chr&gt;                              &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n1 Democratic Republic of the Congo  237372        3161  240533 &lt;NA&gt;     \n2 Hong Kong                         142775        4258  147033 &lt;NA&gt;     \n3 Myanmar                          2072390     1017644 3090034 &lt;NA&gt;     \n\nfisheries &lt;- fisheries %&gt;%\n  mutate(\n    continent = case_when(\n      country == \"Democratic Republic of the Congo\" ~ \"Africa\",\n      country == \"Hong Kong\" ~ \"Asia\",\n      country == \"Myanmar\" ~ \"Asia\",\n      TRUE ~ continent\n    )\n  )\n\nfisheries |&gt;\n  filter(is.na(continent))\n\n# A tibble: 0 × 5\n# ℹ 5 variables: country &lt;chr&gt;, capture &lt;dbl&gt;, aquaculture &lt;dbl&gt;, total &lt;dbl&gt;,\n#   continent &lt;chr&gt;\n\n\n\nDemo: Add a new column to the fisheries data frame called aq_prop. We will calculate it as aquaculture / total. Save the resulting frame as fisheries.\n\n\nfisheries &lt;- fisheries |&gt;\n  mutate(aq_prop = aquaculture / total)\n\n\nDemo: Calculate the mean aquaculture proportion (we’ll call it mean_aq_prop) for continents in the fisheries data using the summarize() function in dplyr. Note that the function for calculating the mean is mean() in R.\n\n\nfisheries |&gt;                              # start with fisheries data frame\n  group_by(continent) |&gt;                  # group by continent\n  summarize(mean_aq_prop = mean(aq_prop)) # calculate mean aquaculture\n\n# A tibble: 5 × 2\n  continent mean_aq_prop\n  &lt;chr&gt;            &lt;dbl&gt;\n1 Africa          0.0943\n2 Americas        0.192 \n3 Asia            0.367 \n4 Europe          0.165 \n5 Oceania         0.150 \n\n\n\nYour turn (5 minutes): Now expand your calculations to also calculate the minimum and maximum aquaculture proportion for continents in the fisheries data. Note that the functions for calculating minimum and maximum in R are min() and max() respectively.\n\n\nfisheries |&gt;                              # start with fisheries data frame\n  group_by(continent) |&gt;                  # group by continent\n  summarize(                              # calculate summary stats  \n    min_aq_prop  = min(aq_prop),\n    mean_aq_prop = mean(aq_prop),\n    max_aq_prop  = max(aq_prop)\n  )    \n\n# A tibble: 5 × 4\n  continent min_aq_prop mean_aq_prop max_aq_prop\n  &lt;chr&gt;           &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n1 Africa        0             0.0943       0.803\n2 Americas      0             0.192        0.529\n3 Asia          0             0.367        0.782\n4 Europe        0.00682       0.165        0.618\n5 Oceania       0.0197        0.150        0.357\n\n\n\nDemo: Create a new data frame called fisheries_summary that calculates minimum, mean, and maximum aquaculture proportion for each continent in the fisheries data. Then, determine which continent has the largest value of max_ap?\n\n\nfisheries_summary &lt;- fisheries |&gt;         # start with fisheries data frame\n  group_by(continent) |&gt;                  # group by continent\n  summarize(                              # calculate summary stats  \n    min_aq_prop  = min(aq_prop),\n    mean_aq_prop = mean(aq_prop),\n    max_aq_prop  = max(aq_prop)\n  )\n\n\nDemo: Take the fisheries_summary data frame and order the results in descending order of mean aquaculture proportion.\n\n\nfisheries_summary |&gt;            # start with fisheries_summary data frame\n  arrange(desc(mean_aq_prop))   # order in descending order of mean_aq_prop\n\n# A tibble: 5 × 4\n  continent min_aq_prop mean_aq_prop max_aq_prop\n  &lt;chr&gt;           &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n1 Asia          0             0.367        0.782\n2 Americas      0             0.192        0.529\n3 Europe        0.00682       0.165        0.618\n4 Oceania       0.0197        0.150        0.357\n5 Africa        0             0.0943       0.803\n\n\n\nDemo: Recreate the following plot using the data frame you have developed so far.\n\n\n\n\n\n\n\nggplot(fisheries_summary, \n       aes(y = fct_reorder(continent, mean_aq_prop), x = mean_aq_prop)) +\n  geom_col() +\n  scale_x_continuous(labels = label_percent(accuracy = 1)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Average share of aquaculture by continent\",\n    subtitle = \"out of total fisheries harvest, 2016\",\n    caption = \"Source: bit.ly/2VrawTt\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nYour turn (time permitting): Change the theme of the plot and make any other changes you would like to improve it.\n\n\n# add your code here"
  },
  {
    "objectID": "ae/ae-01-unvotes.html",
    "href": "ae/ae-01-unvotes.html",
    "title": "UN Votes",
    "section": "",
    "text": "Go to Posit Cloud to get started."
  },
  {
    "objectID": "ae/ae-01-unvotes.html#introduction",
    "href": "ae/ae-01-unvotes.html#introduction",
    "title": "UN Votes",
    "section": "Introduction",
    "text": "Introduction\nHow do various countries vote in the United Nations General Assembly, how have their voting patterns evolved throughout time, and how similarly or differently do they view certain issues? Answering these questions (at a high level) is the focus of this analysis.\n\nPackages\nWe will use the tidyverse, lubridate, and scales packages for data wrangling and visualization, and the DT package for interactive display of tabular output, and the unvotes package for the data.\n\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(DT)\nlibrary(unvotes)\nlibrary(ggthemes)\n\n\n\nData\nThe data we’re using originally come from the unvotes package. In the chunk below we modify the data by joining the various data frames provided in the package to help you get started with the analysis.\n\nunvotes &lt;- un_votes |&gt;\n  inner_join(un_roll_calls, by = \"rcid\") |&gt;\n  inner_join(un_roll_call_issues, by = \"rcid\", relationship = \"many-to-many\")"
  },
  {
    "objectID": "ae/ae-01-unvotes.html#un-voting-patterns",
    "href": "ae/ae-01-unvotes.html#un-voting-patterns",
    "title": "UN Votes",
    "section": "UN voting patterns",
    "text": "UN voting patterns\nLet’s create a data visualization that displays how the voting record of the UK & NI changed over time on a variety of issues, and compares it to two other countries: US and Turkey.\nWe can easily change which countries are being plotted by changing which countries the code above filters for. Note that the country name should be spelled and capitalized exactly the same way as it appears in the data. See the Appendix for a list of the countries in the data.\n\nunvotes |&gt;\n  filter(country %in% c(\"United Kingdom\", \"United States\", \"Turkey\")) |&gt;\n  mutate(year = year(date)) |&gt;\n  group_by(country, year, issue) |&gt;\n  summarize(percent_yes = mean(vote == \"yes\")) |&gt;\n  ggplot(mapping = aes(x = year, y = percent_yes, color = country)) +\n  geom_point(alpha = 0.4) +\n  geom_smooth(method = \"loess\", se = FALSE) +\n  facet_wrap(~issue) +\n  scale_y_continuous(labels = percent) +\n  scale_color_colorblind() +\n  labs(\n    title = \"Percentage of 'Yes' votes in the UN General Assembly\",\n    subtitle = \"1946 to 2019\",\n    y = \"% Yes\",\n    x = \"Year\",\n    color = \"Country\"\n  )"
  },
  {
    "objectID": "ae/ae-01-unvotes.html#references",
    "href": "ae/ae-01-unvotes.html#references",
    "title": "UN Votes",
    "section": "References",
    "text": "References\n\nRobinson D (2021). unvotes: United Nations General Assembly Voting Data. R package version 0.3.0, https://github.com/dgrtwo/unvotes.\nErik Voeten “Data and Analyses of Voting in the UN General Assembly” Routledge Handbook of International Organization, edited by Bob Reinalda (published May 27, 2013).\nMuch of the analysis has been modeled on the examples presented in the unvotes package vignette."
  },
  {
    "objectID": "ae/ae-01-unvotes.html#appendix",
    "href": "ae/ae-01-unvotes.html#appendix",
    "title": "UN Votes",
    "section": "Appendix",
    "text": "Appendix\nBelow is a list of countries in the dataset:"
  },
  {
    "objectID": "ae/ae-09-fish.html",
    "href": "ae/ae-09-fish.html",
    "title": "Modelling fish weights",
    "section": "",
    "text": "For this application exercise, we will work with data on fish. The dataset we will use, called fish, is on two common fish species in fish market sales. We’re going to investigate the relationship between the weights and heights of fish, and later take into consider species as well.\n\nlibrary(tidyverse)\nlibrary(tidymodels)\n\nfish &lt;- read_csv(\"data/fish.csv\")\n\nThe data dictionary is below:\n\n\n\nvariable\ndescription\n\n\n\n\nspecies\nSpecies name of fish\n\n\nweight\nWeight, in grams\n\n\nlength_vertical\nVertical length, in cm\n\n\nlength_diagonal\nDiagonal length, in cm\n\n\nlength_cross\nCross length, in cm\n\n\nheight\nHeight, in cm\n\n\nwidth\nDiagonal width, in cm\n\n\n\n\nVisualizing the relationship\nWe’re going to investigate the relationship between the weights and heights of fish.\n\nDemo: Create an appropriate plot to investigate this relationship. Add appropriate labels to the plot.\n\n\n# add code here\n\n\n\nCorrelation\n\nWhat is correlation? What are values correlation can take?\n\nAdd response here.\n\nDemo: What is the correlation between heights and weights of fish?\n\n\n# add code here\n\n\n\nVisualizing the model\n\nYour turn: Overlay the line of best fit on your scatterplot.\n\n\n# add code here\n\n\nWhat types of questions can this plot help answer?\n\nAdd response here.\n\n\nModel fitting\n\nDemo: Fit a linear model to predict fish weights from their heights.\n\n\n# add code here\n\n\n\nModel summary\n\nDemo: Display the model summary including estimates for the slope and intercept along with measurements of uncertainty around them. Show how you can extract the values of slope and intercept from the model output.\n\n\n# add code here\n\n\nDemo: Write out your model using mathematical notation.\n\n\\(\\widehat{weight} = 1.96 + 0.233 \\times height\\)\n\nDemo: Interpret the slope and the intercept.\n\nAdd response here.\n\n\nPrediction\n\nWe can use this line to make predictions. Predict what you think the weight of a fish would be with a height of 10 cm, 15 cm, and 20 cm. Which prediction is considered extrapolation?\n\nAdd response here.\n\nYour turn: Predict what the weight of a fish would be with a height of 10 cm, 15 cm, and 20 cm using the model equation.\n\n\n# add code here\n\n\nDemo: Predict what the weight of a fish would be with a height of 10 cm, 15 cm, and 20 cm using the predict() function.\n\n\n# add code here\n\n\n\nResiduals\n\nWhat is a residual?\n\nAdd response here.\n\nDemo: Calculate predicted weights for all fish in the data and visualize the residuals under this model.\n\n\n# add code here\n\n\nDemo: If the model was a perfect fit, what would the value of the residuals be? Make a histogram of the residuals. Does it appear that the model is a good fit?\n\nAdd response here.\n\n# add code here\n\n\nDemo: Suppose you make a scatterplot of residuals vs. the predicted values. If the model is a good fit, what, if any, patterns would you expect to see in this plot? Now, make the plot. Does the model appear to be a good fit?\n\nAdd response here.\n\n# add code here\n\n\nDemo: Make the same plot, but this time using a 2D density as the geom. What does this plot tell you about the data?\n\nAdd response here.\n\n# add code here\n\n\n\nAdding a second predictor\n\nDemo: Does the apparent relationship between heights and weights of fish change if we take into consideration species? Plot two separate straight lines for the Bream and Roach species.\n\n\n# add code here\n\n\nDemo: Fit the model with height and species as predictors and then plot the residuals vs. predicted values as well as a histogram of residuals for this model. Comment on the fit of the model compared to the previous one.\n\nAdd response here.\n\n# add code here\n\n\n\nFitting other models\n\nDemo: Plot weights vs. heights of fish and visualize the fit of a “loess” model. What is different from the plot created before?\n\nAdd response here.\n\n# add code here"
  },
  {
    "objectID": "ae/ae-03-flint.html",
    "href": "ae/ae-03-flint.html",
    "title": "Exploring Flint’s water data",
    "section": "",
    "text": "Go to the course GitHub organization to get started.\nThis is an updated version of the previous application exercise. The data analysis exercises R the same, but workflow steps have been updated for a Git and GitHub based workflow."
  },
  {
    "objectID": "ae/ae-03-flint.html#load-packages",
    "href": "ae/ae-03-flint.html#load-packages",
    "title": "Exploring Flint’s water data",
    "section": "Load packages",
    "text": "Load packages\nWe’ll use the tidyverse package for analysis, which offers functionality for data import, wrangling, visualization, and more.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nLoading this package prints out a message. What does this message mean? How can we suppress the message from the output?"
  },
  {
    "objectID": "ae/ae-03-flint.html#load-data",
    "href": "ae/ae-03-flint.html#load-data",
    "title": "Exploring Flint’s water data",
    "section": "Load data",
    "text": "Load data\nThe read_csv() function can be used for reading CSV (comma separated values) files. The file we’re reading is called flint with the suffix (.csv) which indicates its file type. The file is in the data folder.\nBefore reading in the file, go to the data folder in the Files pane to confirm that it is, indeed, there. Then, read the file by running the code chunk below by clicking on the green triangle icon on the code chunk.\n\nflint &lt;- read_csv(\"data/flint.csv\")\n\nRows: 813 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): draw\ndbl (4): id, zip, ward, lead\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nOne of two things may have happened:\n\nThe file was read successfully and you now see a dataset called flint in your Environment pane.\nThe file was not read successfully and you see an error Error in read_csv(\"data/flint.csv\") : could not find function \"read_csv\".\n\nIf (1) happened, great!\nIf (2) happened, let’s troubleshoot first before continuing."
  },
  {
    "objectID": "ae/ae-03-flint.html#data-dictionary",
    "href": "ae/ae-03-flint.html#data-dictionary",
    "title": "Exploring Flint’s water data",
    "section": "Data dictionary",
    "text": "Data dictionary\nThe following variables are in the flint data frame:\n\nid: sample ID number (identifies the home)\nzip: ZIP code in Flint of the sample’s location\nward: ward in Flint of the sample’s location\ndraw: which time point the water was sampled from\nlead: lead content in parts per billion (ppb)"
  },
  {
    "objectID": "ae/ae-03-flint.html#populations-and-samples",
    "href": "ae/ae-03-flint.html#populations-and-samples",
    "title": "Exploring Flint’s water data",
    "section": "Populations and samples",
    "text": "Populations and samples\nWe want to learn about the population using a sample.\nIn the case we want to learn about the lead content in all of Flint, MI homes but only have available water readings from a sample of homes (our data set).\nExercise 1: Look at the data, how many observations are there? How many variables?\n\n# add code here\n\n\nRender, commit, and push, with an appropriate commit message like “Finished Exercise 1”. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "ae/ae-03-flint.html#frequencies",
    "href": "ae/ae-03-flint.html#frequencies",
    "title": "Exploring Flint’s water data",
    "section": "Frequencies",
    "text": "Frequencies\nLet’s count() to find the number of different time points water was sampled with the count() function.\n\nThe first argument is flint: the data frame\nThe second argument is draw: the variable\n\n\ncount(flint, draw)\n\n# A tibble: 3 × 2\n  draw       n\n  &lt;chr&gt;  &lt;int&gt;\n1 first    271\n2 second   271\n3 third    271\n\n\nWe can achieve the same result with the following “piped” operation as well.\n\nThe first line is flint: the data frame\nThen the pipe operator, read as “and then”, which places what comes before it as the first argument of what comes after it\nThe second line is count(draw)\n\n\nflint |&gt;\n  count(draw)\n\n# A tibble: 3 × 2\n  draw       n\n  &lt;chr&gt;  &lt;int&gt;\n1 first    271\n2 second   271\n3 third    271\n\n\nWe can use a similar approach to fund out how many unique homes are in the data set:\n\nflint |&gt;\n  count(id)\n\n# A tibble: 269 × 2\n      id     n\n   &lt;dbl&gt; &lt;int&gt;\n 1     1     3\n 2     2     3\n 3     4     3\n 4     5     3\n 5     6     3\n 6     7     3\n 7     8     3\n 8     9     3\n 9    12     3\n10    13     3\n# ℹ 259 more rows\n\n\nExercise 2: How many samples were taken from each zip code?\n\n# add code here\n\nExercise 3: Which ZIP code had the most samples drawn? Hint: See the help for count.\n\n# add code here\n\n\nRender, commit, and push, with an appropriate commit message like “Finished exercises 2 and 3”. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "ae/ae-03-flint.html#measures-of-central-tendency",
    "href": "ae/ae-03-flint.html#measures-of-central-tendency",
    "title": "Exploring Flint’s water data",
    "section": "Measures of central tendency",
    "text": "Measures of central tendency\n\nmean\nmedian\nmode"
  },
  {
    "objectID": "ae/ae-03-flint.html#measures-of-spread",
    "href": "ae/ae-03-flint.html#measures-of-spread",
    "title": "Exploring Flint’s water data",
    "section": "Measures of spread",
    "text": "Measures of spread\n\nvariance\nstandard deviation\nrange\nquartiles\ninter-quartile range (IQR)"
  },
  {
    "objectID": "ae/ae-03-flint.html#order-statistics",
    "href": "ae/ae-03-flint.html#order-statistics",
    "title": "Exploring Flint’s water data",
    "section": "Order statistics",
    "text": "Order statistics\n\nquantiles\nminimum (0 percentile)\nmedian (50th percentile)\nmaximum (100 percentile)\n\n… and any other arbitrary function of the data you can come up with!\nExercise 4: Compute each of these statistics for lead ppb.\n\n# add code here\n\n\nRender, commit, and push, with an appropriate commit message. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "ae/ae-03-flint.html#histograms",
    "href": "ae/ae-03-flint.html#histograms",
    "title": "Exploring Flint’s water data",
    "section": "Histograms",
    "text": "Histograms\nLet’s take a look at the distribution of lead content in homes in Flint, MI.\n\nggplot(flint, aes(x = lead)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nWe can make this plot look nicer/more useful by adjusting the number of bins and zooming into the x-axis.\n\nggplot(flint, aes(x = lead)) +\n  geom_histogram(bins = 50) +\n  coord_cartesian(xlim = c(0, 100))\n\n\n\n\nLet’s visualize some of our summary statistics on the plot.\nExercise 5: Add a new layer, geom_vline(xintercept = __, color = \"red\"), to the histogram below, filling in the blank with the mean.\n\nggplot(flint, aes(x = lead)) + \n  geom_histogram(bins = 50) + \n  coord_cartesian(xlim = c(0, 100))\n\n\n\n\nExercise 6: Add one more layer which overlays the median, in a different color.\n\n# add code here"
  },
  {
    "objectID": "ae/ae-03-flint.html#box-plots",
    "href": "ae/ae-03-flint.html#box-plots",
    "title": "Exploring Flint’s water data",
    "section": "Box plots",
    "text": "Box plots\nNext, let’s narrow our focus to the zip codes 48503, 48504, 48505, 48506, and 48507 and observations with lead values less than 1,000 ppb.\n\nflint_focus &lt;- flint |&gt;\n  filter(zip %in% 48503:48507 & lead &lt; 1000)\n\nExercise 7: Below are side-by-side box plots for the three flushing times in each of the five zip codes we considered. Add x and y labels; add a title by inserting title = \"title_name\" inside the labs() function.\n\nggplot(data = flint_focus, aes(y = factor(zip), x = lead)) +\n  geom_boxplot(aes(fill = factor(draw))) +\n  labs(x = \"___\", y = \"___\", fill = \"Flushing time\") +\n  scale_fill_discrete(\n    breaks = c(\"first\", \"second\", \"third\"),\n    labels = c(\"0 (sec)\", \"45 (sec)\", \"120 (sec)\")\n  )\n\n\n\n\n\nRender, commit, and push, with an appropriate commit message. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n\nExercise 8: Add labels for x, y, a title, and subtitle to the code below to update the corresponding plot.\n\nggplot(data = flint_focus, aes(y = factor(zip), x = lead)) +\n  geom_boxplot(aes(fill = factor(draw))) + \n  labs(\n    x = \"___\", y = \"___\", fill = \"Flushing time\",\n    title = \"___\",\n    subtitle = \"___\"\n    ) +\n  scale_fill_discrete(\n    breaks = c(\"first\", \"second\", \"third\"),\n    labels = c(\"0 (sec)\", \"45 (sec)\", \"120 (sec)\")\n  ) +\n  coord_cartesian(xlim = c(0, 50)) +\n  theme_bw()\n\n\n\n\nExercise 9: What is the difference between the two plots? What are the advantages and disadvantages to each plot?\n[Add your answer here]\n\nRender, commit, and push, with an appropriate commit message. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding. Confirm that your output looks as expected on your GitHub repository."
  },
  {
    "objectID": "ae/ae-04-sat-sa.html",
    "href": "ae/ae-04-sat-sa.html",
    "title": "Visualizing data and investigating relationships",
    "section": "",
    "text": "Important\n\n\n\nThese are suggested answers to the application exercise. They may differ slightly from the code we developed in class and may not be complete. They’re provided after class to help review the application activity, but are not an alternative to working on the exercise and actively participating in class."
  },
  {
    "objectID": "ae/ae-04-sat-sa.html#single-variable",
    "href": "ae/ae-04-sat-sa.html#single-variable",
    "title": "Visualizing data and investigating relationships",
    "section": "Single variable",
    "text": "Single variable\nAnalyzing the a single variable is called univariate analysis.\nCreate visualizations of the distribution of average SAT scores, total.\n\nMake a histogram. Set an appropriate binwidth.\n\n\nggplot(SAT_2010, aes(x = total)) +\n  geom_histogram(binwidth = 40)\n\n\n\n\n\nMake a boxplot.\n\n\nggplot(SAT_2010, aes(x = total)) +\n  geom_boxplot()\n\n\n\n\n\nMake a density plot.\n\n\nggplot(SAT_2010, aes(x = total)) +\n  geom_density(fill = \"gray\")\n\n\n\n\n\nBased on these, determine if each of the following statements about the shape of the distribution is true or false.\n\nThe distribution of average SAT scores in 2010 is right skewed. ___\nThe distribution of average SAT scores in 2010 is unimodal. ___"
  },
  {
    "objectID": "ae/ae-04-sat-sa.html#two-variables",
    "href": "ae/ae-04-sat-sa.html#two-variables",
    "title": "Visualizing data and investigating relationships",
    "section": "Two variables",
    "text": "Two variables\nAnalyzing the relationship between two variables is called bivariate analysis.\n\nWhat would you expect the relationship between average SAT scores (total) and average teacher salaries (salary) to look like? What type of plot would you use to visualize this relationship? Create the plot below.\n\nAdd your answer here.\n\nggplot(SAT_2010, aes(x = salary, y = total)) + \n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nLurking in the background, however, is another important factor. The percentage of students who take the SAT in each state varies dramatically between states. First, let’s visualize the distribution of this variable, sat_pct.\n\nAdd your response here.\n\nggplot(SAT_2010, aes(x = sat_pct)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nLet’s label states with low SAT participation \"Low\" and the others \"High\". For the cutoff point, let’s use the median participation level.\n\nAdd your response here.\n\nSAT_2010 |&gt;\n  summarize(med = median(sat_pct))\n\n  med\n1  27\n\nSAT_2010 &lt;- SAT_2010 |&gt;\n  mutate(sat_pct_grp = ifelse(sat_pct &lt;= 27, \"Low\", \"High\"))"
  },
  {
    "objectID": "ae/ae-04-sat-sa.html#multiple-variables",
    "href": "ae/ae-04-sat-sa.html#multiple-variables",
    "title": "Visualizing data and investigating relationships",
    "section": "Multiple variables",
    "text": "Multiple variables\n\nRecreate the scatterplot of average SAT scores, this time coloring each state based on whether they had low or high participation in the SAT. Describe the relationship between SAT scores and teacher salaries, when conditioning on SAT participation.\n\n\nggplot(SAT_2010, aes(x = salary, y = total, color = sat_pct_grp)) + \n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nFill in the blanks below.\n\nAmong all states, salaries and SAT scores are ___ associated.\nAmong states with a low percentage taking the SAT, teacher salaries and SAT scores are ___ associated.\nAmong states with a high percentage taking the SAT, teacher salaries and SAT scores are ___ associated.\n\n\nThis phenomenon is called Simpson’s paradox – a trend appears in subsets of the data, but disappears or reverses when the subsets are combined. The paradox can be resolved when confounding variables and causal relations are appropriately addressed in the analysis. In the above example, the confounding variable is SAT participation rate.\n\nImprove the visual display of the plot you just created.\n\n\nggplot(SAT_2010, aes(x = salary, y = total, color = sat_pct_grp)) + \n  geom_point() + \n  geom_smooth(method = \"lm\") +\n  labs(\n    x = \"Average teacher salary ((in 2010 US $)\",\n    y = \"Average total score on the SAT\",\n    color = \"SAT participation rate\",\n    title = \"Average SAT scores and teacher salaries in US States\"\n  ) +\n  scale_color_colorblind(labels = c(\"Low (27%)\", \"High (&gt;27%)\")) +\n  scale_x_continuous(labels = label_dollar(scale = 1/1000, suffix = \"K\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\")\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html",
    "href": "ae/ae-02-flint-sa.html",
    "title": "Exploring Flint’s water data",
    "section": "",
    "text": "Important\n\n\n\nThese are suggested answers to the application exercise. They may differ slightly from the code we developed in class and may not be complete. They’re provided after class to help review the application activity, but are not an alternative to working on the exercise and actively participating in class."
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#rstudio",
    "href": "ae/ae-02-flint-sa.html#rstudio",
    "title": "Exploring Flint’s water data",
    "section": "RStudio",
    "text": "RStudio\n\nFiles, plots, viewer, environment, etc. panes\nConsole\nEditor"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#r",
    "href": "ae/ae-02-flint-sa.html#r",
    "title": "Exploring Flint’s water data",
    "section": "R",
    "text": "R\n\nWriting code in the console\nBasic math with R\nCreating variables in R, the assignment operator (&lt;-), and the Environment pane\nR functions and packages and the Packages pane\nGetting help with R and the Help pane"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#quarto",
    "href": "ae/ae-02-flint-sa.html#quarto",
    "title": "Exploring Flint’s water data",
    "section": "Quarto",
    "text": "Quarto\n\nYAML: Metadata\nNarrative: Edited with the visual editor (or the source editor)\nCode: In code chunks\n\nChunk options (following #|)\nComments (following #)\nCode\n\nRunning individual code chunks vs. rendering a document"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#load-packages",
    "href": "ae/ae-02-flint-sa.html#load-packages",
    "title": "Exploring Flint’s water data",
    "section": "Load packages",
    "text": "Load packages\nWe’ll use the tidyverse package for analysis, which offers functionality for data import, wrangling, visualization, and more.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nLoading this package prints out a message. What does this message mean? How can we suppress the message from the output?"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#load-data",
    "href": "ae/ae-02-flint-sa.html#load-data",
    "title": "Exploring Flint’s water data",
    "section": "Load data",
    "text": "Load data\nThe read_csv() function can be used for reading CSV (comma separated values) files. The file we’re reading is called flint with the suffix (.csv) which indicates its file type. The file is in the data folder.\nBefore reading in the file, go to the data folder in the Files pane to confirm that it is, indeed, there. Then, read the file by running the code chunk below by clicking on the green triangle icon on the code chunk.\n\nflint &lt;- read_csv(\"data/flint.csv\")\n\nRows: 813 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): draw\ndbl (4): id, zip, ward, lead\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nOne of two things may have happened:\n\nThe file was read successfully and you now see a dataset called flint in your Environment pane.\nThe file was not read successfully and you see an error Error in read_csv(\"data/flint.csv\") : could not find function \"read_csv\".\n\nIf (1) happened, great!\nIf (2) happened, let’s troubleshoot first before continuing."
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#data-dictionary",
    "href": "ae/ae-02-flint-sa.html#data-dictionary",
    "title": "Exploring Flint’s water data",
    "section": "Data dictionary",
    "text": "Data dictionary\nThe following variables are in the flint data frame:\n\nid: sample ID number (identifies the home)\nzip: ZIP code in Flint of the sample’s location\nward: ward in Flint of the sample’s location\ndraw: which time point the water was sampled from\nlead: lead content in parts per billion (ppb)"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#populations-and-samples",
    "href": "ae/ae-02-flint-sa.html#populations-and-samples",
    "title": "Exploring Flint’s water data",
    "section": "Populations and samples",
    "text": "Populations and samples\nWe want to learn about the population using a sample.\nIn the case we want to learn about the lead content in all of Flint, MI homes but only have available water readings from a sample of homes (our data set).\nExercise 1: Look at the data, how many observations are there? How many variables?\n\nnrow(flint)\n\n[1] 813\n\nncol(flint)\n\n[1] 5"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#frequencies",
    "href": "ae/ae-02-flint-sa.html#frequencies",
    "title": "Exploring Flint’s water data",
    "section": "Frequencies",
    "text": "Frequencies\nLet’s count() to find the number of different time points water was sampled with the count() function.\n\nThe first argument is flint: the data frame\nThe second argument is draw: the variable\n\n\ncount(flint, draw)\n\n# A tibble: 3 × 2\n  draw       n\n  &lt;chr&gt;  &lt;int&gt;\n1 first    271\n2 second   271\n3 third    271\n\n\nWe can achieve the same result with the following “piped” operation as well.\n\nThe first line is flint: the data frame\nThen the pipe operator, read as “and then”, which places what comes before it as the first argument of what comes after it\nThe second line is count(draw)\n\n\nflint |&gt;\n  count(draw)\n\n# A tibble: 3 × 2\n  draw       n\n  &lt;chr&gt;  &lt;int&gt;\n1 first    271\n2 second   271\n3 third    271\n\n\nWe can use a similar approach to fund out how many unique homes are in the data set:\n\nflint |&gt;\n  count(id)\n\n# A tibble: 269 × 2\n      id     n\n   &lt;dbl&gt; &lt;int&gt;\n 1     1     3\n 2     2     3\n 3     4     3\n 4     5     3\n 5     6     3\n 6     7     3\n 7     8     3\n 8     9     3\n 9    12     3\n10    13     3\n# ℹ 259 more rows\n\n\nExercise 2: How many samples were taken from each zip code?\n\nflint |&gt;\n  count(zip)\n\n# A tibble: 8 × 2\n    zip     n\n  &lt;dbl&gt; &lt;int&gt;\n1 48502     3\n2 48503   207\n3 48504   165\n4 48505   144\n5 48506   132\n6 48507   153\n7 48529     3\n8 48532     6\n\n\nExercise 3: Which ZIP code had the most samples drawn? Hint: See the help for count.\n\nflint |&gt;\n  count(zip, sort = TRUE)\n\n# A tibble: 8 × 2\n    zip     n\n  &lt;dbl&gt; &lt;int&gt;\n1 48503   207\n2 48504   165\n3 48507   153\n4 48505   144\n5 48506   132\n6 48532     6\n7 48502     3\n8 48529     3"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#measures-of-central-tendency",
    "href": "ae/ae-02-flint-sa.html#measures-of-central-tendency",
    "title": "Exploring Flint’s water data",
    "section": "Measures of central tendency",
    "text": "Measures of central tendency\n\nmean\nmedian\nmode"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#measures-of-spread",
    "href": "ae/ae-02-flint-sa.html#measures-of-spread",
    "title": "Exploring Flint’s water data",
    "section": "Measures of spread",
    "text": "Measures of spread\n\nvariance\nstandard deviation\nrange\nquartiles\ninter-quartile range (IQR)"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#order-statistics",
    "href": "ae/ae-02-flint-sa.html#order-statistics",
    "title": "Exploring Flint’s water data",
    "section": "Order statistics",
    "text": "Order statistics\n\nquantiles\nminimum (0 percentile)\nmedian (50th percentile)\nmaximum (100 percentile)\n\n… and any other arbitrary function of the data you can come up with!\nExercise 4: Compute each of these statistics for lead ppb.\n\nflint |&gt;\n  summarize(\n    mean_lead = mean(lead),\n    median_lead = median(lead),\n    sd_lead = sd(lead),\n    # etc.\n  )\n\n# A tibble: 1 × 3\n  mean_lead median_lead sd_lead\n      &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;\n1      8.20        1.85    41.5"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#histograms",
    "href": "ae/ae-02-flint-sa.html#histograms",
    "title": "Exploring Flint’s water data",
    "section": "Histograms",
    "text": "Histograms\nLet’s take a look at the distribution of lead content in homes in Flint, MI.\n\nggplot(flint, aes(x = lead)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nWe can make this plot look nicer/more useful by adjusting the number of bins and zooming into the x-axis.\n\nggplot(flint, aes(x = lead)) +\n  geom_histogram(bins = 50) +\n  coord_cartesian(xlim = c(0, 100))\n\n\n\n\nLet’s visualize some of our summary statistics on the plot.\nExercise 5: Add a new layer, geom_vline(xintercept = __, color = \"red\"), to the histogram below, filling in the blank with the mean.\n\nggplot(flint, aes(x = lead)) + \n  geom_histogram(bins = 50) + \n  coord_cartesian(xlim = c(0, 100))\n\n\n\n\nExercise 6: Add one more layer which overlays the median, in a different color.\n\nggplot(flint, aes(x = lead)) + \n  geom_histogram(bins = 50) + \n  geom_vline(xintercept = 1.852)\n\n\n\n  coord_cartesian(xlim = c(0, 100))\n\n&lt;ggproto object: Class CoordCartesian, Coord, gg&gt;\n    aspect: function\n    backtransform_range: function\n    clip: on\n    default: FALSE\n    distance: function\n    expand: TRUE\n    is_free: function\n    is_linear: function\n    labels: function\n    limits: list\n    modify_scales: function\n    range: function\n    render_axis_h: function\n    render_axis_v: function\n    render_bg: function\n    render_fg: function\n    setup_data: function\n    setup_layout: function\n    setup_panel_guides: function\n    setup_panel_params: function\n    setup_params: function\n    train_panel_guides: function\n    transform: function\n    super:  &lt;ggproto object: Class CoordCartesian, Coord, gg&gt;"
  },
  {
    "objectID": "ae/ae-02-flint-sa.html#box-plots",
    "href": "ae/ae-02-flint-sa.html#box-plots",
    "title": "Exploring Flint’s water data",
    "section": "Box plots",
    "text": "Box plots\nNext, let’s narrow our focus to the zip codes 48503, 48504, 48505, 48506, and 48507 and observations with lead values less than 1,000 ppb.\n\nflint_focus &lt;- flint |&gt;\n  filter(zip %in% 48503:48507 & lead &lt; 1000)\n\nExercise 7: Below are side-by-side box plots for the three flushing times in each of the five zip codes we considered. Add x and y labels; add a title by inserting title = \"title_name\" inside the labs() function.\n\nggplot(data = flint_focus, aes(y = factor(zip), x = lead)) +\n  geom_boxplot(aes(fill = factor(draw))) +\n  labs(x = \"Lead amount (PPB)\", y = \"Zip code\", fill = \"Flushing time\") +\n  scale_fill_discrete(\n    breaks = c(\"first\", \"second\", \"third\"),\n    labels = c(\"0 (sec)\", \"45 (sec)\", \"120 (sec)\")\n  )\n\n\n\n\nExercise 8: Add labels for x, y, a title, and subtitle to the code below to update the corresponding plot.\n\nggplot(data = flint_focus, aes(y = factor(zip), x = lead)) +\n  geom_boxplot(aes(fill = factor(draw))) + \n  labs(\n    x = \"Lead amount (PPB)\", y = \"Zip code\", fill = \"Flushing time\",\n    title = \"Amount of lead in water\",\n    subtitle = \"Across various zip codes and flushing times\"\n    ) +\n  scale_fill_discrete(\n    breaks = c(\"first\", \"second\", \"third\"),\n    labels = c(\"0 (sec)\", \"45 (sec)\", \"120 (sec)\")\n  ) +\n  coord_cartesian(xlim = c(0, 50)) +\n  theme_bw()\n\n\n\n\nExercise 9: What is the difference between the two plots? What are the advantages and disadvantages to each plot?\n\nIt’s easier to see the distribution of the bulk of data in the latter plot, but the extreme observations are gone, which can also be important in this context."
  },
  {
    "objectID": "ae/ae-02-flint.html",
    "href": "ae/ae-02-flint.html",
    "title": "Exploring Flint’s water data",
    "section": "",
    "text": "Go to Posit Cloud to get started."
  },
  {
    "objectID": "ae/ae-02-flint.html#rstudio",
    "href": "ae/ae-02-flint.html#rstudio",
    "title": "Exploring Flint’s water data",
    "section": "RStudio",
    "text": "RStudio\n\nFiles, plots, viewer, environment, etc. panes\nConsole\nEditor"
  },
  {
    "objectID": "ae/ae-02-flint.html#r",
    "href": "ae/ae-02-flint.html#r",
    "title": "Exploring Flint’s water data",
    "section": "R",
    "text": "R\n\nWriting code in the console\nBasic math with R\nCreating variables in R, the assignment operator (&lt;-), and the Environment pane\nR functions and packages and the Packages pane\nGetting help with R and the Help pane"
  },
  {
    "objectID": "ae/ae-02-flint.html#quarto",
    "href": "ae/ae-02-flint.html#quarto",
    "title": "Exploring Flint’s water data",
    "section": "Quarto",
    "text": "Quarto\n\nYAML: Metadata\nNarrative: Edited with the visual editor (or the source editor)\nCode: In code chunks\n\nChunk options (following #|)\nComments (following #)\nCode\n\nRunning individual code chunks vs. rendering a document"
  },
  {
    "objectID": "ae/ae-02-flint.html#load-packages",
    "href": "ae/ae-02-flint.html#load-packages",
    "title": "Exploring Flint’s water data",
    "section": "Load packages",
    "text": "Load packages\nWe’ll use the tidyverse package for analysis, which offers functionality for data import, wrangling, visualization, and more.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nLoading this package prints out a message. What does this message mean? How can we suppress the message from the output?"
  },
  {
    "objectID": "ae/ae-02-flint.html#load-data",
    "href": "ae/ae-02-flint.html#load-data",
    "title": "Exploring Flint’s water data",
    "section": "Load data",
    "text": "Load data\nThe read_csv() function can be used for reading CSV (comma separated values) files. The file we’re reading is called flint with the suffix (.csv) which indicates its file type. The file is in the data folder.\nBefore reading in the file, go to the data folder in the Files pane to confirm that it is, indeed, there. Then, read the file by running the code chunk below by clicking on the green triangle icon on the code chunk.\n\nflint &lt;- read_csv(\"data/flint.csv\")\n\nRows: 813 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): draw\ndbl (4): id, zip, ward, lead\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nOne of two things may have happened:\n\nThe file was read successfully and you now see a dataset called flint in your Environment pane.\nThe file was not read successfully and you see an error Error in read_csv(\"data/flint.csv\") : could not find function \"read_csv\".\n\nIf (1) happened, great!\nIf (2) happened, let’s troubleshoot first before continuing."
  },
  {
    "objectID": "ae/ae-02-flint.html#data-dictionary",
    "href": "ae/ae-02-flint.html#data-dictionary",
    "title": "Exploring Flint’s water data",
    "section": "Data dictionary",
    "text": "Data dictionary\nThe following variables are in the flint data frame:\n\nid: sample ID number (identifies the home)\nzip: ZIP code in Flint of the sample’s location\nward: ward in Flint of the sample’s location\ndraw: which time point the water was sampled from\nlead: lead content in parts per billion (ppb)"
  },
  {
    "objectID": "ae/ae-02-flint.html#populations-and-samples",
    "href": "ae/ae-02-flint.html#populations-and-samples",
    "title": "Exploring Flint’s water data",
    "section": "Populations and samples",
    "text": "Populations and samples\nWe want to learn about the population using a sample.\nIn the case we want to learn about the lead content in all of Flint, MI homes but only have available water readings from a sample of homes (our data set).\nExercise 1: Look at the data, how many observations are there? How many variables?\n\n# add code here"
  },
  {
    "objectID": "ae/ae-02-flint.html#frequencies",
    "href": "ae/ae-02-flint.html#frequencies",
    "title": "Exploring Flint’s water data",
    "section": "Frequencies",
    "text": "Frequencies\nLet’s count() to find the number of different time points water was sampled with the count() function.\n\nThe first argument is flint: the data frame\nThe second argument is draw: the variable\n\n\ncount(flint, draw)\n\n# A tibble: 3 × 2\n  draw       n\n  &lt;chr&gt;  &lt;int&gt;\n1 first    271\n2 second   271\n3 third    271\n\n\nWe can achieve the same result with the following “piped” operation as well.\n\nThe first line is flint: the data frame\nThen the pipe operator, read as “and then”, which places what comes before it as the first argument of what comes after it\nThe second line is count(draw)\n\n\nflint |&gt;\n  count(draw)\n\n# A tibble: 3 × 2\n  draw       n\n  &lt;chr&gt;  &lt;int&gt;\n1 first    271\n2 second   271\n3 third    271\n\n\nWe can use a similar approach to fund out how many unique homes are in the data set:\n\nflint |&gt;\n  count(id)\n\n# A tibble: 269 × 2\n      id     n\n   &lt;dbl&gt; &lt;int&gt;\n 1     1     3\n 2     2     3\n 3     4     3\n 4     5     3\n 5     6     3\n 6     7     3\n 7     8     3\n 8     9     3\n 9    12     3\n10    13     3\n# ℹ 259 more rows\n\n\nExercise 2: How many samples were taken from each zip code?\n\n# add code here\n\nExercise 3: Which ZIP code had the most samples drawn? Hint: See the help for count.\n\n# add code here"
  },
  {
    "objectID": "ae/ae-02-flint.html#measures-of-central-tendency",
    "href": "ae/ae-02-flint.html#measures-of-central-tendency",
    "title": "Exploring Flint’s water data",
    "section": "Measures of central tendency",
    "text": "Measures of central tendency\n\nmean\nmedian\nmode"
  },
  {
    "objectID": "ae/ae-02-flint.html#measures-of-spread",
    "href": "ae/ae-02-flint.html#measures-of-spread",
    "title": "Exploring Flint’s water data",
    "section": "Measures of spread",
    "text": "Measures of spread\n\nvariance\nstandard deviation\nrange\nquartiles\ninter-quartile range (IQR)"
  },
  {
    "objectID": "ae/ae-02-flint.html#order-statistics",
    "href": "ae/ae-02-flint.html#order-statistics",
    "title": "Exploring Flint’s water data",
    "section": "Order statistics",
    "text": "Order statistics\n\nquantiles\nminimum (0 percentile)\nmedian (50th percentile)\nmaximum (100 percentile)\n\n… and any other arbitrary function of the data you can come up with!\nExercise 4: Compute each of these statistics for lead ppb.\n\n# add code here"
  },
  {
    "objectID": "ae/ae-02-flint.html#histograms",
    "href": "ae/ae-02-flint.html#histograms",
    "title": "Exploring Flint’s water data",
    "section": "Histograms",
    "text": "Histograms\nLet’s take a look at the distribution of lead content in homes in Flint, MI.\n\nggplot(flint, aes(x = lead)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nWe can make this plot look nicer/more useful by adjusting the number of bins and zooming into the x-axis.\n\nggplot(flint, aes(x = lead)) +\n  geom_histogram(bins = 50) +\n  coord_cartesian(xlim = c(0, 100))\n\n\n\n\nLet’s visualize some of our summary statistics on the plot.\nExercise 5: Add a new layer, geom_vline(xintercept = __, color = \"red\"), to the histogram below, filling in the blank with the mean.\n\nggplot(flint, aes(x = lead)) + \n  geom_histogram(bins = 50) + \n  coord_cartesian(xlim = c(0, 100))\n\n\n\n\nExercise 6: Add one more layer which overlays the median, in a different color.\n\n# add code here"
  },
  {
    "objectID": "ae/ae-02-flint.html#box-plots",
    "href": "ae/ae-02-flint.html#box-plots",
    "title": "Exploring Flint’s water data",
    "section": "Box plots",
    "text": "Box plots\nNext, let’s narrow our focus to the zip codes 48503, 48504, 48505, 48506, and 48507 and observations with lead values less than 1,000 ppb.\n\nflint_focus &lt;- flint |&gt;\n  filter(zip %in% 48503:48507 & lead &lt; 1000)\n\nExercise 7: Below are side-by-side box plots for the three flushing times in each of the five zip codes we considered. Add x and y labels; add a title by inserting title = \"title_name\" inside the labs() function.\n\nggplot(data = flint_focus, aes(y = factor(zip), x = lead)) +\n  geom_boxplot(aes(fill = factor(draw))) +\n  labs(x = \"___\", y = \"___\", fill = \"Flushing time\") +\n  scale_fill_discrete(\n    breaks = c(\"first\", \"second\", \"third\"),\n    labels = c(\"0 (sec)\", \"45 (sec)\", \"120 (sec)\")\n  )\n\n\n\n\nExercise 8: Add labels for x, y, a title, and subtitle to the code below to update the corresponding plot.\n\nggplot(data = flint_focus, aes(y = factor(zip), x = lead)) +\n  geom_boxplot(aes(fill = factor(draw))) + \n  labs(\n    x = \"___\", y = \"___\", fill = \"Flushing time\",\n    title = \"___\",\n    subtitle = \"___\"\n    ) +\n  scale_fill_discrete(\n    breaks = c(\"first\", \"second\", \"third\"),\n    labels = c(\"0 (sec)\", \"45 (sec)\", \"120 (sec)\")\n  ) +\n  coord_cartesian(xlim = c(0, 50)) +\n  theme_bw()\n\n\n\n\nExercise 9: What is the difference between the two plots? What are the advantages and disadvantages to each plot?\n[Add your answer here]"
  },
  {
    "objectID": "ae/ae-05-hotels-sa.html",
    "href": "ae/ae-05-hotels-sa.html",
    "title": "Grammar of data wrangling",
    "section": "",
    "text": "These are suggested answers to the application exercise. They may differ slightly from the code we developed in class and may not be complete. They’re provided after class to help review the application activity, but are not an alternative to working on the exercise and actively participating in class.\n\n\n\n\nlibrary(tidyverse)\nlibrary(scales)\n\nhotels &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n\nRecreate the visualization from the slides.\n\nhotels |&gt;\n  mutate(\n    arrival_date = paste(arrival_date_year, arrival_date_month, arrival_date_day_of_month),\n    arrival_date = ymd(arrival_date)\n    ) |&gt;\n  group_by(hotel, arrival_date) |&gt;\n  summarise(mean_adr = mean(adr), .groups = \"drop\") |&gt;\n  ggplot(aes(x = arrival_date, y = mean_adr, group = hotel, color = hotel)) +\n  geom_line() +\n  scale_color_manual(values = c(\"cornsilk4\", \"deepskyblue3\")) +\n  scale_y_continuous(labels = label_dollar()) +\n  labs(\n    x = \"Arrival date\",\n    y = \"Mean average\\ndaily rate (USD)\",\n    color = NULL,\n    title = \"Cost of daily hotel stay\",\n    subtitle = \"July 2015 to August 2017\",\n    caption = \"Source: Antonio, Almeida and Nunes (2019) | TidyTuesday\"\n  ) +\n  theme_minimal() +\n  theme(legend.position = c(0.15, 0.9))"
  },
  {
    "objectID": "ae/ae-04-sat.html",
    "href": "ae/ae-04-sat.html",
    "title": "Visualizing data and investigating relationships",
    "section": "",
    "text": "Go to the course GitHub organization to get started."
  },
  {
    "objectID": "ae/ae-04-sat.html#single-variable",
    "href": "ae/ae-04-sat.html#single-variable",
    "title": "Visualizing data and investigating relationships",
    "section": "Single variable",
    "text": "Single variable\nAnalyzing the a single variable is called univariate analysis.\nCreate visualizations of the distribution of average SAT scores, total.\n\nMake a histogram. Set an appropriate binwidth.\n\n\n# add code here\n\n\nMake a boxplot.\n\n\n# add code here\n\n\nMake a density plot.\n\n\n# add code here\n\n\nBased on these, determine if each of the following statements about the shape of the distribution is true or false.\n\nThe distribution of average SAT scores in 2010 is right skewed. ___\nThe distribution of average SAT scores in 2010 is unimodal. ___"
  },
  {
    "objectID": "ae/ae-04-sat.html#two-variables",
    "href": "ae/ae-04-sat.html#two-variables",
    "title": "Visualizing data and investigating relationships",
    "section": "Two variables",
    "text": "Two variables\nAnalyzing the relationship between two variables is called bivariate analysis.\n\nWhat would you expect the relationship between average SAT scores (total) and average teacher salaries (salary) to look like? What type of plot would you use to visualize this relationship? Create the plot below.\n\nAdd your answer here.\n\n# add code here\n\n\nLurking in the background, however, is another important factor. The percentage of students who take the SAT in each state varies dramatically between states. First, let’s visualize the distribution of this variable, sat_pct.\n\nAdd your response here.\n\n# add code here\n\n\nLet’s label states with low SAT participation \"Low\" and the others \"High\". For the cutoff point, let’s use the median participation level.\n\nAdd your response here.\n\n# add code here"
  },
  {
    "objectID": "ae/ae-04-sat.html#multiple-variables",
    "href": "ae/ae-04-sat.html#multiple-variables",
    "title": "Visualizing data and investigating relationships",
    "section": "Multiple variables",
    "text": "Multiple variables\n\nRecreate the scatterplot of average SAT scores, this time coloring each state based on whether they had low or high participation in the SAT. Describe the relationship between SAT scores and teacher salaries, when conditioning on SAT participation.\n\n\n# add code here\n\n\nFill in the blanks below.\n\nAmong all states, salaries and SAT scores are ___ associated.\nAmong states with a low percentage taking the SAT, teacher salaries and SAT scores are ___ associated.\nAmong states with a high percentage taking the SAT, teacher salaries and SAT scores are ___ associated.\n\n\nThis phenomenon is called Simpson’s paradox – a trend appears in subsets of the data, but disappears or reverses when the subsets are combined. The paradox can be resolved when confounding variables and causal relations are appropriately addressed in the analysis. In the above example, the confounding variable is SAT participation rate.\n\nImprove the visual display of the plot you just created.\n\n\n# add code here"
  },
  {
    "objectID": "ae/ae-08-hotels.html",
    "href": "ae/ae-08-hotels.html",
    "title": "Hotels, types, classes",
    "section": "",
    "text": "We will use the following two packages in this application exercise.\n\ntidyverse: For data import, wrangling, and visualization.\nskimr: For summarizing the entire data frame at once.\nscales: For better axis labels.\n\n\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(scales)"
  },
  {
    "objectID": "ae/ae-08-hotels.html#packages",
    "href": "ae/ae-08-hotels.html#packages",
    "title": "Hotels, types, classes",
    "section": "",
    "text": "We will use the following two packages in this application exercise.\n\ntidyverse: For data import, wrangling, and visualization.\nskimr: For summarizing the entire data frame at once.\nscales: For better axis labels.\n\n\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(scales)"
  },
  {
    "objectID": "ae/ae-08-hotels.html#type-coercion",
    "href": "ae/ae-08-hotels.html#type-coercion",
    "title": "Hotels, types, classes",
    "section": "Type coercion",
    "text": "Type coercion\n\nDemo: Determine the type of the following vector. And then, change the type to numeric.\n\nx &lt;- c(\"1\", \"2\", \"3\")\ntypeof(x)\n\n[1] \"character\"\n\nas.numeric(x)\n\n[1] 1 2 3\n\n\nDemo: Once again, determine the type of the following vector. And then, change the type to numeric. What’s different than the previous exercise?\n\ny &lt;- c(\"a\", \"b\", \"c\")\n\n# add code here\n\nDemo: Once again, determine the type of the following vector. And then, change the type to numeric. What’s different than the previous exercise?\n\nz &lt;- c(\"1\", \"2\", \"three\")\n\n# add code here\n\nDemo: Suppose you conducted a survey where you asked people how many cars their household owns collectively. And the answers are as follows:\n\nsurvey_results &lt;- tibble(cars = c(1, 2, \"three\"))\nsurvey_results\n\n# A tibble: 3 × 1\n  cars \n  &lt;chr&gt;\n1 1    \n2 2    \n3 three\n\n\nThis is annoying because of that third survey taker who just had to go and type out the number instead of providing as a numeric value. So now you need to update the cars variable to be numeric. You do the following\n\nsurvey_results |&gt;\n  mutate(cars = as.numeric(cars))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `cars = as.numeric(cars)`.\nCaused by warning:\n! NAs introduced by coercion\n\n\n# A tibble: 3 × 1\n   cars\n  &lt;dbl&gt;\n1     1\n2     2\n3    NA\n\n\nAnd now things are even more annoying because you get a warning NAs introduced by coercion that happened while computing cars = as.numeric(cars) and the response from the third survey taker is now an NA (you lost their data). Fix your mutate() call to avoid this warning.\n\n# add code here\n\nYour turn (8 minutes): First, guess the type of the vector. Then, check if you guessed right. I’ve done the first one for you, you’ll see that it’s helpful to check the type of each element of the vector first.\n\nc(1, 1L, \"C\")\n\nv1 &lt;- c(1, 1L, \"C\")\n\n# to help you guess\ntypeof(1)\n\n[1] \"double\"\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(\"C\")\n\n[1] \"character\"\n\n# to check after you guess\ntypeof(v1)\n\n[1] \"character\"\n\n\nc(1L / 0, \"A\")\n\nv2 &lt;- c(1L / 0, \"A\")\n\n# to help you guess\n\n# to check after you guess\n\nc(1:3, 5)\n\nv3 &lt;- c(1:3, 5)\n\n# to help you guess\n\n# to check after you guess\n\nc(3, \"3+\")\n\nv4 &lt;- c(3, \"3+\")\n\n# to help you guess\n\n# to check after you guess\n\nc(NA, TRUE)\n\nv5 &lt;- c(NA, TRUE)\n\n# to help you guess\n\n# to check after you guess"
  },
  {
    "objectID": "ae/ae-08-hotels.html#hotel-bookings",
    "href": "ae/ae-08-hotels.html#hotel-bookings",
    "title": "Hotels, types, classes",
    "section": "Hotel bookings",
    "text": "Hotel bookings\n\n# From TidyTuesday: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md\n\nhotels &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n\nQuestion: Take a look at the the following visualization. How are the months ordered? What would be a better order?\nAdd your response here.\n\n\n\n\n\nDemo: Reorder the months on the x-axis (levels of arrival_date_month) in a way that makes more sense. You will want to use a function from the forcats package, see https://forcats.tidyverse.org/reference/index.html for inspiration and help.\n\n# add code here\n\nStretch goal: If you finish the above task before time is up, change the y-axis label so the values are shown with dollar signs, e.g. $80 instead of 80. You will want to use a function from the scales package, see https://scales.r-lib.org/reference/index.html for inspiration and help.\n\n# add code here"
  },
  {
    "objectID": "ae/ae-07-majors-sa.html",
    "href": "ae/ae-07-majors-sa.html",
    "title": "Pivoting StatSci Majors",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization.\n\n\n\n\n\n\nYour turn (3 minutes): Take a close look at the plot and describe what it shows in 2-3 sentences.\n\nAdd your response here."
  },
  {
    "objectID": "ae/ae-07-majors-sa.html#goal",
    "href": "ae/ae-07-majors-sa.html#goal",
    "title": "Pivoting StatSci Majors",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization.\n\n\n\n\n\n\nYour turn (3 minutes): Take a close look at the plot and describe what it shows in 2-3 sentences.\n\nAdd your response here."
  },
  {
    "objectID": "ae/ae-07-majors-sa.html#data",
    "href": "ae/ae-07-majors-sa.html#data",
    "title": "Pivoting StatSci Majors",
    "section": "Data",
    "text": "Data\nThe data come from the Office of the University Registrar. They make the data available as a table that you can download as a PDF, but I’ve put the data exported in a CSV file for you. Let’s load that in.\n\nlibrary(tidyverse)\n\nstatsci &lt;- read_csv(\"data/statsci.csv\")\n\nAnd let’s take a look at the data.\n\nstatsci\n\n# A tibble: 4 × 12\n  degree   `2011` `2012` `2013` `2014` `2015` `2016` `2017` `2018` `2019` `2020`\n  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 Statist…     NA      1     NA     NA      4      4      1     NA     NA      1\n2 Statist…      2      2      4      1      3      6      3      4      4      1\n3 Statist…      2      6      1     NA      5      6      6      8      8     17\n4 Statist…      5      9      4     13     10     17     24     21     26     27\n# ℹ 1 more variable: `2021` &lt;dbl&gt;\n\n\nThe dataset has 4 rows and 12 columns. The first column (variable) is the degree, and there are 4 possible degrees: BS (Bachelor of Science), BS2 (Bachelor of Science, 2nd major), AB (Bachelor of Arts), AB2 (Bachelor of Arts, 2nd major). The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2021.\n\nYour turn (4 minutes): Take a look at the plot we aim to make and sketch the data frame we need to make the plot. Determine what each row and each column of the data frame should be. Hint: We need data to be in columns to map to aesthetic elements of the plot.\n\nColumns: year, n , degree_type\nRows: Combination of year and degree type"
  },
  {
    "objectID": "ae/ae-07-majors-sa.html#pivoting",
    "href": "ae/ae-07-majors-sa.html#pivoting",
    "title": "Pivoting StatSci Majors",
    "section": "Pivoting",
    "text": "Pivoting\n\nDemo: Pivot the statsci data frame longer such that each row represents a degree type / year combination and year and number of graduates for that year are columns in the data frame.\n\n\nstatsci |&gt;\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    values_to = \"n\"\n  )\n\n# A tibble: 44 × 3\n   degree                    year      n\n   &lt;chr&gt;                     &lt;chr&gt; &lt;dbl&gt;\n 1 Statistical Science (AB2) 2011     NA\n 2 Statistical Science (AB2) 2012      1\n 3 Statistical Science (AB2) 2013     NA\n 4 Statistical Science (AB2) 2014     NA\n 5 Statistical Science (AB2) 2015      4\n 6 Statistical Science (AB2) 2016      4\n 7 Statistical Science (AB2) 2017      1\n 8 Statistical Science (AB2) 2018     NA\n 9 Statistical Science (AB2) 2019     NA\n10 Statistical Science (AB2) 2020      1\n# ℹ 34 more rows\n\n\n\nQuestion: What is the type of the year variable? Why? What should it be?\n\nIt’s a character (chr) variable since the information came from the columns of the original data frame and R cannot know that these character strings represent years. The variable type should be numeric.\n\nDemo: Start over with pivoting, and this time also make sure year is a numerical variable in the resulting data frame.\n\n\nstatsci |&gt;\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  )\n\n# A tibble: 44 × 3\n   degree                     year     n\n   &lt;chr&gt;                     &lt;dbl&gt; &lt;dbl&gt;\n 1 Statistical Science (AB2)  2011    NA\n 2 Statistical Science (AB2)  2012     1\n 3 Statistical Science (AB2)  2013    NA\n 4 Statistical Science (AB2)  2014    NA\n 5 Statistical Science (AB2)  2015     4\n 6 Statistical Science (AB2)  2016     4\n 7 Statistical Science (AB2)  2017     1\n 8 Statistical Science (AB2)  2018    NA\n 9 Statistical Science (AB2)  2019    NA\n10 Statistical Science (AB2)  2020     1\n# ℹ 34 more rows\n\n\n\nQuestion: What does an NA mean in this context? Hint: The data come from the university registrar, and they have records on every single graduates, there shouldn’t be anything “unknown” to them about who graduated when.\n\nNAs should actually be 0s.\n\nDemo: Add on to your pipeline that you started with pivoting and convert NAs in n to 0s.\n\n\nstatsci |&gt;\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |&gt;\n  mutate(n = if_else(is.na(n), 0, n))\n\n# A tibble: 44 × 3\n   degree                     year     n\n   &lt;chr&gt;                     &lt;dbl&gt; &lt;dbl&gt;\n 1 Statistical Science (AB2)  2011     0\n 2 Statistical Science (AB2)  2012     1\n 3 Statistical Science (AB2)  2013     0\n 4 Statistical Science (AB2)  2014     0\n 5 Statistical Science (AB2)  2015     4\n 6 Statistical Science (AB2)  2016     4\n 7 Statistical Science (AB2)  2017     1\n 8 Statistical Science (AB2)  2018     0\n 9 Statistical Science (AB2)  2019     0\n10 Statistical Science (AB2)  2020     1\n# ℹ 34 more rows\n\n\n\nDemo: In our plot the degree types are BS, BS2, AB, and AB2. This information is in our dataset, in the degree column, but this column also has additional characters we don’t need. Create a new column called degree_type with levels BS, BS2, AB, and AB2 (in this order) based on degree. Do this by adding on to your pipeline from earlier.\n\n\nstatsci |&gt;\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |&gt;\n  mutate(n = if_else(is.na(n), 0, n)) |&gt;\n  separate(degree, sep = \" \\\\(\", into = c(\"major\", \"degree_type\")) |&gt;\n  mutate(\n    degree_type = str_remove(degree_type, \"\\\\)\"),\n    degree_type = fct_relevel(degree_type, \"BS\", \"BS2\", \"AB\", \"AB2\")\n    )\n\n# A tibble: 44 × 4\n   major               degree_type  year     n\n   &lt;chr&gt;               &lt;fct&gt;       &lt;dbl&gt; &lt;dbl&gt;\n 1 Statistical Science AB2          2011     0\n 2 Statistical Science AB2          2012     1\n 3 Statistical Science AB2          2013     0\n 4 Statistical Science AB2          2014     0\n 5 Statistical Science AB2          2015     4\n 6 Statistical Science AB2          2016     4\n 7 Statistical Science AB2          2017     1\n 8 Statistical Science AB2          2018     0\n 9 Statistical Science AB2          2019     0\n10 Statistical Science AB2          2020     1\n# ℹ 34 more rows\n\n\n\nYour turn (5 minutes): Now we start making our plot, but let’s not get too fancy right away. Create the following plot, which will serve as the “first draft” on the way to our Goal. Do this by adding on to your pipeline from earlier.\n\n\n\n\n\n\n\nstatsci |&gt;\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |&gt;\n  mutate(n = if_else(is.na(n), 0, n)) |&gt;\n  separate(degree, sep = \" \\\\(\", into = c(\"major\", \"degree_type\")) |&gt;\n  mutate(\n    degree_type = str_remove(degree_type, \"\\\\)\"),\n    degree_type = fct_relevel(degree_type, \"BS\", \"BS2\", \"AB\", \"AB2\")\n    ) |&gt;\n  ggplot(aes(x = year, y = n, color = degree_type)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\nYour turn (4 minutes): What aspects of the plot need to be updated to go from the draft you created above to the Goal plot at the beginning of this application exercise.\n\nx-axis scale: need to go from 2011 to 2021 in increments of 2 years\nline colors\naxis labels: title, subtitle, x, y, caption\ntheme\nlegend position and border\n\nDemo: Update x-axis scale such that the years displayed go from 2011 to 2021 in increments of 2 years. Do this by adding on to your pipeline from earlier.\n\n\nstatsci |&gt;\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |&gt;\n  mutate(n = if_else(is.na(n), 0, n)) |&gt;\n  separate(degree, sep = \" \\\\(\", into = c(\"major\", \"degree_type\")) |&gt;\n  mutate(\n    degree_type = str_remove(degree_type, \"\\\\)\"),\n    degree_type = fct_relevel(degree_type, \"BS\", \"BS2\", \"AB\", \"AB2\")\n    ) |&gt;\n  ggplot(aes(x = year, y = n, color = degree_type)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(breaks = seq(2011, 2021, 2))\n\n\n\n\n\nDemo: Update line colors using the following level / color assignments. Once again, do this by adding on to your pipeline from earlier.\n\n“BS” = “cadetblue4”\n“BS2” = “cadetblue3”\n“AB” = “lightgoldenrod4”\n“AB2” = “lightgoldenrod3”\n\n\n\nstatsci |&gt;\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |&gt;\n  mutate(n = if_else(is.na(n), 0, n)) |&gt;\n  separate(degree, sep = \" \\\\(\", into = c(\"major\", \"degree_type\")) |&gt;\n  mutate(\n    degree_type = str_remove(degree_type, \"\\\\)\"),\n    degree_type = fct_relevel(degree_type, \"BS\", \"BS2\", \"AB\", \"AB2\")\n    ) |&gt;\n  ggplot(aes(x = year, y = n, color = degree_type)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(breaks = seq(2011, 2021, 2)) +\n  scale_color_manual(\n    values = c(\"BS\" = \"cadetblue4\", \n               \"BS2\" = \"cadetblue3\", \n               \"AB\" = \"lightgoldenrod4\", \n               \"AB2\" = \"lightgoldenrod3\"))\n\n\n\n\n\nYour turn (4 minutes): Update the plot labels (title, subtitle, x, y, and caption) and use theme_minimal(). Once again, do this by adding on to your pipeline from earlier.\n\n\nstatsci |&gt;\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |&gt;\n  mutate(n = if_else(is.na(n), 0, n)) |&gt;\n  separate(degree, sep = \" \\\\(\", into = c(\"major\", \"degree_type\")) |&gt;\n  mutate(\n    degree_type = str_remove(degree_type, \"\\\\)\"),\n    degree_type = fct_relevel(degree_type, \"BS\", \"BS2\", \"AB\", \"AB2\")\n    ) |&gt;\n  ggplot(aes(x = year, y = n, color = degree_type)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(breaks = seq(2011, 2021, 2)) +\n  scale_color_manual(\n    values = c(\"BS\" = \"cadetblue4\",\n               \"BS2\" = \"cadetblue3\",\n               \"AB\" = \"lightgoldenrod4\",\n               \"AB2\" = \"lightgoldenrod3\")) +\n  labs(\n    x = \"Graduation year\",\n    y = \"Number of majors graduating\",\n    color = \"Degree type\",\n    title = \"Statistical Science majors over the years\",\n    subtitle = \"Academic years 2011 - 2021\",\n    caption = \"Source: Office of the University Registrar\\nhttps://registrar.duke.edu/registration/enrollment-statistics\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nDemo: Finally, adding to your pipeline you’ve developed so far, move the legend into the plot, make its background white, and its border gray. Set fig-width: 7 and fig-height: 5 for your plot in the chunk options.\n\n\nstatsci |&gt;\n  pivot_longer(\n    cols = -degree,\n    names_to = \"year\",\n    names_transform = as.numeric,\n    values_to = \"n\"\n  ) |&gt;\n  mutate(n = if_else(is.na(n), 0, n)) |&gt;\n  separate(degree, sep = \" \\\\(\", into = c(\"major\", \"degree_type\")) |&gt;\n  mutate(\n    degree_type = str_remove(degree_type, \"\\\\)\"),\n    degree_type = fct_relevel(degree_type, \"BS\", \"BS2\", \"AB\", \"AB2\")\n    ) |&gt;\n  ggplot(aes(x = year, y = n, color = degree_type)) +\n  geom_point() +\n  geom_line() +\n  scale_x_continuous(breaks = seq(2011, 2021, 2)) +\n  scale_color_manual(\n    values = c(\"BS\" = \"cadetblue4\",\n               \"BS2\" = \"cadetblue3\",\n               \"AB\" = \"lightgoldenrod4\",\n               \"AB2\" = \"lightgoldenrod3\")) +\n  labs(\n    x = \"Graduation year\",\n    y = \"Number of majors graduating\",\n    color = \"Degree type\",\n    title = \"Statistical Science majors over the years\",\n    subtitle = \"Academic years 2011 - 2021\",\n    caption = \"Source: Office of the University Registrar\\nhttps://registrar.duke.edu/registration/enrollment-statistics\"\n  ) +\n  theme_minimal() +\n  theme(\n    legend.position = c(0.2, 0.8),\n    legend.background = element_rect(fill = \"white\", color = \"gray\")\n    )"
  },
  {
    "objectID": "ae/ae-08-hotels-sa.html",
    "href": "ae/ae-08-hotels-sa.html",
    "title": "Hotels, types, classes",
    "section": "",
    "text": "We will use the following two packages in this application exercise.\n\ntidyverse: For data import, wrangling, and visualization.\nskimr: For summarizing the entire data frame at once.\nscales: For better axis labels.\n\n\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(scales)"
  },
  {
    "objectID": "ae/ae-08-hotels-sa.html#packages",
    "href": "ae/ae-08-hotels-sa.html#packages",
    "title": "Hotels, types, classes",
    "section": "",
    "text": "We will use the following two packages in this application exercise.\n\ntidyverse: For data import, wrangling, and visualization.\nskimr: For summarizing the entire data frame at once.\nscales: For better axis labels.\n\n\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(scales)"
  },
  {
    "objectID": "ae/ae-08-hotels-sa.html#type-coercion",
    "href": "ae/ae-08-hotels-sa.html#type-coercion",
    "title": "Hotels, types, classes",
    "section": "Type coercion",
    "text": "Type coercion\n\nDemo: Determine the type of the following vector. And then, change the type to numeric.\n\nx &lt;- c(\"1\", \"2\", \"3\")\ntypeof(x)\n\n[1] \"character\"\n\nas.numeric(x)\n\n[1] 1 2 3\n\n\nDemo: Once again, determine the type of the following vector. And then, change the type to numeric. What’s different than the previous exercise?\n\ny &lt;- c(\"a\", \"b\", \"c\")\ntypeof(y)\n\n[1] \"character\"\n\nas.numeric(y)\n\nWarning: NAs introduced by coercion\n\n\n[1] NA NA NA\n\n\nDemo: Once again, determine the type of the following vector. And then, change the type to numeric. What’s different than the previous exercise?\n\nz &lt;- c(\"1\", \"2\", \"three\")\ntypeof(z)\n\n[1] \"character\"\n\nas.numeric(z)\n\nWarning: NAs introduced by coercion\n\n\n[1]  1  2 NA\n\n\nDemo: Suppose you conducted a survey where you asked people how many cars their household owns collectively. And the answers are as follows:\n\nsurvey_results &lt;- tibble(cars = c(1, 2, \"three\"))\nsurvey_results\n\n# A tibble: 3 × 1\n  cars \n  &lt;chr&gt;\n1 1    \n2 2    \n3 three\n\n\nThis is annoying because of that third survey taker who just had to go and type out the number instead of providing as a numeric value. So now you need to update the cars variable to be numeric. You do the following\n\nsurvey_results |&gt;\n  mutate(cars = as.numeric(cars))\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `cars = as.numeric(cars)`.\nCaused by warning:\n! NAs introduced by coercion\n\n\n# A tibble: 3 × 1\n   cars\n  &lt;dbl&gt;\n1     1\n2     2\n3    NA\n\n\nAnd now things are even more annoying because you get a warning NAs introduced by coercion that happened while computing cars = as.numeric(cars) and the response from the third survey taker is now an NA (you lost their data). Fix your mutate() call to avoid this warning.\n\nsurvey_results |&gt;\n  mutate(\n    cars = if_else(cars == \"three\", \"3\", cars),\n    cars = as.numeric(cars)\n    )\n\n# A tibble: 3 × 1\n   cars\n  &lt;dbl&gt;\n1     1\n2     2\n3     3\n\n\nYour turn: First, guess the type of the vector. Then, check if you guessed right. I’ve done the first one for you, you’ll see that it’s helpful to check the type of each element of the vector first.\n\nc(1, 1L, \"C\")\n\nv1 &lt;- c(1, 1L, \"C\")\n\n# to help you guess\ntypeof(1)\n\n[1] \"double\"\n\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(\"C\")\n\n[1] \"character\"\n\n# to check after you guess\ntypeof(v1)\n\n[1] \"character\"\n\n\nc(1L / 0, \"A\")\n\nv2 &lt;- c(1L / 0, \"A\")\n\n# to help you guess\ntypeof(1L)\n\n[1] \"integer\"\n\ntypeof(0)\n\n[1] \"double\"\n\ntypeof(1L / 0)\n\n[1] \"double\"\n\ntypeof(\"A\")\n\n[1] \"character\"\n\n# to check after you guess\ntypeof(v2)\n\n[1] \"character\"\n\n\nc(1:3, 5)\n\nv3 &lt;- c(1:3, 5)\n\n# to help you guess\ntypeof(1:3)\n\n[1] \"integer\"\n\ntypeof(5)\n\n[1] \"double\"\n\n# to check after you guess\ntypeof(v3)\n\n[1] \"double\"\n\n\nc(3, \"3+\")\n\nv4 &lt;- c(3, \"3+\")\n\n# to help you guess\ntypeof(3)\n\n[1] \"double\"\n\ntypeof(\"3+\")\n\n[1] \"character\"\n\n# to check after you guess\ntypeof(v4)\n\n[1] \"character\"\n\n\nc(NA, TRUE)\n\nv5 &lt;- c(NA, TRUE)\n\n# to help you guess\ntypeof(NA)\n\n[1] \"logical\"\n\ntypeof(TRUE)\n\n[1] \"logical\"\n\n# to check after you guess\ntypeof(v5)\n\n[1] \"logical\""
  },
  {
    "objectID": "ae/ae-08-hotels-sa.html#hotel-bookings",
    "href": "ae/ae-08-hotels-sa.html#hotel-bookings",
    "title": "Hotels, types, classes",
    "section": "Hotel bookings",
    "text": "Hotel bookings\n\n# From TidyTuesday: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md\n\nhotels &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n\nQuestion: Take a look at the the following visualization. How are the months ordered? What would be a better order?\n\n\n\n\n\nDemo: Reorder the months on the x-axis (levels of arrival_date_month) in a way that makes more sense. You will want to use a function from the forcats package, see https://forcats.tidyverse.org/reference/index.html for inspiration and help.\n\nhotels |&gt;\n  group_by(hotel, arrival_date_month) |&gt;   # group by hotel type and arrival month\n  summarise(mean_adr = mean(adr), .groups = \"drop\") |&gt;       # calculate mean adr for each group\n  ggplot(aes(\n    x = arrival_date_month,                 # x-axis = arrival_date_month\n    y = mean_adr,                           # y-axis = mean_adr calculated above\n    group = hotel,                          # group lines by hotel type\n    color = hotel)                          # and color by hotel type\n  ) +\n  geom_line() +                             # use lines to represent data\n  theme_minimal() +                         # use a minimal theme\n  labs(\n    x = \"Arrival month\",                 # customize labels\n    y = \"Mean ADR (average daily rate)\",\n    title = \"Comparison of resort and city hotel prices across months\",\n    subtitle = \"Resort hotel prices soar in the summer while ciry hotel prices remain relatively constant throughout the year\",\n    color = \"Hotel type\"\n  )\n\n\n\n\nStretch goal: If you finish the above task before time is up, change the y-axis label so the values are shown with dollar signs, e.g. $80 instead of 80. You will want to use a function from the scales package, see https://scales.r-lib.org/reference/index.html for inspiration and help.\n\nhotels |&gt;\n  group_by(hotel, arrival_date_month) |&gt;   # group by hotel type and arrival month\n  summarise(mean_adr = mean(adr), .groups = \"drop\") |&gt;       # calculate mean adr for each group\n  ggplot(aes(\n    x = arrival_date_month,                 # x-axis = arrival_date_month\n    y = mean_adr,                           # y-axis = mean_adr calculated above\n    group = hotel,                          # group lines by hotel type\n    color = hotel)                          # and color by hotel type\n  ) +\n  geom_line() +                             # use lines to represent data\n  theme_minimal() +                         # use a minimal theme\n  labs(\n    x = \"Arrival month\",                    # customize labels\n    y = \"Mean ADR (average daily rate)\",\n    title = \"Comparison of resort and city hotel prices across months\",\n    subtitle = \"Resort hotel prices soar in the summer while ciry hotel prices remain relatively constant throughout the year\",\n    color = \"Hotel type\"\n  ) +\n  scale_y_continuous(labels = label_dollar())"
  },
  {
    "objectID": "ae/ae-10-more-fish.html",
    "href": "ae/ae-10-more-fish.html",
    "title": "Modelling fish weights with multiple predictors",
    "section": "",
    "text": "For this application exercise, we will continue to work with data on fish. The dataset we will use, called fish, is on two common fish species in fish market sales. We’re going to investigate the relationship between the weights and heights of fish, and later take into consider species as well.\n\nlibrary(tidyverse)\nlibrary(tidymodels)\n\nfish &lt;- read_csv(\"data/fish.csv\")\n\nThe data dictionary is below:\n\n\n\nvariable\ndescription\n\n\n\n\nspecies\nSpecies name of fish\n\n\nweight\nWeight, in grams\n\n\nlength_vertical\nVertical length, in cm\n\n\nlength_diagonal\nDiagonal length, in cm\n\n\nlength_cross\nCross length, in cm\n\n\nheight\nHeight, in cm\n\n\nwidth\nDiagonal width, in cm\n\n\n\n\nInterpreting multiple regression models\nIn the previous application exercise you saw that the model predicting weight from height and species was a better fit. In this section we will interpret the coefficients of this model.\n\n# add code here\n\n\nWhat does each row in the model output represent?\n\nAdd response here.\n\nInterpret the intercept and the slopes.\n\nAdd response here.\n\nWrite the model.\n\nAdd response here.\n\n\nAdditive vs. interaction models\n\nRun the two code chunks below and create two separate plots. How are the two plots different than each other? Which plot does the model we fit above represent?\n\n\n# add code here\n\n\n# add code here\n\n\nLook back at Plot B. What assumption does the additive model make about the slopes between flipper length and body mass for each of the three islands?\n\nAdd response here.\n\n\nChoosing models\nRule of thumb: Occam’s Razor - Don’t overcomplicate the situation! We prefer the simplest best model.\n\nChoose a model using this principle.\n\n\n# add code here\n\nAdd response here.\n\nWhat is R-squared? What is adjusted R-squared?\n\nAdd response here."
  },
  {
    "objectID": "ae/ae-07-majors.html",
    "href": "ae/ae-07-majors.html",
    "title": "AE 07: Pivoting StatSci Majors",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization.\n\n\n\n\n\n\nYour turn (3 minutes): Take a close look at the plot and describe what it shows in 2-3 sentences.\n\nAdd your response here."
  },
  {
    "objectID": "ae/ae-07-majors.html#goal",
    "href": "ae/ae-07-majors.html#goal",
    "title": "AE 07: Pivoting StatSci Majors",
    "section": "",
    "text": "Our ultimate goal in this application exercise is to make the following data visualization.\n\n\n\n\n\n\nYour turn (3 minutes): Take a close look at the plot and describe what it shows in 2-3 sentences.\n\nAdd your response here."
  },
  {
    "objectID": "ae/ae-07-majors.html#data",
    "href": "ae/ae-07-majors.html#data",
    "title": "AE 07: Pivoting StatSci Majors",
    "section": "Data",
    "text": "Data\nThe data come from the Office of the University Registrar. They make the data available as a table that you can download as a PDF, but I’ve put the data exported in a CSV file for you. Let’s load that in.\n\nlibrary(tidyverse)\n\nstatsci &lt;- read_csv(\"data/statsci.csv\")\n\nAnd let’s take a look at the data.\n\nstatsci\n\n# A tibble: 4 × 12\n  degree   `2011` `2012` `2013` `2014` `2015` `2016` `2017` `2018` `2019` `2020`\n  &lt;chr&gt;     &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 Statist…     NA      1     NA     NA      4      4      1     NA     NA      1\n2 Statist…      2      2      4      1      3      6      3      4      4      1\n3 Statist…      2      6      1     NA      5      6      6      8      8     17\n4 Statist…      5      9      4     13     10     17     24     21     26     27\n# ℹ 1 more variable: `2021` &lt;dbl&gt;\n\n\nThe dataset has 4 rows and 12 columns. The first column (variable) is the degree, and there are 4 possible degrees: BS (Bachelor of Science), BS2 (Bachelor of Science, 2nd major), AB (Bachelor of Arts), AB2 (Bachelor of Arts, 2nd major). The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2021.\n\nYour turn (4 minutes): Take a look at the plot we aim to make and sketch the data frame we need to make the plot. Determine what each row and each column of the data frame should be. Hint: We need data to be in columns to map to aesthetic elements of the plot.\n\nAdd your response here."
  },
  {
    "objectID": "ae/ae-07-majors.html#pivoting",
    "href": "ae/ae-07-majors.html#pivoting",
    "title": "AE 07: Pivoting StatSci Majors",
    "section": "Pivoting",
    "text": "Pivoting\n\nDemo: Pivot the statsci data frame longer such that each row represents a degree type / year combination and year and number of graduates for that year are columns in the data frame.\n\n\n# add your code here\n\n\nQuestion: What is the type of the year variable? Why? What should it be?\n\nAdd your response here.\n\nDemo: Start over with pivoting, and this time also make sure year is a numerical variable in the resulting data frame.\n\n\n# add your code here\n\n\nQuestion: What does an NA mean in this context? Hint: The data come from the university registrar, and they have records on every single graduates, there shouldn’t be anything “unknown” to them about who graduated when.\n\nAdd your response here.\n\nDemo: Add on to your pipeline that you started with pivoting and convert NAs in n to 0s.\n\n\n# add your code here\n\n\nDemo: In our plot the degree types are BS, BS2, AB, and AB2. This information is in our dataset, in the degree column, but this column also has additional characters we don’t need. Create a new column called degree_type with levels BS, BS2, AB, and AB2 (in this order) based on degree. Do this by adding on to your pipeline from earlier.\n\n\n# add your code here\n\n\nYour turn (5 minutes): Now we start making our plot, but let’s not get too fancy right away. Create the following plot, which will serve as the “first draft” on the way to our Goal. Do this by adding on to your pipeline from earlier.\n\n\n\n\n\n\n\n# add your code here\n\n\nYour turn (4 minutes): What aspects of the plot need to be updated to go from the draft you created above to the Goal plot at the beginning of this application exercise.\n\nAdd your response here.\n\nDemo: Update x-axis scale such that the years displayed go from 2011 to 2021 in increments of 2 years. Do this by adding on to your pipeline from earlier.\n\n\n# add your code here\n\n\nDemo: Update line colors using the following level / color assignments. Once again, do this by adding on to your pipeline from earlier.\n\n“BS” = “cadetblue4”\n“BS2” = “cadetblue3”\n“AB” = “lightgoldenrod4”\n“AB2” = “lightgoldenrod3”\n\n\n\n# add your code here\n\n\nYour turn (4 minutes): Update the plot labels (title, subtitle, x, y, and caption) and use theme_minimal(). Once again, do this by adding on to your pipeline from earlier.\n\n\n# add your code here\n\n\nDemo: Finally, adding to your pipeline you’ve developed so far, move the legend into the plot, make its background white, and its border gray. Set fig-width: 7 and fig-height: 5 for your plot in the chunk options.\n\n\n# add your code here"
  },
  {
    "objectID": "ae/ae-05-hotels.html",
    "href": "ae/ae-05-hotels.html",
    "title": "Grammar of data wrangling",
    "section": "",
    "text": "Go to the course GitHub organization to get started.\n\n\n\n\nlibrary(tidyverse)\nlibrary(scales)\n\nhotels &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n\nRecreate the visualization from the slides.\n\n# add code here"
  },
  {
    "objectID": "ae/ae-06-fisheries.html",
    "href": "ae/ae-06-fisheries.html",
    "title": "Joining fisheries",
    "section": "",
    "text": "Often instead of being provided the data you need for your analysis in a single data frame, you will need to bring information from multiple datasets together into a data frame yourself. These datasets will be linked to each other via a column (usually an identifier, something that links the two datasets together) that you can use to join them together.\nThere are many possible types of joins. All have the format something_join(x, y).\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nx &lt;- tibble(\n  value = c(1, 2, 3),\n  xcol = c(\"x1\", \"x2\", \"x3\")\n  )\n\ny &lt;- tibble(\n  value = c(1, 2, 4),\n  ycol = c(\"y1\", \"y2\", \"y4\")\n  )\n\nx\n\n# A tibble: 3 × 2\n  value xcol \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\ny\n\n# A tibble: 3 × 2\n  value ycol \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y4   \n\n\nWe will demonstrate each of the joins on these small, toy datasets.\n\n\n\ninner_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 2 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n\n\n\n\n\n\nleft_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 3 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n\n\n\n\n\n\nright_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 3 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     4 &lt;NA&gt;  y4   \n\n\n\n\n\n\nfull_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 4 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n4     4 &lt;NA&gt;  y4   \n\n\n\n\n\n\nsemi_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 2 × 2\n  value xcol \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n\n\n\n\n\n\nanti_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 1 × 2\n  value xcol \n  &lt;dbl&gt; &lt;chr&gt;\n1     3 x3   \n\n\nQuestion: How do the join functions above know to join x and y by value? Hint: Examine the column names to find out.\n\nnames(x)\n\n[1] \"value\" \"xcol\" \n\nnames(y)\n\n[1] \"value\" \"ycol\""
  },
  {
    "objectID": "ae/ae-06-fisheries.html#working-with-multiple-data-frames",
    "href": "ae/ae-06-fisheries.html#working-with-multiple-data-frames",
    "title": "Joining fisheries",
    "section": "",
    "text": "Often instead of being provided the data you need for your analysis in a single data frame, you will need to bring information from multiple datasets together into a data frame yourself. These datasets will be linked to each other via a column (usually an identifier, something that links the two datasets together) that you can use to join them together.\nThere are many possible types of joins. All have the format something_join(x, y).\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nx &lt;- tibble(\n  value = c(1, 2, 3),\n  xcol = c(\"x1\", \"x2\", \"x3\")\n  )\n\ny &lt;- tibble(\n  value = c(1, 2, 4),\n  ycol = c(\"y1\", \"y2\", \"y4\")\n  )\n\nx\n\n# A tibble: 3 × 2\n  value xcol \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n3     3 x3   \n\ny\n\n# A tibble: 3 × 2\n  value ycol \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 y1   \n2     2 y2   \n3     4 y4   \n\n\nWe will demonstrate each of the joins on these small, toy datasets.\n\n\n\ninner_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 2 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n\n\n\n\n\n\nleft_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 3 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n\n\n\n\n\n\nright_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 3 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     4 &lt;NA&gt;  y4   \n\n\n\n\n\n\nfull_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 4 × 3\n  value xcol  ycol \n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    &lt;NA&gt; \n4     4 &lt;NA&gt;  y4   \n\n\n\n\n\n\nsemi_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 2 × 2\n  value xcol \n  &lt;dbl&gt; &lt;chr&gt;\n1     1 x1   \n2     2 x2   \n\n\n\n\n\n\nanti_join(x, y)\n\nJoining with `by = join_by(value)`\n\n\n# A tibble: 1 × 2\n  value xcol \n  &lt;dbl&gt; &lt;chr&gt;\n1     3 x3   \n\n\nQuestion: How do the join functions above know to join x and y by value? Hint: Examine the column names to find out.\n\nnames(x)\n\n[1] \"value\" \"xcol\" \n\nnames(y)\n\n[1] \"value\" \"ycol\""
  },
  {
    "objectID": "ae/ae-06-fisheries.html#global-aquaculture-production",
    "href": "ae/ae-06-fisheries.html#global-aquaculture-production",
    "title": "Joining fisheries",
    "section": "Global aquaculture production",
    "text": "Global aquaculture production\nThe Fisheries and Aquaculture Department of the Food and Agriculture Organization of the United Nations collects data on fisheries production of countries.\nOur goal is to create a visualization of the mean share of aquaculture by continent.\n\nlibrary(scales)\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nfisheries &lt;- read_csv(\"data/fisheries.csv\")\n\nRows: 82 Columns: 4\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): capture, aquaculture, total\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncontinents &lt;- read_csv(\"data/continents.csv\")\n\nRows: 245 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nLet’s start by looking at the fisheries data frame.\n\nglimpse(fisheries)\n\nRows: 82\nColumns: 4\n$ country     &lt;chr&gt; \"Angola\", \"Argentina\", \"Australia\", \"Bangladesh\", \"Brazil\"…\n$ capture     &lt;dbl&gt; 486490, 755226, 174629, 1674770, 705000, 629950, 233190, 8…\n$ aquaculture &lt;dbl&gt; 655, 3673, 96847, 2203554, 581230, 172500, 2315, 200765, 9…\n$ total       &lt;dbl&gt; 487145, 758899, 271476, 3878324, 1286230, 802450, 235505, …\n\n\nWe have the countries, but our goal is to make a visualization by continent. Let’s take a look at the continents data frame.\n\nglimpse(continents)\n\nRows: 245\nColumns: 2\n$ country   &lt;chr&gt; \"Afghanistan\", \"Åland Islands\", \"Albania\", \"Algeria\", \"Ameri…\n$ continent &lt;chr&gt; \"Asia\", \"Europe\", \"Europe\", \"Africa\", \"Oceania\", \"Europe\", \"…\n\n\n\nYour turn (2 minutes):\n\nWhich variable(s) will we use to join the fisheries and continents data frames?\nWe want to keep all rows and columns from fisheries and add a column for corresponding continents. Which join function should we use?\n\nDemo: Join the two data frames and name assign the joined data frame back to fisheries.\n\n\n# add code here\n\n\nDemo: Take a look at the updated fisheries data frame. There are some countries that were not in continents. First, identify which countries these are (they will have NA values for continent). Then, manually update the continent information for these countries using the case_when function. Finally, check that these updates have been made as intended and no countries are left without continent information.\n\n\n# add code here\n\n\nDemo: Add a new column to the fisheries data frame called aq_prop. We will calculate it as aquaculture / total. Save the resulting frame as fisheries.\n\n\n# add code here\n\n\nDemo: Calculate the mean aquaculture proportion (we’ll call it mean_aq_prop) for continents in the fisheries data using the summarize() function in dplyr. Note that the function for calculating the mean is mean() in R.\n\n\n# add code here\n\n\nYour turn (5 minutes): Now expand your calculations to also calculate the minimum and maximum aquaculture proportion for continents in the fisheries data. Note that the functions for calculating minimum and maximum in R are min() and max() respectively.\n\n\n# add code here \n\n\nDemo: Create a new data frame called fisheries_summary that calculates minimum, mean, and maximum aquaculture proportion for each continent in the fisheries data. Then, determine which continent has the largest value of max_ap?\n\n\n# add code here\n\n\nDemo: Take the fisheries_summary data frame and order the results in descending order of mean aquaculture proportion.\n\n\n# add code here\n\n\nDemo: Recreate the following plot using the data frame you have developed so far.\n\n\n\n\n\n\n\n# add code here\n\n\nYour turn (time permitting): Change the theme of the plot and make any other changes you would like to improve it.\n\n\n# add your code here"
  },
  {
    "objectID": "ae/ae-10-more-fish-sa.html",
    "href": "ae/ae-10-more-fish-sa.html",
    "title": "Modelling fish weights with multiple predictors",
    "section": "",
    "text": "For this application exercise, we will continue to work with data on fish. The dataset we will use, called fish, is on two common fish species in fish market sales. We’re going to investigate the relationship between the weights and heights of fish, and later take into consider species as well.\n\nlibrary(tidyverse)\nlibrary(tidymodels)\n\nfish &lt;- read_csv(\"data/fish.csv\")\n\nThe data dictionary is below:\n\n\n\nvariable\ndescription\n\n\n\n\nspecies\nSpecies name of fish\n\n\nweight\nWeight, in grams\n\n\nlength_vertical\nVertical length, in cm\n\n\nlength_diagonal\nDiagonal length, in cm\n\n\nlength_cross\nCross length, in cm\n\n\nheight\nHeight, in cm\n\n\nwidth\nDiagonal width, in cm\n\n\n\n\nInterpreting multiple regression models\nIn the previous application exercise you saw that the model predicting weight from height and species was a better fit. In this section we will interpret the coefficients of this model.\n\nfish_hws_fit &lt;- linear_reg() |&gt;\n  fit(weight ~ height + species, data = fish)\n\ntidy(fish_hws_fit)\n\n# A tibble: 3 × 5\n  term         estimate std.error statistic  p.value\n  &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 (Intercept)    -828.      69.7     -11.9  1.92e-16\n2 height           95.2      4.54     21.0  5.10e-27\n3 speciesRoach    343.      41.8       8.19 6.35e-11\n\n\n\nWhat does each row in the model output represent?\n\nThe first row is the intercept. The second row is the slope for height. The third row is the slope for speciesRoach. In this case the other species level, Bream, is the reference level.\n\nInterpret the intercept and the slopes.\n\nIntercept, -828: Bream fish that are 0 cm in height are expected to weigh, on average -828 grams. This value doesn’t make sense in context of the data.\nheight, 95.2: All else held constant, for each cm the height of fish is higher, weights of fish are expected, on average, to be higher by 95.2 grams.\nspeciesRoach, 343: All else held constant, Roach fish are expected, on averge to weigh 343 grams more than Bream fish, on average.\n\nWrite the model.\n\n\\[\n\\widehat{weight} = -828 + 95.2 \\times height + 343 \\times speciesRoach\n\\]\n\n\nAdditive vs. interaction models\n\nRun the two code chunks below and create two separate plots. How are the two plots different than each other? Which plot does the model we fit above represent?\n\n\nggplot(fish, aes(x = height, y = weight, color = species)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"lm\") +\n  labs(title = \"Plot A - Interaction model\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nfish_hws_aug &lt;- augment(fish_hws_fit, new_data = fish)\nggplot(\n  fish_hws_aug, \n  aes(x = height, y = weight, color = species)\n  ) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(aes(y = .pred), method = \"lm\") +\n  labs(title = \"Plot B - Additive model\")\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\nLook back at Plot B. What assumption does the additive model make about the slopes between flipper length and body mass for each of the three islands?\n\nThe additive model assumes the same slope between body mass and flipper length for all three islands.\n\n\nChoosing models\nRule of thumb: Occam's Razor - Don't overcomplicate the situation! We prefer the simplest best model.\n\nChoose a model using this principle.\n\n\nglance(fish_hws_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.961         0.959  57.7      634. 3.07e-37     2  -300.  607.  615.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\nfish_hws_int_fit &lt;- linear_reg() |&gt;\n  fit(weight ~ height * species, data = fish)\n\nglance(fish_hws_int_fit)\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic  p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.969         0.968  51.3      540. 1.31e-38     3  -293.  595.  605.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\n\nChoose the interaction model since it has a higher adjusted R-squared.\n\nWhat is R-squared? What is adjusted R-squared?\n\nR-squared is the percent variability in the response that is explained by our model. (Can use when models have same number of variables for model selection)\nAdjusted R-squared is similar, but has a penalty for the number of variables in the model. (Should use for model selection when models have different numbers of variables)."
  },
  {
    "objectID": "ae/ae-03-flint-sa.html",
    "href": "ae/ae-03-flint-sa.html",
    "title": "Exploring Flint’s water data",
    "section": "",
    "text": "Important\n\n\n\nThese are suggested answers to the application exercise. They may differ slightly from the code we developed in class and may not be complete. They’re provided after class to help review the application activity, but are not an alternative to working on the exercise and actively participating in class."
  },
  {
    "objectID": "ae/ae-03-flint-sa.html#load-packages",
    "href": "ae/ae-03-flint-sa.html#load-packages",
    "title": "Exploring Flint’s water data",
    "section": "Load packages",
    "text": "Load packages\nWe’ll use the tidyverse package for analysis, which offers functionality for data import, wrangling, visualization, and more.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nLoading this package prints out a message. What does this message mean? How can we suppress the message from the output?"
  },
  {
    "objectID": "ae/ae-03-flint-sa.html#load-data",
    "href": "ae/ae-03-flint-sa.html#load-data",
    "title": "Exploring Flint’s water data",
    "section": "Load data",
    "text": "Load data\nThe read_csv() function can be used for reading CSV (comma separated values) files. The file we’re reading is called flint with the suffix (.csv) which indicates its file type. The file is in the data folder.\nBefore reading in the file, go to the data folder in the Files pane to confirm that it is, indeed, there. Then, read the file by running the code chunk below by clicking on the green triangle icon on the code chunk.\n\nflint &lt;- read_csv(\"data/flint.csv\")\n\nRows: 813 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): draw\ndbl (4): id, zip, ward, lead\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nOne of two things may have happened:\n\nThe file was read successfully and you now see a dataset called flint in your Environment pane.\nThe file was not read successfully and you see an error Error in read_csv(\"data/flint.csv\") : could not find function \"read_csv\".\n\nIf (1) happened, great!\nIf (2) happened, let’s troubleshoot first before continuing."
  },
  {
    "objectID": "ae/ae-03-flint-sa.html#data-dictionary",
    "href": "ae/ae-03-flint-sa.html#data-dictionary",
    "title": "Exploring Flint’s water data",
    "section": "Data dictionary",
    "text": "Data dictionary\nThe following variables are in the flint data frame:\n\nid: sample ID number (identifies the home)\nzip: ZIP code in Flint of the sample’s location\nward: ward in Flint of the sample’s location\ndraw: which time point the water was sampled from\nlead: lead content in parts per billion (ppb)"
  },
  {
    "objectID": "ae/ae-03-flint-sa.html#populations-and-samples",
    "href": "ae/ae-03-flint-sa.html#populations-and-samples",
    "title": "Exploring Flint’s water data",
    "section": "Populations and samples",
    "text": "Populations and samples\nWe want to learn about the population using a sample.\nIn the case we want to learn about the lead content in all of Flint, MI homes but only have available water readings from a sample of homes (our data set).\nExercise 1: Look at the data, how many observations are there? How many variables?\n\nnrow(flint)\n\n[1] 813\n\nncol(flint)\n\n[1] 5\n\n\n\nRender, commit, and push, with an appropriate commit message like “Finished Exercise 1”. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "ae/ae-03-flint-sa.html#frequencies",
    "href": "ae/ae-03-flint-sa.html#frequencies",
    "title": "Exploring Flint’s water data",
    "section": "Frequencies",
    "text": "Frequencies\nLet’s count() to find the number of different time points water was sampled with the count() function.\n\nThe first argument is flint: the data frame\nThe second argument is draw: the variable\n\n\ncount(flint, draw)\n\n# A tibble: 3 × 2\n  draw       n\n  &lt;chr&gt;  &lt;int&gt;\n1 first    271\n2 second   271\n3 third    271\n\n\nWe can achieve the same result with the following “piped” operation as well.\n\nThe first line is flint: the data frame\nThen the pipe operator, read as “and then”, which places what comes before it as the first argument of what comes after it\nThe second line is count(draw)\n\n\nflint |&gt;\n  count(draw)\n\n# A tibble: 3 × 2\n  draw       n\n  &lt;chr&gt;  &lt;int&gt;\n1 first    271\n2 second   271\n3 third    271\n\n\nWe can use a similar approach to fund out how many unique homes are in the data set:\n\nflint |&gt;\n  count(id)\n\n# A tibble: 269 × 2\n      id     n\n   &lt;dbl&gt; &lt;int&gt;\n 1     1     3\n 2     2     3\n 3     4     3\n 4     5     3\n 5     6     3\n 6     7     3\n 7     8     3\n 8     9     3\n 9    12     3\n10    13     3\n# ℹ 259 more rows\n\n\nExercise 2: How many samples were taken from each zip code?\n\nflint |&gt;\n  count(zip)\n\n# A tibble: 8 × 2\n    zip     n\n  &lt;dbl&gt; &lt;int&gt;\n1 48502     3\n2 48503   207\n3 48504   165\n4 48505   144\n5 48506   132\n6 48507   153\n7 48529     3\n8 48532     6\n\n\nExercise 3: Which ZIP code had the most samples drawn? Hint: See the help for count.\n\nflint |&gt;\n  count(zip, sort = TRUE)\n\n# A tibble: 8 × 2\n    zip     n\n  &lt;dbl&gt; &lt;int&gt;\n1 48503   207\n2 48504   165\n3 48507   153\n4 48505   144\n5 48506   132\n6 48532     6\n7 48502     3\n8 48529     3\n\n\n\nRender, commit, and push, with an appropriate commit message like “Finished exercises 2 and 3”. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "ae/ae-03-flint-sa.html#measures-of-central-tendency",
    "href": "ae/ae-03-flint-sa.html#measures-of-central-tendency",
    "title": "Exploring Flint’s water data",
    "section": "Measures of central tendency",
    "text": "Measures of central tendency\n\nmean\nmedian\nmode"
  },
  {
    "objectID": "ae/ae-03-flint-sa.html#measures-of-spread",
    "href": "ae/ae-03-flint-sa.html#measures-of-spread",
    "title": "Exploring Flint’s water data",
    "section": "Measures of spread",
    "text": "Measures of spread\n\nvariance\nstandard deviation\nrange\nquartiles\ninter-quartile range (IQR)"
  },
  {
    "objectID": "ae/ae-03-flint-sa.html#order-statistics",
    "href": "ae/ae-03-flint-sa.html#order-statistics",
    "title": "Exploring Flint’s water data",
    "section": "Order statistics",
    "text": "Order statistics\n\nquantiles\nminimum (0 percentile)\nmedian (50th percentile)\nmaximum (100 percentile)\n\n… and any other arbitrary function of the data you can come up with!\nExercise 4: Compute each of these statistics for lead ppb.\n\nflint |&gt;\n  summarize(\n    mean_lead = mean(lead),\n    median_lead = median(lead),\n    sd_lead = sd(lead),\n    # etc.\n  )\n\n# A tibble: 1 × 3\n  mean_lead median_lead sd_lead\n      &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt;\n1      8.20        1.85    41.5\n\n\n\nRender, commit, and push, with an appropriate commit message. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding."
  },
  {
    "objectID": "ae/ae-03-flint-sa.html#histograms",
    "href": "ae/ae-03-flint-sa.html#histograms",
    "title": "Exploring Flint’s water data",
    "section": "Histograms",
    "text": "Histograms\nLet’s take a look at the distribution of lead content in homes in Flint, MI.\n\nggplot(flint, aes(x = lead)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\nWe can make this plot look nicer/more useful by adjusting the number of bins and zooming into the x-axis.\n\nggplot(flint, aes(x = lead)) +\n  geom_histogram(bins = 50) +\n  coord_cartesian(xlim = c(0, 100))\n\n\n\n\nLet’s visualize some of our summary statistics on the plot.\nExercise 5: Add a new layer, geom_vline(xintercept = __, color = \"red\"), to the histogram below, filling in the blank with the mean.\n\nggplot(flint, aes(x = lead)) + \n  geom_histogram(bins = 50) + \n  coord_cartesian(xlim = c(0, 100))\n\n\n\n\nExercise 6: Add one more layer which overlays the median, in a different color.\n\nggplot(flint, aes(x = lead)) + \n  geom_histogram(bins = 50) + \n  geom_vline(xintercept = 1.852)\n\n\n\n  coord_cartesian(xlim = c(0, 100))\n\n&lt;ggproto object: Class CoordCartesian, Coord, gg&gt;\n    aspect: function\n    backtransform_range: function\n    clip: on\n    default: FALSE\n    distance: function\n    expand: TRUE\n    is_free: function\n    is_linear: function\n    labels: function\n    limits: list\n    modify_scales: function\n    range: function\n    render_axis_h: function\n    render_axis_v: function\n    render_bg: function\n    render_fg: function\n    setup_data: function\n    setup_layout: function\n    setup_panel_guides: function\n    setup_panel_params: function\n    setup_params: function\n    train_panel_guides: function\n    transform: function\n    super:  &lt;ggproto object: Class CoordCartesian, Coord, gg&gt;"
  },
  {
    "objectID": "ae/ae-03-flint-sa.html#box-plots",
    "href": "ae/ae-03-flint-sa.html#box-plots",
    "title": "Exploring Flint’s water data",
    "section": "Box plots",
    "text": "Box plots\nNext, let’s narrow our focus to the zip codes 48503, 48504, 48505, 48506, and 48507 and observations with lead values less than 1,000 ppb.\n\nflint_focus &lt;- flint |&gt;\n  filter(zip %in% 48503:48507 & lead &lt; 1000)\n\nExercise 7: Below are side-by-side box plots for the three flushing times in each of the five zip codes we considered. Add x and y labels; add a title by inserting title = \"title_name\" inside the labs() function.\n\nggplot(data = flint_focus, aes(y = factor(zip), x = lead)) +\n  geom_boxplot(aes(fill = factor(draw))) +\n  labs(x = \"Lead amount (PPB)\", y = \"Zip code\", fill = \"Flushing time\") +\n  scale_fill_discrete(\n    breaks = c(\"first\", \"second\", \"third\"),\n    labels = c(\"0 (sec)\", \"45 (sec)\", \"120 (sec)\")\n  )\n\n\n\n\n\nRender, commit, and push, with an appropriate commit message. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n\nExercise 8: Add labels for x, y, a title, and subtitle to the code below to update the corresponding plot.\n\nggplot(data = flint_focus, aes(y = factor(zip), x = lead)) +\n  geom_boxplot(aes(fill = factor(draw))) + \n  labs(\n    x = \"Lead amount (PPB)\", y = \"Zip code\", fill = \"Flushing time\",\n    title = \"Amount of lead in water\",\n    subtitle = \"Across various zip codes and flushing times\"\n    ) +\n  scale_fill_discrete(\n    breaks = c(\"first\", \"second\", \"third\"),\n    labels = c(\"0 (sec)\", \"45 (sec)\", \"120 (sec)\")\n  ) +\n  coord_cartesian(xlim = c(0, 50)) +\n  theme_bw()\n\n\n\n\nExercise 9: What is the difference between the two plots? What are the advantages and disadvantages to each plot?\n\nIt’s easier to see the distribution of the bulk of data in the latter plot, but the extreme observations are gone, which can also be important in this context.\n\n\nRender, commit, and push, with an appropriate commit message. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding. Confirm that your output looks as expected on your GitHub repository."
  },
  {
    "objectID": "computing/computing-troubleshooting.html",
    "href": "computing/computing-troubleshooting.html",
    "title": "Computing troubleshooting",
    "section": "",
    "text": "If you're having difficulty launching an RStudio session from your reserved container, go to status.oit.duke.edu and scroll down to Teaching and Learning Tools. Under this heading you'll find an entry called Container Manager (CMGR Coursework Containers).\n\nIf the status shows something other than Operational, this means there is a known incident with the containers. Check back later to see if it's been resolved. If there's a deadline coming up soon, post on the course Slack to let us know that there's an issue. We can look into how quickly it might get resolved and decide on what to do about the deadline accordingly. Note: We don't anticipate this to happen regularly, the systems are Operational a huge majority of the time!\nIf the status shows Operational, this means the system is expected to be working. Check your internet connection, if need be, restart your computer to ensure a fresh new connection. If your issue persists, post on the course forum with details on what you've tried and the errors you see (including verbatim errors and/or screenshots).\n\nAnother approach is to request a restart of your container. To do so, select your container as you usually do and then, instead of Login, click on Request Restart. Read the warning in the next page, and then click once more to restart your container."
  },
  {
    "objectID": "computing/computing-cheatsheets.html",
    "href": "computing/computing-cheatsheets.html",
    "title": "R cheatsheets",
    "section": "",
    "text": "The following cheatsheets come from https://posit.co/resources/cheatsheets. We haven’t covered every function and functionality listed on them, but you might still find them useful as references."
  },
  {
    "objectID": "lectures/11/11-vizualize-model-relationships-II.html#coming-up",
    "href": "lectures/11/11-vizualize-model-relationships-II.html#coming-up",
    "title": "Visualizing and modeling relationships II",
    "section": "Coming up",
    "text": "Coming up\n\nHW 3 due Thursday"
  },
  {
    "objectID": "lectures/11/11-vizualize-model-relationships-II.html#todays-goals",
    "href": "lectures/11/11-vizualize-model-relationships-II.html#todays-goals",
    "title": "Visualizing and modeling relationships II",
    "section": "Today’s goals",
    "text": "Today’s goals\n\nRecap modeling with a single predictor\nFit and interpret models with multiple predictors\nDistinguish between additive and interaction models"
  },
  {
    "objectID": "lectures/11/11-vizualize-model-relationships-II.html#setup",
    "href": "lectures/11/11-vizualize-model-relationships-II.html#setup",
    "title": "Visualizing and modeling relationships II",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(gt)"
  },
  {
    "objectID": "lectures/11/11-vizualize-model-relationships-II.html#ae-09",
    "href": "lectures/11/11-vizualize-model-relationships-II.html#ae-09",
    "title": "Visualizing and modeling relationships II",
    "section": "ae-09",
    "text": "ae-09\n\n\n\nThis application exercise was about predicting weights from heights of fish.\nGo to your container and switch to the ae-09 project in RStudio.\nContinue working on it starting with the Model summary section."
  },
  {
    "objectID": "lectures/11/11-vizualize-model-relationships-II.html#ae-10",
    "href": "lectures/11/11-vizualize-model-relationships-II.html#ae-10",
    "title": "Visualizing and modeling relationships II",
    "section": "ae-10",
    "text": "ae-10\n\n\n\nGo to the course GitHub org and find your ae-10-more-fish (repo name will be suffixed with your GitHub name).\nClick on the green CODE button, select Use SSH (this might already be selected by default, and if it is, you’ll see the text Clone with SSH). Click on the clipboard icon to copy the repo URL.\nIn RStudio, go to File ➛ New Project ➛Version Control ➛ Git.\nCopy and paste the URL of your assignment repo into the dialog box Repository URL. Again, please make sure to have SSH highlighted under Clone when you copy the address.\nClick Create Project, and the files from your GitHub repo will be displayed in the Files pane in RStudio.\nClick ae-10-more-fish.qmd to open the template Quarto file. This is where you will write up your code and narrative for the lab.\n\n\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "lectures/06/06-multiple-data-frames.html#reflection",
    "href": "lectures/06/06-multiple-data-frames.html#reflection",
    "title": "Working with multiple data frames",
    "section": "Reflection",
    "text": "Reflection\n\n What is one thing you learned from your reading or videos that was “new” to you? And what is one question you have from the reading, videos, or material we’ve covered so far, including the previous application exercise?"
  },
  {
    "objectID": "lectures/06/06-multiple-data-frames.html#announcements",
    "href": "lectures/06/06-multiple-data-frames.html#announcements",
    "title": "Working with multiple data frames",
    "section": "Announcements",
    "text": "Announcements\n\nProject 1 proposal due Thursday at 5 pm\nNext week:\n\nTuesday: Exam 1 - in class\nThursday: Exam 1 - take home due"
  },
  {
    "objectID": "lectures/06/06-multiple-data-frames.html#asking-questions",
    "href": "lectures/06/06-multiple-data-frames.html#asking-questions",
    "title": "Working with multiple data frames",
    "section": "Asking questions",
    "text": "Asking questions\n\nAsking code related questions on Slack\n\nIdeally: Code formatted text, not screenshots\nIf need be: Screenshots, not photos of screens\nAlways include code along with the error\n\nTroubleshooting 101: Read your error messages in full, out loud if need be\nCode formatting 101:\n\nAlways line breaks after + and |&gt;\nAdd line breaks as needed after , to help fit code on rendered PDF\nThink poetry (short lines), not novellas (long sentences)"
  },
  {
    "objectID": "lectures/06/06-multiple-data-frames.html#joining-student-data",
    "href": "lectures/06/06-multiple-data-frames.html#joining-student-data",
    "title": "Working with multiple data frames",
    "section": "Joining student data",
    "text": "Joining student data\n\nDescribe a scenario where two datasets that contain information about students from this class may need to be joined. What might the analysis be about? What column (information) could be used to join the datasets?"
  },
  {
    "objectID": "lectures/06/06-multiple-data-frames.html#data-fisheries-of-the-world",
    "href": "lectures/06/06-multiple-data-frames.html#data-fisheries-of-the-world",
    "title": "Working with multiple data frames",
    "section": "Data: Fisheries of the world",
    "text": "Data: Fisheries of the world\n\nDataset 1: Data from various countries on fishing harvest\nDataset 2: Countries and continents\nObservations: Each row represents a country"
  },
  {
    "objectID": "lectures/06/06-multiple-data-frames.html#plan",
    "href": "lectures/06/06-multiple-data-frames.html#plan",
    "title": "Working with multiple data frames",
    "section": "Plan",
    "text": "Plan\nWe…\nhave two data frames\nwant to join them, slice them, dice them, juice them, and process them, so we can plot them"
  },
  {
    "objectID": "lectures/06/06-multiple-data-frames.html#ae-06",
    "href": "lectures/06/06-multiple-data-frames.html#ae-06",
    "title": "Working with multiple data frames",
    "section": "ae-06",
    "text": "ae-06\n\n\n\nGo to the course GitHub org and find your ae-06-fisheries (repo name will be suffixed with your GitHub name).\nClone the repo in Posit Cloud, and set up your PAT:\n\nIn the Console, run usethis::create_github_token() to create a new PAT or grab the one you created previously from a space you might have safely stored it (e.g., 1Password or similar)\nIn the Console, run gitcreds::gitcreds_set() and paste your PAT when prompted.\nIn the Terminal, run git config credential.helper store to make sure your PAT persists throughout the whole time you’re working on this assignment / Cloud project.\n\nOpen the Quarto document (.qmd) and follow along and complete the exercises.\nRender, commit, and push your edits as you work through it\n\n\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "lectures/08/08-types-classes.html#while-you-wait",
    "href": "lectures/08/08-types-classes.html#while-you-wait",
    "title": "Data types of classes",
    "section": "While you wait",
    "text": "While you wait\n\n Check your email for an email from TEAMMATES. Provide peer feedback to your teammates (and to yourself). Be constructive and encouraging!"
  },
  {
    "objectID": "lectures/08/08-types-classes.html#course-content",
    "href": "lectures/08/08-types-classes.html#course-content",
    "title": "Data types of classes",
    "section": "Course content",
    "text": "Course content\n\nToday: Last day of “welcome to R” content\nRemainder of class: Greater emphasis on “data visualization with R”"
  },
  {
    "objectID": "lectures/08/08-types-classes.html#project-1",
    "href": "lectures/08/08-types-classes.html#project-1",
    "title": "Data types of classes",
    "section": "Project 1",
    "text": "Project 1\n\nProposals have been reviewed and each team has a number of issues on their repos with my feedback\nBetween today and next Tuesday: Review proposal feedback, improve your proposals by closing issues with specific commits (more on this in a few), move on from working on your proposal to your project and make progress, particularly working on your visualizations\nNext Tuesday: Start with peer review, then learn about polishing your plots\nNext Tuesday - Thursday: Improve your projects by closing peer review issue with specific commits, finalize your presentation and your writeup\nNext Thursday: Project presentations"
  },
  {
    "objectID": "lectures/08/08-types-classes.html#project-webpages",
    "href": "lectures/08/08-types-classes.html#project-webpages",
    "title": "Data types of classes",
    "section": "Project webpages",
    "text": "Project webpages\n\n\n\n\nEach of you now have a webpage for your projects!\nThis was achieved by adding a _quarto.yml file to each of your repos.\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe first thing you should do is go to your Posit Cloud project and, in the Git tab, pull my changes from your repo.\nThen, relaunch your project – three dots on top right &gt; Relaunch.\nGoing forward, when you want to see the output of what you’re working on, click on Render Project in the Build tab."
  },
  {
    "objectID": "lectures/08/08-types-classes.html#addressing-proposal-feedback",
    "href": "lectures/08/08-types-classes.html#addressing-proposal-feedback",
    "title": "Data types of classes",
    "section": "Addressing proposal feedback",
    "text": "Addressing proposal feedback\n\nEach piece of feedback is noted as an issue\n\n\n\n\nReview each issue and address them – that means make a correction to your project that specifically addresses that issue, commit with a message like\n\nMoved dataset into the data folder, closes #1.\n\nwhere #1 refers to the issue number, and push. This will close the issue and associate the commit that addressed it with the issue."
  },
  {
    "objectID": "lectures/08/08-types-classes.html#project-questions",
    "href": "lectures/08/08-types-classes.html#project-questions",
    "title": "Data types of classes",
    "section": "Project questions?",
    "text": "Project questions?\nbefore we get back to our regularly scheduled programming…"
  },
  {
    "objectID": "lectures/08/08-types-classes.html#types-and-classes-1",
    "href": "lectures/08/08-types-classes.html#types-and-classes-1",
    "title": "Data types of classes",
    "section": "Types and classes",
    "text": "Types and classes\n\nType is how an object is stored in memory, e.g.,\n\ndouble: a real number stored in double-precision floating point format.\ninteger: an integer (positive or negative)\n\nClass is metadata about the object that can determine how common functions operate on that object, e.g.,\nfactor"
  },
  {
    "objectID": "lectures/08/08-types-classes.html#types-of-vectors",
    "href": "lectures/08/08-types-classes.html#types-of-vectors",
    "title": "Data types of classes",
    "section": "Types of vectors",
    "text": "Types of vectors\n\n\nYou’ll commonly encounter:\n\nlogical\ninteger\ndouble\ncharacter\n\n\nYou’ll less commonly encounter:\n\nlist\nNULL\ncomplex\nraw"
  },
  {
    "objectID": "lectures/08/08-types-classes.html#types-of-functions",
    "href": "lectures/08/08-types-classes.html#types-of-functions",
    "title": "Data types of classes",
    "section": "Types of functions",
    "text": "Types of functions\nYes, functions have types too, but you don’t need to worry about the differences in the context of doing data science.\n\ntypeof(mean) # regular function\n\n[1] \"closure\"\n\ntypeof(`$`) # internal function\n\n[1] \"special\"\n\ntypeof(sum) # primitive function\n\n[1] \"builtin\""
  },
  {
    "objectID": "lectures/08/08-types-classes.html#factors",
    "href": "lectures/08/08-types-classes.html#factors",
    "title": "Data types of classes",
    "section": "Factors",
    "text": "Factors\nA factor is a vector that can contain only predefined values. It is used to store categorical data.\n\n\n\nx &lt;- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n\n[1] a b b a\nLevels: a b\n\ntypeof(x)\n\n[1] \"integer\"\n\nattributes(x)\n\n$levels\n[1] \"a\" \"b\"\n\n$class\n[1] \"factor\""
  },
  {
    "objectID": "lectures/08/08-types-classes.html#other-classes",
    "href": "lectures/08/08-types-classes.html#other-classes",
    "title": "Data types of classes",
    "section": "Other classes",
    "text": "Other classes\nJust a couple of examples…\n\n\nDate:\n\ntoday &lt;- Sys.Date()\ntoday\n\n[1] \"2023-10-05\"\n\ntypeof(today)\n\n[1] \"double\"\n\nattributes(today)\n\n$class\n[1] \"Date\"\n\n\n\nDate-time:\n\nnow &lt;- as.POSIXct(\"2022-09-22 10:15\", tz = \"EST\")\nnow\n\n[1] \"2022-09-22 10:15:00 EST\"\n\ntypeof(now)\n\n[1] \"double\"\n\nattributes(now)\n\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"EST\""
  },
  {
    "objectID": "lectures/08/08-types-classes.html#ae-08",
    "href": "lectures/08/08-types-classes.html#ae-08",
    "title": "Data types of classes",
    "section": "ae-08",
    "text": "ae-08\n\n\n\nGo to the course GitHub org and find your ae-08-hotels (repo name will be suffixed with your GitHub name).\nClone the repo in Posit Cloud, open the Quarto document in the repo, set up a new PAT, and follow along and complete the exercises.\nRender, commit, and push your edits as you work through it\n\n\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "lectures/04/04-visualizing-various-types-of-data.html#reflection",
    "href": "lectures/04/04-visualizing-various-types-of-data.html#reflection",
    "title": "Visualizing various types of data",
    "section": "Reflection",
    "text": "Reflection\n\n What is one thing you learned from your reading or videos that was “new” to you? And what is one question you have from the reading, videos, or material we’ve covered so far, including the previous application exercise?"
  },
  {
    "objectID": "lectures/04/04-visualizing-various-types-of-data.html#announcements",
    "href": "lectures/04/04-visualizing-various-types-of-data.html#announcements",
    "title": "Visualizing various types of data",
    "section": "Announcements",
    "text": "Announcements\n\nHW 1 due next Tuesday at 1 pm\nOffice hours – move to in person?"
  },
  {
    "objectID": "lectures/04/04-visualizing-various-types-of-data.html#identifying-variable-types",
    "href": "lectures/04/04-visualizing-various-types-of-data.html#identifying-variable-types",
    "title": "Visualizing various types of data",
    "section": "Identifying variable types",
    "text": "Identifying variable types\n\n Identify the type of each of the following variables.\n\nFavorite food\nNumber of classes you’re taking this semester\nZip code\nFull name\nAge"
  },
  {
    "objectID": "lectures/04/04-visualizing-various-types-of-data.html#the-way-data-is-displayed-matters",
    "href": "lectures/04/04-visualizing-various-types-of-data.html#the-way-data-is-displayed-matters",
    "title": "Visualizing various types of data",
    "section": "The way data is displayed matters",
    "text": "The way data is displayed matters\n\n What do these three plots show?\n\n\nSource: #barbarplots"
  },
  {
    "objectID": "lectures/04/04-visualizing-various-types-of-data.html#ae-04",
    "href": "lectures/04/04-visualizing-various-types-of-data.html#ae-04",
    "title": "Visualizing various types of data",
    "section": "ae-04",
    "text": "ae-04\n\n\n\nGo to the course GitHub org and find your ae-04-sat (repo name will be suffixed with your GitHub name).\nClone the repo in Posit Cloud, open the Quarto document in the repo, set up a new PAT, and follow along and complete the exercises.\nRender, commit, and push your edits as you work through it"
  },
  {
    "objectID": "lectures/04/04-visualizing-various-types-of-data.html#recap-of-ae",
    "href": "lectures/04/04-visualizing-various-types-of-data.html#recap-of-ae",
    "title": "Visualizing various types of data",
    "section": "Recap of AE",
    "text": "Recap of AE\n\nPick geoms based on data types.\nSet appropriate binwidths for histograms.\nTurn off legends when they provide redundant information with show.legend = FALSE.\nCreate plots with multiple geoms, and pay attention to order.\n\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "lectures/03/03-grammar-graphics.html#before-we-get-started",
    "href": "lectures/03/03-grammar-graphics.html#before-we-get-started",
    "title": "Meet the toolkit 2 + Grammar of Graphics",
    "section": "Before we get started",
    "text": "Before we get started\n\n Check your email and accept the invitations to the course GitHub organization!"
  },
  {
    "objectID": "lectures/03/03-grammar-graphics.html#reflection",
    "href": "lectures/03/03-grammar-graphics.html#reflection",
    "title": "Meet the toolkit 2 + Grammar of Graphics",
    "section": "Reflection",
    "text": "Reflection\n\n What is one thing you learned from your reading that was “new” to you? And what is one question you have from the reading?"
  },
  {
    "objectID": "lectures/03/03-grammar-graphics.html#announcements",
    "href": "lectures/03/03-grammar-graphics.html#announcements",
    "title": "Meet the toolkit 2 + Grammar of Graphics",
    "section": "Announcements",
    "text": "Announcements\n\nHW 1 is posted, due next Tuesday at 1 pm"
  },
  {
    "objectID": "lectures/03/03-grammar-graphics.html#git-and-github",
    "href": "lectures/03/03-grammar-graphics.html#git-and-github",
    "title": "Meet the toolkit 2 + Grammar of Graphics",
    "section": "Git and GitHub",
    "text": "Git and GitHub\n\n\n\n\n\n\n\nGit is a version control system, like “Track Changes” features from Microsoft Word but more powerful.\n\n\n\n\n\n\nGitHub is the home for your Git-based projects on the internet, like DropBox but much better."
  },
  {
    "objectID": "lectures/03/03-grammar-graphics.html#connecting-your-posit-cloud-and-github-accounts",
    "href": "lectures/03/03-grammar-graphics.html#connecting-your-posit-cloud-and-github-accounts",
    "title": "Meet the toolkit 2 + Grammar of Graphics",
    "section": "Connecting your Posit Cloud and GitHub accounts",
    "text": "Connecting your Posit Cloud and GitHub accounts\nYou should only need to do the following once:\n\nGo to Posit Cloud and log in.\nClick on your profile avatar (top right) and then click on “Authentication”.\nUnder Login Options, check the box for “Enabled”. This will open another window where you should click on “Authorize rstudio”.\nThen, go back to the Posit Cloud authentication page, and check the box for “Private repo access also enabled”."
  },
  {
    "objectID": "lectures/03/03-grammar-graphics.html#application-exercise-flint",
    "href": "lectures/03/03-grammar-graphics.html#application-exercise-flint",
    "title": "Meet the toolkit 2 + Grammar of Graphics",
    "section": "Application exercise: Flint",
    "text": "Application exercise: Flint\n\n\n\nGo to the course GitHub Organization and locate your own ae-03-flint repository. This repository will be called ae-03-flint-YOUR_GITHUB_NAME.\nClick on the green Code button, make sure HTTPS is selected, and copy the URL (by clicking on ).\nGo to Posit Cloud. Make sure you’re in the course space – it should say STA 113 - F23 on the top left.\nClick on the blue New Project button, and then New Project from Git Repository. Paste the URL you copied from your GitHub repository here. Make sure Add packages from the base project is checked.\n\ncontinue on next slide"
  },
  {
    "objectID": "lectures/03/03-grammar-graphics.html#application-exercise-flint-1",
    "href": "lectures/03/03-grammar-graphics.html#application-exercise-flint-1",
    "title": "Meet the toolkit 2 + Grammar of Graphics",
    "section": "Application exercise: Flint",
    "text": "Application exercise: Flint\n\n\nOnce you’re in the project, go to the Console and run\n\nusethis::create_github_token()\n\nOn the page that pops open in your browser, create a new GitHub Personal Access Token (i.e., sort of like a password you store):\n\nDescribe the token’s use case under Note, e.g., ae-03\nExtend expiration date to 90 days\nScroll down and click on Generate Token\n\nCopy the token by clicking on .\nGo back to Posit Cloud, to your Console, and run\n\ngitcreds::gitcreds_set()\n\nand paste the token you just copied.\n\n🎉 You’re now ready to work on your application exercise analyzing a dataset with R, in RStudio that you access via Posit Cloud, version controlled with Git, and hosted on GitHub. And that’s your data science toolkit! 🛠️"
  },
  {
    "objectID": "lectures/03/03-grammar-graphics.html#next-time",
    "href": "lectures/03/03-grammar-graphics.html#next-time",
    "title": "Meet the toolkit 2 + Grammar of Graphics",
    "section": "Next time",
    "text": "Next time\n\nWe’ll continue to learn about visualizing various types of data and get practice with the data science workflow.\nWe’ll review questions you might have on the homework assignment.\n\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "lectures/01/01-welcome.html#teaching-team",
    "href": "lectures/01/01-welcome.html#teaching-team",
    "title": "Welcome to STA 113FS",
    "section": "Teaching team",
    "text": "Teaching team\n\n\nInstructor\nDr. Mine Çetinkaya-Rundel\nOld Chem 213\nmc301@duke.edu\n\nTeaching assistant\nShelby Tisdale\nshelby.tisdale@duke.edu"
  },
  {
    "objectID": "lectures/01/01-welcome.html#learning-objectives",
    "href": "lectures/01/01-welcome.html#learning-objectives",
    "title": "Welcome to STA 113FS",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nLearn a modern toolkit commonly used in data science research and careers (R, RStudio, Quarto, Git, GitHub).\nIntroduce students to the ideas and methods of data visualization in a comprehensible reproducible way using this toolkit.\nUnderstand the principles of designing and creating data visualizations.\nEvaluate, critique, and improve upon one’s own and others’ data visualizations through an iterative process.\nUse data visualization to look for and answer questions of societal importance and of interest to students."
  },
  {
    "objectID": "lectures/01/01-welcome.html#lets-play-a-game",
    "href": "lectures/01/01-welcome.html#lets-play-a-game",
    "title": "Welcome to STA 113FS",
    "section": "Let’s play a game!",
    "text": "Let’s play a game!\n\n\nForm a small group (2-4 people) with people sitting around you\nPlay the game: https://nyti.ms/3suUJHG"
  },
  {
    "objectID": "lectures/01/01-welcome.html#course-website",
    "href": "lectures/01/01-welcome.html#course-website",
    "title": "Welcome to STA 113FS",
    "section": "Course website",
    "text": "Course website\n\nsta113-f23.github.io\n\n\naka “the one link to rule them all”"
  },
  {
    "objectID": "lectures/01/01-welcome.html#lectures",
    "href": "lectures/01/01-welcome.html#lectures",
    "title": "Welcome to STA 113FS",
    "section": "Lectures",
    "text": "Lectures\n\nIn person\nAttendance is required (as long as you’re healthy!)\nA little bit of everything:\n\nTraditional lecture\nLive coding + demos\nShort exercises + solution discussion\n\nRecordings will be posted after class – to be used for review + make-up if you can’t make it to class due to health reasons, they’re not an alternative to class attendance"
  },
  {
    "objectID": "lectures/01/01-welcome.html#announcements",
    "href": "lectures/01/01-welcome.html#announcements",
    "title": "Welcome to STA 113FS",
    "section": "Announcements",
    "text": "Announcements\n\nPosted on Canvas (Announcements) and sent via email, be sure to check both regularly\nI’ll assume that you’ve read an announcement by the next “business” day"
  },
  {
    "objectID": "lectures/01/01-welcome.html#diversity-and-inclusion",
    "href": "lectures/01/01-welcome.html#diversity-and-inclusion",
    "title": "Welcome to STA 113FS",
    "section": "Diversity and inclusion",
    "text": "Diversity and inclusion\nIt is my intent that students from all diverse backgrounds and perspectives be well-served by this course, that students’ learning needs be addressed both in and out of class, and that the diversity that the students bring to this class be viewed as a resource, strength and benefit.\n\nIf you have a name that differs from those that appear in your official Duke records, please let me know! Add your name pronunciation to your Canvas and Slack profiles.\nPlease let me know your preferred pronouns and add these to your Canvas and Slack profiles.\nIf you feel like your performance in the class is being impacted by your experiences outside of class, please don’t hesitate to come and talk with me. I want to be a resource for you. If you prefer to speak with someone outside of the course, your advisers and deans are excellent resources.\nI (like many people) am still in the process of learning about diverse perspectives and identities. If something was said in class (by anyone) that made you feel uncomfortable, please talk to me about it."
  },
  {
    "objectID": "lectures/01/01-welcome.html#accessibility",
    "href": "lectures/01/01-welcome.html#accessibility",
    "title": "Welcome to STA 113FS",
    "section": "Accessibility",
    "text": "Accessibility\n\nThe Student Disability Access Office (SDAO) is available to ensure that students are able to engage with their courses and related assignments.\nWe will have in class exams. If you need special accommodations, please book the testing center ASAP!\nI am committed to making all course materials accessible and I’m always learning how to do this better. If any course component is not accessible to you in any way, please don’t hesitate to let me know."
  },
  {
    "objectID": "lectures/01/01-welcome.html#attendance-participation-10",
    "href": "lectures/01/01-welcome.html#attendance-participation-10",
    "title": "Welcome to STA 113FS",
    "section": "Attendance + participation (10%)",
    "text": "Attendance + participation (10%)\nRequired throughout the semester as well as on Slack\n\n\n\n\n\n\n\n\n\nIf you attend at least 80% of the classes, you’ll get all available points for this component."
  },
  {
    "objectID": "lectures/01/01-welcome.html#hw-25",
    "href": "lectures/01/01-welcome.html#hw-25",
    "title": "Welcome to STA 113FS",
    "section": "HW (25%)",
    "text": "HW (25%)\nSubmitted as GitHub repos, individual, can discuss with classmates\n\n\n\n\n\n\n\n\n\nLowest HW score is dropped, whether it’s an actual low score or a 0 from not turning it in."
  },
  {
    "objectID": "lectures/01/01-welcome.html#exams",
    "href": "lectures/01/01-welcome.html#exams",
    "title": "Welcome to STA 113FS",
    "section": "Exams",
    "text": "Exams\n\nTwo exams, each 15%\nEach exam comprised of two parts:\n\nIn class: 75 minute in-class exam. Closed book, one sheet of notes (“cheat sheet”, no larger than 8 1/2 x 11, both sides, must be prepared by you) – 70% of the grade\nTake home: 48 hours to complete the take home portion. The take home portion will follow from the in class exam and focus on the analysis of a dataset introduced in the take home exam – 30% of the grade\n\n\n\n\n\n\n\n\n\n\n\nExam dates cannot be changed and no make-up exams will be given. If you can’t take the exams on these dates, you should drop this class."
  },
  {
    "objectID": "lectures/01/01-welcome.html#projects",
    "href": "lectures/01/01-welcome.html#projects",
    "title": "Welcome to STA 113FS",
    "section": "Projects",
    "text": "Projects\n\nProject 1 (15%)\n\nSame data, limited methods\n\nProject 2 (20%)\n\nDataset of your choice, method of your choice\nNew team\n\nBoth projects have a presentation and write-up\nInterim deadlines, peer review on content, peer evaluation for team contribution\nSome class sessions allocated to working on projects, doing peer review, getting feedback from TA and instructor\n\n\n\n\n\n\n\n\n\n\nPresentation dates cannot be changed. If you can’t present on that date, you should drop this class."
  },
  {
    "objectID": "lectures/01/01-welcome.html#teams",
    "href": "lectures/01/01-welcome.html#teams",
    "title": "Welcome to STA 113FS",
    "section": "Teams",
    "text": "Teams\n\nTeamwork\n\nProjects (required), in class exercises (recommended)\nAssigned different teams for each project\nPeer evaluation during teamwork and after completion\n\nExpectations and roles\n\nEveryone is expected to contribute equal effort\nEveryone is expected to understand all code turned in\nIndividual contribution evaluated by peer evaluation, commits, etc."
  },
  {
    "objectID": "lectures/01/01-welcome.html#covid-policies",
    "href": "lectures/01/01-welcome.html#covid-policies",
    "title": "Welcome to STA 113FS",
    "section": "COVID policies",
    "text": "COVID policies\n\nWear a mask if the university requires\nStay home if you’re sick and follow guidance\nRead and follow university guidance"
  },
  {
    "objectID": "lectures/01/01-welcome.html#late-work-policy",
    "href": "lectures/01/01-welcome.html#late-work-policy",
    "title": "Welcome to STA 113FS",
    "section": "Late work policy",
    "text": "Late work policy\n\nInteractive tutorials: Late submissions past the hard deadlines not accepted\nHW:\n\nLate, but within 24 hours of deadline: -20% of available points\nAny later: No credit, and we will not provide written feedback\nNote that lowest HW score will be dropped, even if that score is a 0\n\nProject write-ups:\n\nLate, but within 24 hours of deadline: -20% of available points\nAny later: No credit, and we will not provide written feedback\n\nProject presentation: Late submissions not accepted\nPeer evaluation:\n\nLate submissions not accepted\nMust turn in peer evaluation if you want your own score from others"
  },
  {
    "objectID": "lectures/01/01-welcome.html#collaboration-policy",
    "href": "lectures/01/01-welcome.html#collaboration-policy",
    "title": "Welcome to STA 113FS",
    "section": "Collaboration policy",
    "text": "Collaboration policy\n\nOnly work that is clearly assigned as team work should be completed collaboratively (projects)\nExams must be completed individually, you may not discuss answers with teammates, clarification questions should only be asked to myself and the TA\nHW must be completed individually. You may not directly share answers / code with others, however you are welcome to discuss the problems in general and ask for advice"
  },
  {
    "objectID": "lectures/01/01-welcome.html#sharing-reusing-code-policy",
    "href": "lectures/01/01-welcome.html#sharing-reusing-code-policy",
    "title": "Welcome to STA 113FS",
    "section": "Sharing / reusing code policy",
    "text": "Sharing / reusing code policy\n\nWe are aware that a huge volume of code is available on the web, and many tasks may have solutions posted\nUnless explicitly stated otherwise, this course’s policy is that you may make use of any online resources (e.g., StackOverflow) but you must explicitly cite where you obtained any code you directly use or use as inspiration in your solution(s)\nAny recycled code that is discovered and is not explicitly cited will be treated as plagiarism, regardless of source"
  },
  {
    "objectID": "lectures/01/01-welcome.html#generative-ai-policy",
    "href": "lectures/01/01-welcome.html#generative-ai-policy",
    "title": "Welcome to STA 113FS",
    "section": "Generative AI policy",
    "text": "Generative AI policy\nYou should treat generative AI, such as ChatGPT, the same as other online resources. There are two guiding principles that govern how you can use AI in this course:1\n(1) Cognitive dimension: Working with AI should not reduce your ability to think clearly. We will practice using AI to facilitate—rather than hinder—learning.\n(2) Ethical dimension: Students using AI should be transparent about their use and make sure it aligns with academic integrity.\n\n✅ AI tools for code: You may make use of the technology for coding examples on assignments; if you do so, you must explicitly cite where you obtained the code. Any recycled code that is discovered and is not explicitly cited will be treated as plagiarism.\n❌ AI tools for narrative: Unless instructed otherwise, you may not use generative AI to write narrative on assignments. In general, you may use generative AI as a resource as you complete assignments but not to answer the exercises for you. You are ultimately responsible for the work you turn in; it should reflect your understanding of the course content.\n\nThese guiding principles are based on Course Policies related to ChatGPT and other AI Tools developed by Joel Gladd, Ph.D."
  },
  {
    "objectID": "lectures/01/01-welcome.html#academic-integrity",
    "href": "lectures/01/01-welcome.html#academic-integrity",
    "title": "Welcome to STA 113FS",
    "section": "Academic integrity",
    "text": "Academic integrity\nTo uphold the Duke Community Standard:\n\nI will not lie, cheat, or steal in my academic endeavors;\nI will conduct myself honorably in all my endeavors; and\nI will act if the Standard is compromised.\n\n\n\nmost importantly:\nask if you’re not sure if something violates a policy!"
  },
  {
    "objectID": "lectures/01/01-welcome.html#office-hours",
    "href": "lectures/01/01-welcome.html#office-hours",
    "title": "Welcome to STA 113FS",
    "section": "Office hours",
    "text": "Office hours\n\nMine: TBA\nShelby: Thu 3-4 pm in Old Chem 213 and Sun 7 - 8 pm on Zoom (link to be shared)\n+ lots more resources listed on the syllabus!"
  },
  {
    "objectID": "lectures/01/01-welcome.html#wellness",
    "href": "lectures/01/01-welcome.html#wellness",
    "title": "Welcome to STA 113FS",
    "section": "Wellness",
    "text": "Wellness\nI want to make sure that you learn everything you were hoping to learn from this class. If this requires flexibility, please don’t hesitate to ask.\n\nYou never owe me personal information about your health (mental or physical) but you’re always welcome to talk to me. If I can’t help, I likely know someone who can.\nI want you to learn lots of things from this class, but I primarily want you to stay healthy, balanced, and grounded."
  },
  {
    "objectID": "lectures/01/01-welcome.html#rstudio",
    "href": "lectures/01/01-welcome.html#rstudio",
    "title": "Welcome to STA 113FS",
    "section": "RStudio",
    "text": "RStudio\n\nhttps://posit.cloud\n\n\nBrowser based RStudio instance(s) provided by Posit\nRequires internet connection to access\nProvides consistency in hardware and software environments\nLocal R installations are fine but we will not guarantee support"
  },
  {
    "objectID": "lectures/01/01-welcome.html#slack",
    "href": "lectures/01/01-welcome.html#slack",
    "title": "Welcome to STA 113FS",
    "section": "Slack",
    "text": "Slack\n\nOnline forum for asking and answering questions\nPrivate repo in the course organization\nYou will need to join the course organization for access\nAsk and answer questions related to course logistics, assignment, etc. here\nPersonal questions (e.g., extensions, illnesses, etc.) should be via email to me\nOnce you join, browse the channels to make sure you’re posting questions in the right channel, update your profile with your name, photo/avatar of you that matches your GitHub profile, and your pronouns\nUnfortunately Slack is not the best place to in-depth questions, but it’s a great place for real-time connection and collaboration"
  },
  {
    "objectID": "lectures/01/01-welcome.html#github",
    "href": "lectures/01/01-welcome.html#github",
    "title": "Welcome to STA 113FS",
    "section": "GitHub",
    "text": "GitHub\n\nhttps://github.com/sta113-f23\n\n\nGitHub organization for the course\nAll of your work and your membership (enrollment) in the organization is private\nEach assignment is a private repo on GitHub, I distribute the assignments on GitHub and you submit them there\nFeedback on assignments is given as GitHub issues, scores recorded on Canvas Gradebook"
  },
  {
    "objectID": "lectures/01/01-welcome.html#github-username-advice",
    "href": "lectures/01/01-welcome.html#github-username-advice",
    "title": "Welcome to STA 113FS",
    "section": "GitHub username advice",
    "text": "GitHub username advice\nSome brief advice about selecting your account names (particularly for GitHub),\n\nIncorporate your actual name! People like to know who they’re dealing with and makes your username easier for people to guess or remember\nReuse your username from other contexts, e.g., Twitter or Slack\nPick a username you will be comfortable revealing to your future boss\nShorter is better than longer, but be as unique as possible\nMake it timeless. Avoid highlighting your current university, employer, or place of residence"
  },
  {
    "objectID": "lectures/01/01-welcome.html#to-do-before-1",
    "href": "lectures/01/01-welcome.html#to-do-before-1",
    "title": "Welcome to STA 113FS",
    "section": "To do before…",
    "text": "To do before…\nwe move on\nSee course announcement (on Canvas or in your email) and click on the links to\n\nLog in to Posit Cloud – and update your profile\nLog in to Slack – and update your profile with your photo, pronouns, name pronunciation\nComplete the Getting to know you survey on Canvas\n\nthe next class on Thursday\n\nRead the syllabus\nComplete the readings\n\nthe end of the week\n\nGet started on the first HW assignment"
  },
  {
    "objectID": "lectures/01/01-welcome.html#next-time",
    "href": "lectures/01/01-welcome.html#next-time",
    "title": "Welcome to STA 113FS",
    "section": "Next time",
    "text": "Next time\nMeet the computational tools for the course: R and RStudio\n\n\n\n🔗 sta113-f23.github.io"
  },
  {
    "objectID": "hw/hw-6.html",
    "href": "hw/hw-6.html",
    "title": "HW 6",
    "section": "",
    "text": "To be posted…"
  },
  {
    "objectID": "hw/hw-4.html",
    "href": "hw/hw-4.html",
    "title": "HW 4",
    "section": "",
    "text": "To be posted…"
  },
  {
    "objectID": "hw/hw-5.html",
    "href": "hw/hw-5.html",
    "title": "HW 5",
    "section": "",
    "text": "To be posted…"
  },
  {
    "objectID": "course-faq.html",
    "href": "course-faq.html",
    "title": "FAQ",
    "section": "",
    "text": "The short answer is, I’d rather you didn’t, to save yourself some headache. But, the long answer is, sure! But you will need to install a specific versions of R and RStudio for everything to work as expected. You will also need to install the R packages we’re using as well as have Git installed on your computer. These are not extremely challenging things to get right, but they are not trivial either, particularly on certain operating systems. Myself and the TAs are always happy to provide help with any computational questions when you’re working in the containers we have provided for you. If you’re working on your local setup, we can’t guarantee being able to resolve your issues, though we’re happy to try.\nIf you want to take this path, here is what you need to do:\n\nDownload and install R 4.3.1: https://cran.r-project.org\nDownload and install the preview build of RStudio: https://posit.co/download/rstudio-desktop\nInstall any necessary packages with install.packages(\"___\")\n\nAnd I’d like to reiterate again that successful installation of these software is not a learning goal of this course. So if any of this seems tedious or intimidating in any way, just use the computing environment we have set up for you. More on that here."
  },
  {
    "objectID": "course-faq.html#can-i-use-a-local-install-of-posit-cloud",
    "href": "course-faq.html#can-i-use-a-local-install-of-posit-cloud",
    "title": "FAQ",
    "section": "",
    "text": "The short answer is, I’d rather you didn’t, to save yourself some headache. But, the long answer is, sure! But you will need to install a specific versions of R and RStudio for everything to work as expected. You will also need to install the R packages we’re using as well as have Git installed on your computer. These are not extremely challenging things to get right, but they are not trivial either, particularly on certain operating systems. Myself and the TAs are always happy to provide help with any computational questions when you’re working in the containers we have provided for you. If you’re working on your local setup, we can’t guarantee being able to resolve your issues, though we’re happy to try.\nIf you want to take this path, here is what you need to do:\n\nDownload and install R 4.3.1: https://cran.r-project.org\nDownload and install the preview build of RStudio: https://posit.co/download/rstudio-desktop\nInstall any necessary packages with install.packages(\"___\")\n\nAnd I’d like to reiterate again that successful installation of these software is not a learning goal of this course. So if any of this seems tedious or intimidating in any way, just use the computing environment we have set up for you. More on that here."
  },
  {
    "objectID": "project/project-2.html",
    "href": "project/project-2.html",
    "title": "Project 2",
    "section": "",
    "text": "More info to be posted."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STA 113: Visualizing Data",
    "section": "",
    "text": "This page contains an outline of the topics, content, and assignments for the semester. Note that this schedule will be updated as the semester progresses and the timeline of topics and assignments might be updated throughout the semester.\n\n\n\n\n\n  \n    \n    \n    \n    \n    \n    \n  \n  \n    \n    \n      WEEK\n      DATE\n      TOPIC\n      PREPARE\n      MATERIALS\n      DUE\n    \n  \n  \n    1\nTue, Aug 29\nWelcome to STA 113FS!\n\n\n🖥️ slides\n\n\n    \nThu, Aug 31\nMeet the toolkit (R + RStudio)\n\n📖 socviz: Chp 1\n\n🖥️ slides \n⌨️ ae-01 \n⌨️ ae-02 \n🗝️ ae-02-sa\n\nGetting to know you survey \nGitHub usernames\n\n    2\nTue, Sep 5\nMeet the toolkit (Git + GitHub) + \nGrammar of graphics\n\n📖 r4ds: Chp 2.1 - 2.4 \n🎥 video\n\n🖥️ slides \n⌨️ ae-03 \n🗝️ ae-03-sa\n\n\n    \nThu, Sep 7\nVisualizing various types of data\n\n📖 r4ds: Chp 2.5 - 2.8 \n📖 r4ds: Chp 3 \n🎥 video\n\n🖥️ slides \n⌨️ ae-04 \n🗝️ ae-04-sa\n\n\n    3\nTue, Sep 12\n🦠 Class cancelled\n\n\n\n\n    \nThu, Sep 14\nGrammar of data wrangling\n\n📖 r4ds: Chp 4.1 - 4.5 \n🎥 video\n\n🖥️ slides \n⌨️ ae-05 \n🗝️ ae-05-sa\n\n📄 HW 1\n\n    4\nTue, Sep 19\n📊 Project 1 workday\n\n📖 r4ds: Chp 4.5 - 4.7 \n🎥 video\n\n\n\n    \nThu, Sep 21\nRubenstein Library Visit (Rubenstein Room 150)\n\n🎧 podcast \n📖 r4ds: Chp 5\n\n\n📄 HW 2\n\n    5\nTue, Sep 26\nWorking with multiple data frames\n\n📖 r4ds: Chp 20.1 - 20.4 \n🎥 video\n\n🖥️ slides \n⌨️ ae-06 \n🗝️ ae-06-sa\n\n\n    \nThu, Sep 28\nTidying data\n\n📖 r4ds: Chp 6 \n🎥 video\n\n🖥️ slides \n⌨️ ae-07 \n🗝️ ae-07-sa\n\n📊 Project 1 proposal\n\n    6\nTue, Oct 3\n✅ Exam 1 - In class\n\n\n\n\n    \nThu, Oct 5\nData types and classes\n\n📖 r4ds: Chp 17 \n🎥 video \n🎥 video\n\n🖥️ slides \n⌨️ ae-08 \n🗝️ ae-08-sa\n\n✅ Exam 1 - Take home\n\n    7\nTue, Oct 10\nPresentation ready plots I: Telling a story\n\n📖 fdv: Chp 29\n\n🖥️ slides \n📊 Project 1 peer review\n\n\n    \nThu, Oct 12\n📊 Project 1 presentation\n\n\n\n📊 Project 1\n\n    \nFri, Oct 13\n\n\n\n✅ Exam 1 - Take home redo (optional)\n\n    8\nTue, Oct 17\n🍂 Fall Break - No lecture\n\n\n\n\n    \nThu, Oct 19\nVisualizing and modeling relationships I\n\n📖 ims2: Chp 7\n\n🖥️ slides \n⌨️ ae-09 \n🗝️ ae-09-sa\n\n\n    9\nTue, Oct 24\nVisualizing and modeling relationships II\n\n📖 ims2: Chp 8\n\n🖥️ slides \n⌨️ ae-10 \n🗝️ ae-10-sa\n\n\n    \nThu, Oct 26\n📊 Project 2 workday\n\n\n\n📄 HW 3\n\n    10\nTue, Oct 31\nVisualizing and modeling relationships III\n\n📖 ims2: Chp 9\n\n\n\n    \nThu, Nov 2\nZoom lecture: Visualizing uncertainty I\n\n\n\n📄 HW 4\n\n    11\nTue, Nov 7\nVisualizing uncertainty II\n\n\n\n📊 Project 2 proposal\n\n    \nThu, Nov 9\nVisualizing uncertainty III\n\n\n\n📄 HW 5\n\n    12\nTue, Nov 14\n✅ Exam 2 - In class\n\n\n\n\n    \nThu, Nov 16\nVisual inference\n\n\n\n✅ Exam 2 - Take home\n\n    13\nTue, Nov 21\nGenerative art\n\n\n\n\n    \nThu, Nov 23\n🦃 Thanksgiving Break - No lecture\n\n\n\n\n    14\nTue, Nov 28\nColors\n\n\n\n\n    \nThu, Nov 30\nAccessibility\n\n\n\n📄 HW 6\n\n    15\nTue, Dec 5\nPresentation ready plots II: Themes + Axes + Annotation\n\n\n\n📊 Project 2 peer review\n\n    \nThu, Dec 7\n📊 Project 2 presentation\n\n\n\n📊 Project 2"
  }
]