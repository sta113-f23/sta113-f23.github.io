{
  "hash": "c48eae9c056366520072170fe3ea457d",
  "result": {
    "markdown": "---\ntitle: \"HW 2\"\neditor: visual\n---\n\n\n::: callout-important\nThis homework is due Thursday, Sep 21 at 5:00 pm ET.\n:::\n\n# Getting Started\n\n-   Go to the [sta113-f23](https://github.com/sta113-f23) organization on GitHub. Click on the repo with the prefix `hw-2`. It contains the starter documents you need to complete the homework assignment.\n\n-   Clone the repo and start a new project in Posit Cloud.\n\n-   Do the necessary things for setting up a PAT make sure it persists:\n\n    1.  In the Console, run `usethis::create_github_token()` to create a new PAT or grab the one you created previously from a space you might have safely stored it (e.g., 1Password or similar)\n    2.  In the Console, run `gitcreds::gitcreds_set()` and paste your PAT when prompted.\n    3.  In the Terminal, run `git config credential.helper store` to make sure your PAT persists throughout the whole time you're working on this assignment / Cloud project.\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\n```\n:::\n\n\n## Guidelines + tips {#sec-guidelines-tips}\n\nAs we've discussed in lecture, your plots should include an informative title, axes should be labeled, and careful consideration should be given to aesthetic choices.\n\nRemember that continuing to develop a sound workflow for reproducible data analysis is important as you complete this homework and other assignments in this course. There will be periodic reminders in this assignment to remind you to knit, commit, and push your changes to GithHub. You should have **at least 3 commits with meaningful commit messages** by the end of the assignment.\n\n::: callout-note\nNote: Do not let R output answer the question for you unless the question specifically asks for just a plot. For example, if the question asks for the number of columns in the data set, please type out the number of columns. You are subject to lose points if you do not.\n:::\n\n## Workflow + formatting\n\nMake sure to\n\n-   Update author name on your document.\n-   Label all code chunks informatively and concisely.\n-   Follow the Tidyverse code style guidelines.\n-   Make at least 3 commits.\n-   Resize figures where needed, avoid tiny or huge plots.\n-   Use informative title and axis labels.\n-   Turn in an organized, well formatted document.\n\n# Data\n\n::: callout-note\nUse this dataset for Exercises 1 to 7.\n:::\n\nThe data for this assignment week comes from [Data For Progress](https://www.dataforprogress.org/accountable-allies), by way of the [TidyTuesday project](https://github.com/rfordatascience/tidytuesday).[^1]\n\n[^1]: TidyTuesday is a weekly social data project organized by the R for Data Science Online Learning Community. Each Tuesday a new dataset is released and members of the R community analyze and visualize the data and share their findings on social media with the #TidyTuesday hashtag.\n\n> Each year, hundreds of corporations around the country participate in Pride, an annual celebration of the LGBTQ+ community's history and progress. They present themselves as LGBTQ+ allies, but new research from Data for Progress finds that in between their yearly parade appearances, dozens of these corporations are giving to state politicians behind some of the most bigoted and harmful policies in over a decade.\n>\n> Activists and allies wishing to hold these politicians accountable for bigotry can begin by holding their corporate backers accountable. In a new project series, Data for Progress has compiled a set of resources for activists, employees, community leaders, and lawmakers to push back on these policies and the prejudice powering them. We provide research tying the political giving of specific Fortune 500 companies to anti-LGBTQ+ politicians in six states, polling showing that such giving hurts the brands' favorability, and upcoming policy memos to understand the issue and to take action.\n\nThe data we will analyze contains monetary contributions from January 2019 to March 2022 to politicians sponsoring anti-LGBTQ+ legislation and/or government policy in the 2021-2022 legislative session. The specific bills and executive orders considered are shown in @tbl-bills.[^2]\n\n[^2]: For a more recent list of such bills, see <https://www.aclu.org/legislative-attacks-on-lgbtq-rights>.\n\n|           |                                                                                                       |                                                  |\n|-----------|-------------------------------------------------------------------------------------------------------|--------------------------------------------------|\n| **State** | **Bill Number**                                                                                       | **Purpose**                                      |\n| FL        | [CS/CS/HB 1557](https://www.flsenate.gov/Session/Bill/2022/1557/?Tab=BillText)                        | Silence discussion of queer identities in school |\n| AZ        | [SB.1138](https://apps.azleg.gov/BillStatus/BillOverview/76466)                                       | Restrict access to gender affirming healthcare   |\n| ID        | [H.675](https://legislature.idaho.gov/sessioninfo/2022/legislation/H0675/)                            | Restrict access to gender affirming healthcare   |\n| AL        | [SB184](https://legiscan.com/AL/text/SB184/2022)/[HB266](https://legiscan.com/AL/sponsors/HB266/2022) | Restrict access to gender affirming healthcare   |\n| TN        | [HB2670/SBSB2290](https://wapp.capitol.tn.gov/apps/Billinfo/default.aspx?BillNumber=HB2670&ga=112)    | Silence discussion of queer identities in school |\n| TX        | Executive Order                                                                                       | Restrict access to gender affirming healthcare   |\n\n: Anti-LGBTQ bills and executive orders considered {#tbl-bills .striped .hover}\n\nYou can read the data as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_lgbtq <- read_csv(\"data/anti-lgbtq.csv\")\n```\n:::\n\n\nThe companies included in this dataset are corporations who are either Fortune 500 companies or Pride sponsors.\n\nDescription of variables is given in @tbl-codebook.\n\n| Variable              | Description                                                                                                                                            |\n|-----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `company`             | Name of company                                                                                                                                        |\n| `pride_sponsor`       | Whether the company sponsored a Pride event in SF, NYC, Seattle, LA, Chicago, Houston, Atlanta, or Miami                                               |\n| `hrc_pledge`          | Whether the company took the [Human Rights Campaign Business Pledge](https://www.hrc.org/resources/business-statement-on-anti-lgbtq-state-legislation) |\n| `contribution_amount` | Amount of contribution, in USD                                                                                                                         |\n| `n_politicians`       | Number of anti-LGBTQ politicians supported                                                                                                             |\n| `n_states`            | Number of states where these politicians serve                                                                                                         |\n| `fortune_500`         | Whether the company is a [Fortune 500 company](https://fortune.com/ranking/fortune500/)                                                                |\n\n: Codebook for \\`anti_lgbtq\\` dataset {#tbl-codebook .striped .hover}\n\n# Exercises\n\n## Exercise 1\n\nUsing inline code to generate the number of rows and columns and include them in a sentence, answer the following questions:\n\n-   How many rows are in the `anti_lgbtq` dataset? What does each row represent?\n-   How many columns are in the `anti_lgbtq` dataset? Indicate the type of each variable (categorical or numerical).\n\n::: render-commit-push\nNow is a good time to render, commit, and push. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding. You can use a commit message like \"Finished Exercise 1\".\n:::\n\n## Exercise 2\n\nVisualize the distribution of contribution amounts using a histogram. Based on the shape, calculate the appropriate summary statistics for the center and spread of the distribution. Using the visualization and the summary statistics you calculated, describe the distribution of contribution amounts to politicians sponsoring anti-LGBTQ+ legislation and/or government policy in the 2021-2022 legislative session.\n\n::: render-commit-push\nNow is again a good time to render, commit, and push, with a commit message line \"Finished Exercise 2\". Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n:::\n\n## Exercise 3\n\nFor this exercise, make two visualizations that display the distribution of Pride sponsors based on whether the company is a Fortune 500 company.\n\n-   The first distribution should allow you to compare the **numbers** of Pride sponsors who are and are not Fortune 500 companies.\n\n-   The second visualization should allow you to compare the **proportions** instead.\n\nWhat information about these two variables can you\n\n-   get from both visualizations?\n\n-   get from from the first visualization, but not the second?\n\n-   get from from the second visualization, but not the first?\n\n-   get from neither visualization?\n\n::: render-commit-push\nRender, commit, and push, with an appropriate commit message. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n:::\n\n## Exercise 4\n\nFirst, make a bar plot of `hrc_pledge` and take note of the number of companies who have take the HRC pledge. Then, visualize the distribution of pride sponsors based on whether the company has made an HRC pledge. Make sure that your visualization allows you to make statements about the proportion of pride sponsors who have and have not made the HRC pledge. Describe the relationship, if any, between these two variables using features of your visualization as justification for your conclusions.\n\n::: render-commit-push\nRender, commit, and push, with an appropriate commit message. Make sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n:::\n\n## Exercise 5\n\nSuppose you're helping a friend who is writing a piece for The Chronicle about companies that both contribute to anti-LGBTQ+ politicians and sponsor Pride events. Your friend wonders: **Does sponsoring a Pride event make a difference?**\n\nLuckily, you can help them answer this question with data visualization!\n\n-   Make side-by-side box plots of contribution amounts based on whether the company sponsored a Pride.\n-   Include informative title and axis labels.\n-   Finally, write a brief narrative comparing the distributions of anti-LGBTQ+ contribution amounts from companies that did and did not sponsor Pride events. Your narrative should touch on whether having sponsored a Pride event \"makes a difference\" in terms of the contribution amount.\n\n::: render-commit-push\nRender, commit, and push, with an appropriate commit message. Before proceeding, check that you've committed and pushed all changed documents and your Git pane is completely empty.\n:::\n\n## Exercise 6\n\nNext, your friend is curious if about the relationship between contribution amounts and number of politicians companies contribute to. They wonder: **Does the contribution amount go up as the number of politicians contributed to increases?**\n\nOnce again, data visualization to the rescue!\n\n-   Visualize the relationship between the number of politicians (on the x-axis) and the contribution amount (on the y-axis) and describe the relationship between these two variables.\n-   Identify any extreme outliers -- you will need to dive into the data to figure out which companies these are. (Hint: There are two extreme outliers that are visibly very far away from the rest of the data.)\n-   Re-create the visualization without these two outliers and comment on whether the relationship is different without them.\n\nYour narrative should touch on whether the contribution amount goes up as the number of politicians contributed to increases.\n\n::: render-commit-push\nRender, commit, and push, with an appropriate commit message. Before proceeding, check that you've committed and pushed all changed documents and your Git pane is completely empty.\n:::\n\n## Exercise 7\n\nCreate a data visualization of interest to you based on these data. You can use the entire dataset, a subset based on a variable, or just a few companies of particular interest to you. Write a brief (2-3 sentence) narrative on why you chose this visualization and what the visualization displays/reveals.\n\n::: render-commit-push\nRender, commit, and push, with an appropriate commit message. Before proceeding, check that you've committed and pushed all changed documents and your Git pane is completely empty.\n:::\n\n::: callout-note\nThe following exercises are conceptual and do not require a dataset or writing original code, however you may need to refer to code documentation to answer them.\n:::\n\n## Exercise 8\n\n(a) Describe the following terms in your own words:\n    -   Data-to-ink ratio\n    -   Snake case\n    -   Whisker (of a box plot)\n(b) Read `?facet_wrap`. What does `nrow` do? What does `ncol` do? What other options control the layout of the individual panels? Why doesn't `facet_grid()` have `nrow` and `ncol` arguments?\n\n::: render-commit-push\nYou know the drill: render, commit, and push!\n:::\n\n## Exercise 9\n\n(a) **Read the docs:**\n\n    -   Run the following code. What does it do? Or, another way to ask this question is, what does the result tell you?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      distinct(origin, dest)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 224 × 2\n       origin dest \n       <chr>  <chr>\n     1 EWR    IAH  \n     2 LGA    IAH  \n     3 JFK    MIA  \n     4 JFK    BQN  \n     5 LGA    ATL  \n     6 EWR    ORD  \n     7 EWR    FLL  \n     8 LGA    IAD  \n     9 JFK    MCO  \n    10 LGA    ORD  \n    # ℹ 214 more rows\n    ```\n    \n    \n    :::\n    :::\n\n\n    -   Now run the following code. How is the output different? Hint: You may need to \"read the docs\", i.e., read the help documentation for `distinct()` to find out what setting the `.keep_all` argument to `TRUE` does.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    flights |> \n      distinct(origin, dest, .keep_all = TRUE)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 224 × 19\n        year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n       <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n     1  2013     1     1      517            515         2      830            819\n     2  2013     1     1      533            529         4      850            830\n     3  2013     1     1      542            540         2      923            850\n     4  2013     1     1      544            545        -1     1004           1022\n     5  2013     1     1      554            600        -6      812            837\n     6  2013     1     1      554            558        -4      740            728\n     7  2013     1     1      555            600        -5      913            854\n     8  2013     1     1      557            600        -3      709            723\n     9  2013     1     1      557            600        -3      838            846\n    10  2013     1     1      558            600        -2      753            745\n    # ℹ 214 more rows\n    # ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n    #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n    #   hour <dbl>, minute <dbl>, time_hour <dttm>\n    ```\n    \n    \n    :::\n    :::\n\n\n(b) **Code style:** Fix up the code style by spaces and line breaks where needed. Briefly describe your fixes. (Hint: You can refer to the [Tidyverse style guide](https://style.tidyverse.org/).)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights|>group_by(dest)|>summarize(MEAN.Arrival_delay=mean(arr_delay, na.rm = TRUE))|>arrange(desc(MEAN.Arrival_delay))\n```\n:::\n\n\n::: render-commit-push\nRender, commit, and push one last time.\n\nMake sure that you commit and push all changed documents and your Git pane is completely empty before proceeding.\n:::\n\n# Wrap up\n\n## Review\n\nBefore you call it \"done\",\n\n-   make sure you've answered all questions (or, at least, have not skipped any accidentally) and\n-   review the @sec-guidelines-tips section and make any edits/corrections needed.\n\nYou can change answers to exercises you've \"completed\" and commit and push again. We will only grade the final version of your assignment. You can commit and push as many times as you like until the deadline.\n\n## Submission\n\nYou do not have to do anything special to \"submit\" your assignment. We will close the repos to further pushes at the deadline, and will take your work as of that time point as your submission.\n\nIf you need to submit late for any reason, contact the professor.\n\n## Grading\n\n-   Exercise 1-9: 10 points each\n-   Workflow + formatting: 10 points\n-   Total: 100 points\n",
    "supporting": [
      "hw-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}