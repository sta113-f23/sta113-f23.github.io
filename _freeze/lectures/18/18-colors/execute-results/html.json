{
  "hash": "2434afa13e137e76cb244e1bc2765c62",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Colors\"\nsubtitle: Lecture 18\nformat: \n  revealjs:\n    fig-align: center\n    fig-width: 5\n    fig-asp: 0.618\n---\n\n\n# Warm-up\n\n## Announcements\n\n-   Any project questions?\n-   Any specific requests for tips to cover on Tuesday?\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(countdown)\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(ggthemes)\nlibrary(cowplot)\nlibrary(colorspace)\nlibrary(ggrepel)\n\ntheme_set(theme_gray(14)) # 16 for full width, 18 for half width \n```\n:::\n\n\n# Color scales\n\n## Uses of color in data visualization\n\n::: columns\n::: {.column width=\"40%\"}\n1.  Distinguish categories (qualitative)\n:::\n\n::: {.column width=\"60%\"}\n![](images/qualitative.png)\n:::\n:::\n\n## Qualitative scale example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/popgrowth-vs-popsize-colored-1.png){width=720}\n:::\n:::\n\n\nPalette name: Okabe-Ito\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Qualitative scale example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/popgrowth-vs-popsize-colored2-1.png){width=720}\n:::\n:::\n\n\nPalette name: ColorBrewer Set1\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Qualitative scale example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/popgrowth-vs-popsize-colored3-1.png){width=720}\n:::\n:::\n\n\nPalette name: ColorBrewer Set3\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Uses of color in data visualization\n\n::: columns\n::: {.column width=\"40%\"}\n1.  Distinguish categories (qualitative)\n2.  Represent numeric values (sequential)\n:::\n\n::: {.column width=\"60%\"}\n![](images/qualitative.png) ![](images/sequential.png)\n:::\n:::\n\n## Sequential scale example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/four-locations-temps-by-month-1.png){width=864}\n:::\n:::\n\n\nPalette name: Viridis\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Sequential scale example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/four-locations-temps-by-month2-1.png){width=864}\n:::\n:::\n\n\nPalette name: Inferno\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Sequential scale example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/four-locations-temps-by-month3-1.png){width=864}\n:::\n:::\n\n\nPalette name: Cividis\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Uses of color in data visualization\n\n::: columns\n::: {.column width=\"40%\"}\n1.  Distinguish categories (qualitative)\n2.  Represent numeric values (sequential)\n3.  Represent numeric values (diverging)\n:::\n\n::: {.column width=\"60%\"}\n![](images/qualitative.png) ![](images/sequential.png) ![](images/diverging.png)\n:::\n:::\n\n## Diverging scale example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/forensic-correlations1-1.png){width=384}\n:::\n:::\n\n\nPalette name: ColorBrewer PiYG\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Diverging scale example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/forensic-correlations2-1.png){width=384}\n:::\n:::\n\n\nPalette name: Carto Earth\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Diverging scale example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/forensic-correlations3-1.png){width=384}\n:::\n:::\n\n\nPalette name: Blue-Red\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Uses of color in data visualization\n\n::: columns\n::: {.column width=\"40%\"}\n1.  Distinguish categories (qualitative)\n2.  Represent numeric values (sequential)\n3.  Represent numeric values (diverging)\n4.  Highlight\n:::\n\n::: {.column width=\"60%\"}\n![](images/qualitative.png) ![](images/sequential.png) ![](images/diverging.png) ![](images/highlight.png)\n:::\n:::\n\n## Highlight example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/Aus-athletes-track-1.png){width=576}\n:::\n:::\n\n\nPalette name: Grays with accents\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Highlight example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/Aus-athletes-track2-1.png){width=576}\n:::\n:::\n\n\nPalette name: Okabe-Ito accent\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Highlight example\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/Aus-athletes-track3-1.png){width=576}\n:::\n:::\n\n\nPalette name: ColorBrewer accent\n\n::: aside\nFigure redrawn from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Uses of color in data visualization\n\n::: columns\n::: {.column width=\"40%\"}\n1.  Distinguish categories (qualitative)\n2.  Represent numeric values (sequential)\n3.  Represent numeric values (diverging)\n4.  Highlight\n:::\n\n::: {.column width=\"60%\"}\n![](images/qualitative.png) ![](images/sequential.png) ![](images/diverging.png) ![](images/highlight.png)\n:::\n:::\n\n# Color scales in **ggplot2**\n\n## `temps_months` data\n\nGetting the `temps_months` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemps_months <- read_csv(\"data/tempnormals.csv\") |>\n  group_by(location, month_name) |>\n  summarize(mean = mean(temperature)) |>\n  mutate(\n    month = factor(\n      month_name,\n      levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n    ),\n    location = factor(\n      location, levels = c(\"Death Valley\", \"Houston\", \"San Diego\", \"Chicago\")\n    )\n  ) |>\n  select(-month_name)\n```\n:::\n\n\n## `temps_months` data {.smaller}\n\nThe `temps_months` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemps_months\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 48 × 3\n# Groups:   location [4]\n   location  mean month\n   <fct>    <dbl> <fct>\n 1 Chicago   50.4 Apr  \n 2 Chicago   74.1 Aug  \n 3 Chicago   29   Dec  \n 4 Chicago   28.9 Feb  \n 5 Chicago   24.8 Jan  \n 6 Chicago   75.8 Jul  \n 7 Chicago   71.0 Jun  \n 8 Chicago   38.8 Mar  \n 9 Chicago   60.9 May  \n10 Chicago   41.6 Nov  \n# ℹ 38 more rows\n```\n\n\n:::\n:::\n\n\n## `popgrowth` data\n\nGetting the `popgrowth` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nUS_census <- read_csv(\"data/US_census.csv\")\nUS_regions <- read_csv(\"data/US_regions.csv\")\npopgrowth <- left_join(US_census, US_regions) |>\n    group_by(region, division, state) |>\n    summarize(\n      pop2000 = sum(pop2000, na.rm = TRUE),\n      pop2010 = sum(pop2010, na.rm = TRUE),\n      popgrowth = (pop2010-pop2000)/pop2000,\n      .groups = \"drop\"\n    ) |>\n    mutate(region = factor(region, levels = c(\"West\", \"South\", \"Midwest\", \"Northeast\")))\n```\n:::\n\n\n## `popgrowth` data {.smaller}\n\nThe `popgrowth` data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopgrowth\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51 × 6\n   region  division           state      pop2000  pop2010 popgrowth\n   <fct>   <chr>              <chr>        <dbl>    <dbl>     <dbl>\n 1 Midwest East North Central Illinois  12419293 12830632   0.0331 \n 2 Midwest East North Central Indiana    6080485  6483802   0.0663 \n 3 Midwest East North Central Michigan   9938444  9883640  -0.00551\n 4 Midwest East North Central Ohio      11353140 11536504   0.0162 \n 5 Midwest East North Central Wisconsin  5363675  5686986   0.0603 \n 6 Midwest West North Central Iowa       2926324  3046355   0.0410 \n 7 Midwest West North Central Kansas     2688418  2853118   0.0613 \n 8 Midwest West North Central Minnesota  4919479  5303925   0.0781 \n 9 Midwest West North Central Missouri   5595211  5988927   0.0704 \n10 Midwest West North Central Nebraska   1711263  1826341   0.0672 \n# ℹ 41 more rows\n```\n\n\n:::\n:::\n\n\n## **ggplot2** color scale functions {.smaller}\n\n| Scale function      | Aesthetic | Data type | Palette type |\n|:--------------------|:----------|:----------|:-------------|\n| `scale_color_hue()` | `color`   | discrete  | qualitative  |\n\n## **ggplot2** color scale functions {.smaller}\n\n| Scale function      | Aesthetic | Data type | Palette type |\n|:--------------------|:----------|:----------|:-------------|\n| `scale_color_hue()` | `color`   | discrete  | qualitative  |\n| `scale_fill_hue()`  | `fill`    | discrete  | qualitative  |\n\n## **ggplot2** color scale functions {.smaller}\n\n| Scale function           | Aesthetic | Data type  | Palette type |\n|:-------------------------|:----------|:-----------|:-------------|\n| `scale_color_hue()`      | `color`   | discrete   | qualitative  |\n| `scale_fill_hue()`       | `fill`    | discrete   | qualitative  |\n| `scale_color_gradient()` | `color`   | continuous | sequential   |\n\n## **ggplot2** color scale functions {.smaller}\n\n| Scale function            | Aesthetic | Data type  | Palette type |\n|:--------------------------|:----------|:-----------|:-------------|\n| `scale_color_hue()`       | `color`   | discrete   | qualitative  |\n| `scale_fill_hue()`        | `fill`    | discrete   | qualitative  |\n| `scale_color_gradient()`  | `color`   | continuous | sequential   |\n| `scale_color_gradient2()` | `color`   | continuous | diverging    |\n\n## **ggplot2** color scale functions {.smaller}\n\n| Scale function            | Aesthetic | Data type  | Palette type                       |\n|:-----------------|:-----------------|:------------------|:------------------|\n| `scale_color_hue()`       | `color`   | discrete   | qualitative                        |\n| `scale_fill_hue()`        | `fill`    | discrete   | qualitative                        |\n| `scale_color_gradient()`  | `color`   | continuous | sequential                         |\n| `scale_color_gradient2()` | `color`   | continuous | diverging                          |\n| `scale_fill_viridis_c()`  | `color`   | continuous | sequential                         |\n| `scale_fill_viridis_d()`  | `fill`    | discrete   | sequential                         |\n| `scale_color_brewer()`    | `color`   | discrete   | qualitative, diverging, sequential |\n| `scale_fill_brewer()`     | `fill`    | discrete   | qualitative, diverging, sequential |\n| `scale_color_distiller()` | `color`   | continuous | qualitative, diverging, sequential |\n\n...\nand there are many many more\n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic()\n  # no fill scale defined, default is scale_fill_gradient()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/temps-tiles1-out-1.png){width=672}\n:::\n:::\n\n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_gradient()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/temps-tiles2-out-1.png){width=672}\n:::\n:::\n\n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_viridis_c()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/temps-tiles3-out-1.png){width=672}\n:::\n:::\n\n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_viridis_c(option = \"B\", begin = 0.15)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/temps-tiles4-out-1.png){width=672}\n:::\n:::\n\n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_distiller(palette = \"YlGnBu\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/temps-tiles5-out-1.png){width=672}\n:::\n:::\n\n\n# Color scales in the **colorspace** package\n\n## The **colorspace** package creates some order {.smaller}\n\nScale name: `scale_<aesthetic>_<datatype>_<colorscale>()`\n\n-   `<aesthetic>`: name of the aesthetic (`fill`, `color`, `colour`)\n-   `<datatype>`: type of variable plotted (`discrete`, `continuous`, `binned`)\n-   `<colorscale>`: type of the color scale (`qualitative`, `sequential`, `diverging`, `divergingx`)\n\n. . .\n\n| Scale function                        | Aesthetic | Data type  | Palette type |\n|:------------------|:----------------|:----------------|:-------------------|\n| `scale_color_discrete_qualitative()`  | `color`   | discrete   | qualitative  |\n| `scale_fill_continuous_sequential()`  | `fill`    | continuous | sequential   |\n| `scale_colour_continous_divergingx()` | `colour`  | continuous | diverging    |\n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_continuous_sequential(palette = \"YlGnBu\", rev = FALSE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/temps-tiles6-out-1.png){width=672}\n:::\n:::\n\n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_continuous_sequential(palette = \"Viridis\", rev = FALSE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/temps-tiles7-out-1.png){width=672}\n:::\n:::\n\n\n## Examples\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(temps_months, aes(x = month, y = location, fill = mean)) + \n  geom_tile(width = 0.95, height = 0.95) + \n  coord_fixed(expand = FALSE) +\n  theme_classic() +\n  scale_fill_continuous_sequential(palette = \"Inferno\", begin = 0.15, rev = FALSE)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/temps-tiles8-out-1.png){width=672}\n:::\n:::\n\n\n## HCL (Hue-Chroma-Luminance) palettes: Sequential\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolorspace::hcl_palettes(type = \"sequential\", plot = TRUE)\n```\n:::\n\n\n## HCL palettes: Diverging\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolorspace::hcl_palettes(type = \"diverging\", plot = TRUE, n = 9)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/colorspace-palettes-div-out-1.png){width=576}\n:::\n:::\n\n\n## HCL palettes: Divergingx\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolorspace::divergingx_palettes(plot = TRUE, n = 9)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/colorspace-palettes-divx-out-1.png){width=768}\n:::\n:::\n\n\n# Setting colors manually\n\n## Discrete, qualitative scales are best set manually {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10()\n  # no color scale defined, default is scale_color_hue()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/qual-scales-example1-out-1.png){width=576}\n:::\n:::\n\n\n## Discrete, qualitative scales are best set manually {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_color_hue()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/qual-scales-example2-out-1.png){width=576}\n:::\n:::\n\n\n## Discrete, qualitative scales are best set manually {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggthemes)  # for scale_color_colorblind()\n\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_color_colorblind()  # uses Okabe-Ito colors\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/qual-scales-example3-out-1.png){width=576}\n:::\n:::\n\n\n## Discrete, qualitative scales are best set manually {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(popgrowth, aes(x = pop2000, y = popgrowth, color = region)) +\n  geom_point() +\n  scale_x_log10() +\n  scale_color_manual(\n    values = c(West = \"#E69F00\", South = \"#56B4E9\", Midwest = \"#009E73\", Northeast = \"#F0E442\")\n  )\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](18-colors_files/figure-revealjs/qual-scales-example4-out-1.png){width=576}\n:::\n:::\n\n\n## Okabe-Ito RGB codes {.smaller}\n\n![](https://clauswilke.com/dataviz/pitfalls_of_color_use_files/figure-html/palette-Okabe-Ito-1.png)\n\n| Name           | Hex code | R, G, B (0-255) |\n|:---------------|:---------|:----------------|\n| orange         | #E69F00  | 230, 159, 0     |\n| sky blue       | #56B4E9  | 86, 180, 233    |\n| bluish green   | #009E73  | 0, 158, 115     |\n| yellow         | #F0E442  | 240, 228, 66    |\n| blue           | #0072B2  | 0, 114, 178     |\n| vermilion      | #D55E00  | 213, 94, 0      |\n| reddish purple | #CC79A7  | 204, 121, 167   |\n| black          | #000000  | 0, 0, 0         |\n\n::: aside\nFigure from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Further reading\n\n-   Fundamentals of Data Visualization: [Chapter 4: Color scales](https://clauswilke.com/dataviz/color-basics.html)\n-   Fundamentals of Data Visualization: [Figure 19.10: Okabe-Ito color palette](https://clauswilke.com/dataviz/color-pitfalls.html#fig:palette-Okabe-Ito)\n-   **ggplot2** book: [Colour scales and legends](https://ggplot2-book.org/scales-colour)\n-   **ggplot2** reference documentation: [Scales](https://ggplot2.tidyverse.org/reference/index.html#section-scales)\n-   **colorspace** package: [HCL-Based Color Scales for ggplot2](https://colorspace.r-forge.r-project.org/articles/ggplot2_color_scales.html)\n\n# A few considerations when choosing colors\n\n## 1. Avoid high chroma\n\n::: columns\n::: {.column width=\"50%\"}\nHigh chroma: Toys\n\n![](images/toys-image.jpg){width=\"500\"}\n:::\n\n::: {.column width=\"50%\"}\nLow chroma: \"Elegance\"\n\n![](images/home-interior.jpg){width=\"500\" height=\"315\"}\n:::\n:::\n\n::: aside\n[Photo by Pixabay from Pexels](https://www.pexels.com/photo/super-mario-and-yoshi-plastic-figure-163077/) [Photo by Saviesa Home from Pexels](https://www.pexels.com/photo/kitchen-island-2089698/)\n:::\n\n## 2. Be aware of color-vision deficiency\n\n5%–8% of men are color blind!\n\n. . .\n\n![](https://clauswilke.com/dataviz/pitfalls_of_color_use_files/figure-html/red-green-cvd-sim-1.png)\n\nRed-green color-vision deficiency is the most common\n\n## 2. Be aware of color-vision deficiency\n\n5%–8% of men are color blind!\n\n![](https://clauswilke.com/dataviz/pitfalls_of_color_use_files/figure-html/blue-green-cvd-sim-1.png)\n\nBlue-green color-vision deficiency is rare but does occur\n\n## 2. Be aware of color-vision deficiency\n\nChoose colors that can be distinguished with CVD\n\n![](https://clauswilke.com/dataviz/pitfalls_of_color_use_files/figure-html/PiYG-cvd-sim-1.png)\n\n## Consider using the Okabe-Ito scale {.smaller}\n\n![](https://clauswilke.com/dataviz/pitfalls_of_color_use_files/figure-html/palette-Okabe-Ito-1.png)\n\n| Name           | Hex code    | R, G, B (0-255) |\n|:---------------|:------------|:----------------|\n| orange         | #E69F00     | 230, 159, 0     |\n| sky blue       | #56B4E9     | 86, 180, 233    |\n| bluish green   | #009E73     | 0, 158, 115     |\n| yellow         | #F0E442     | 240, 228, 66    |\n| blue           | #0072B2     | 0, 114, 178     |\n| vermilion      | #D55E00     | 213, 94, 0      |\n| reddish purple | #CC79A7     | 204, 121, 167   |\n| black          | #000000     | 0, 0, 0         |\n\n::: aside\nFigure from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## CVD is worse for thin lines and tiny dots\n\nWhen in doubt, run CVD simulations\n\n![](https://clauswilke.com/dataviz/pitfalls_of_color_use_files/figure-html/colors-thin-lines-1.png){width=\"600\"}\n\n::: aside\nFigure from [Claus O. Wilke. Fundamentals of Data Visualization. O'Reilly, 2019.](https://clauswilke.com/dataviz)\n:::\n\n## Further reading\n\n-   Fundamentals of Data Visualization: [Chapter 19: Common pitfalls of color use](https://clauswilke.com/dataviz/color-pitfalls.html)\n-   Wikipedia: [HSL and HSV](https://en.wikipedia.org/wiki/HSL_and_HSV)\n-   **colorspace** package documentation: [Color Spaces](https://colorspace.r-forge.r-project.org/articles/color_spaces.html)\n-   **colorspace** package documentation: [Apps for Choosing Colors and Palettes Interactively](https://colorspace.r-forge.r-project.org/articles/hclwizard.html)\n",
    "supporting": [
      "18-colors_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}