{
  "hash": "454f33fd80bdd3158a4d94da2f9696c1",
  "result": {
    "markdown": "---\ntitle: Data types of classes\nsubtitle: Lecture 8\nformat: revealjs\n---\n\n\n\n# Warm up\n\n## While you wait\n\n::: question\n{{< fa user >}} Check your email for an email from TEAMMATES. Provide peer feedback to your teammates (and to yourself). Be constructive and encouraging!\n:::\n\n## Course content\n\n-   Today: Last day of \"welcome to R\" content\n\n-   Remainder of class: Greater emphasis on \"data visualization with R\"\n\n## Project 1 {.smaller}\n\n-   Proposals have been reviewed and each team has a number of issues on their repos with my feedback\n\n-   Between today and next Tuesday: Review proposal feedback, improve your proposals by closing issues with specific commits (more on this in a few), move on from working on your proposal to your project and make progress, particularly working on your visualizations\n\n-   Next Tuesday: Start with peer review, then learn about polishing your plots\n\n-   Next Tuesday - Thursday: Improve your projects by closing peer review issue with specific commits, finalize your presentation and your writeup\n\n-   Next Thursday: Project presentations\n\n## Project webpages\n\n::: columns\n::: {.column width=\"70%\"}\n::: incremental\n-   Each of you now have a webpage for your projects!\n\n-   This was achieved by adding a `_quarto.yml` file to each of your repos.\n:::\n:::\n\n::: {.column width=\"30%\"}\n![](images/url.png){fig-align=\"right\" width=\"300\"}\n:::\n:::\n\n. . .\n\n::: incremental\n-   The first thing you should do is go to your Posit Cloud project and, in the Git tab, **pull** my changes from your repo.\n-   Then, relaunch your project -- three dots on top right \\> Relaunch.\n-   Going forward, when you want to see the output of what you're working on, click on **Render Project** in the **Build** tab.\n:::\n\n## Addressing proposal feedback\n\n-   Each piece of feedback is noted as an **issue**\n\n![](images/issues.png){fig-align=\"center\"}\n\n. . .\n\n-   Review each issue and address them -- that means make a correction to your project that specifically addresses that issue, commit with a message like\n\n    > Moved dataset into the data folder, closes #1.\n\n    where `#1` refers to the issue number, and push. This will close the issue and associate the commit that addressed it with the issue.\n\n## Project questions?\n\nbefore we get back to our regularly scheduled programming...\n\n# Types and classes\n\n## Types and classes\n\n-   Type is how an object is stored in memory, e.g.,\n\n    -   `double`: a real number stored in double-precision floating point format.\n    -   `integer`: an integer (positive or negative)\n\n-   Class is metadata about the object that can determine how common functions operate on that object, e.g.,\n\n-   `factor`\n\n## Types of vectors\n\n::: columns\n::: {.column width=\"50%\"}\nYou'll commonly encounter:\n\n-   `logical`\n-   `integer`\n-   `double`\n-   `character`\n:::\n\n::: {.column width=\"50%\"}\nYou'll less commonly encounter:\n\n-   `list`\n-   `NULL`\n-   `complex`\n-   `raw`\n:::\n:::\n\n## Types of functions\n\nYes, functions have types too, but you don't need to worry about the differences in the context of doing data science.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(mean) # regular function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"closure\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(`$`) # internal function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"special\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(sum) # primitive function\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"builtin\"\n```\n\n\n:::\n:::\n\n\n\n## Factors\n\nA `factor` is a vector that can contain only predefined values. It is used to store categorical data.\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- factor(c(\"a\", \"b\", \"b\", \"a\"))\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a b b a\nLevels: a b\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$levels\n[1] \"a\" \"b\"\n\n$class\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n![](images/factor.png){fig-align=\"center\" width=\"400\"}\n:::\n:::\n\n## Other classes\n\nJust a couple of examples...\n\n::: columns\n::: {.column width=\"50%\"}\nDate:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoday <- Sys.Date()\ntoday\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-10-05\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$class\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\nDate-time:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnow <- as.POSIXct(\"2022-09-22 10:15\", tz = \"EST\")\nnow\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022-09-22 10:15:00 EST\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(now)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$class\n[1] \"POSIXct\" \"POSIXt\" \n\n$tzone\n[1] \"EST\"\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## `ae-08`\n\n::: task\n\n\n{{< fa user >}}\n\n\n\n\n\n-   Go to the course [GitHub org](https://github.com/sta113-f23) and find your `ae-08-hotels` (repo name will be suffixed with your GitHub name).\n-   Clone the repo in Posit Cloud, open the Quarto document in the repo, set up a new PAT, and follow along and complete the exercises.\n-   Render, commit, and push your edits as you work through it\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}