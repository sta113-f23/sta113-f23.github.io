{
  "hash": "29f29b29ee84ee98bc3e23f6ea1ffff7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing and modeling relationships IV\"\nsubtitle: Lecture 13\nformat: \n  revealjs:\n    fig-align: center\n    fig-width: 5\n    fig-asp: 0.618\n---\n\n\n# Warm-up\n\n## Announcements\n\n-   HW 4 posted, due next Thursday\n\n## Today's goals\n\n-   Finish visualizing decision boundaries for classification models\n\n-   Define sensitivity, specificity, and ROC curves\n\n# Logistic regression\n\n## `ae-11-spam` {.smaller}\n\nUltimate goal: Recreate the following visualization.\n\n![](images/decision-regions-1.png)\n\n## `ae-11-spam` {.smaller}\n\nReminder of instructions for getting started with application exercises:\n\n::: task\n\n{{< fa user >}}\n\n\n\n-   Go to the course [GitHub org](https://github.com/sta113-f23) and find your `ae-11-spam` (repo name will be suffixed with your GitHub name).\n-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**). Click on the clipboard icon to copy the repo URL.\n-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n-   Click *ae-11-spam.qmd* to open the template Quarto file. This is where you will write up your code and narrative for the lab.\n:::\n\n# Evaluating predictive performance\n\n## Sensitivity and specificity\n\n::: columns\n::: {.column width=\"60%\"}\n-   **Sensitivity** is the true positive rate -- is the probability of a positive prediction, given positive observed.\n\n-   **Specificity** is the true negative rate - is the probability of a negative test result given negative observed.\n:::\n\n::: {.column width=\"40%\"}\n![Source: Wikipedia](images/clipboard-3258248075.png){width=\"300\"}\n:::\n:::\n\n## Visualizing sensitivity and specificity\n\n-   The plot we created earlier displays sensitivity and specificity for a given decision bound.\n\n-   An alternative display can visualize various sensitivity and specificity rates for all possible decision bounds.\n\n![](images/decision-regions-1.png){fig-align=\"center\" width=\"600\"}\n\n## ROC curves\n\n**Receiver operating characteristic (ROC) curve**^+^ plot true positive rate vs. false positive rate (1 - specificity).\n\n\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nmy_model_aug |>\n  roc_curve(\n    truth = type,\n    .pred_1,\n    event_level = \"second\"\n  ) |>\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](13-vizualize-model-relationships-IV_files/figure-revealjs/roc-curve-1.png){width=480}\n:::\n:::\n\n\n::: aside\nOriginally developed for operators of military radar receivers, hence the name.\n:::\n\n## Area under ROC curve\n\n::: task\nDo you think a better model has a large or small area under the ROC curve?\n:::\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_model_aug |>\n  roc_auc(\n    truth = type,\n    .pred_1,\n    event_level = \"second\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.870\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](13-vizualize-model-relationships-IV_files/figure-revealjs/unnamed-chunk-4-1.png){width=480}\n:::\n:::\n\n:::\n:::\n",
    "supporting": [
      "13-vizualize-model-relationships-IV_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}