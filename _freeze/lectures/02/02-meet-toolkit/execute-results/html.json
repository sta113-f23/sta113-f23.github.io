{
  "hash": "ef766546aceefe6dde28323352ff988d",
  "result": {
    "markdown": "---\ntitle: Meet the toolkit\nsubtitle: Lecture 2\nformat: revealjs\nauto-stretch: false\n---\n\n\n# Warm up\n\n## Reflection\n\n::: question\nWhat is one thing you learned from your reading that was \"new\" to you? And what is one question you have from the reading?\n:::\n\n## Announcements\n\n-   My office hours: Thursdays 10-11am on Zoom (link to be posted!)\n\n-   Course webpage updated with tentative schedule for due dates\n\n# From last time...\n\n## Application exercise: UN Votes\n\n::: task\nGo to Posit Cloud and start the project called **ae-01-un-votes**. Render the document titled `unvotes.qmd`. Review the narrative and the data visualization you just created. Then, change \"Turkey\" to another country of your choice. Re-render the document. Show the plot you created to your neighbor and discuss (1) why you chose that country and (2) how this new visualization is different than the original (and what that says about country politics, if anything).\n:::\n\n# Meet the toolkit: Computing with R and RStudio\n\n## Learning goals {.smaller}\n\nBy the end of the course, you will be able to...\n\n::: incremental\n-   gain insight from data\n-   gain insight from data, **reproducibly**\n-   gain insight from data, reproducibly, **using modern programming tools and techniques**\n-   gain insight from data, reproducibly **and collaboratively**, using modern programming tools and techniques\n-   gain insight from data, reproducibly **(with literate programming and version control)** and collaboratively, using modern programming tools and techniques\n:::\n\n# Reproducible data analysis\n\n## Reproducibility checklist {.smaller}\n\n::: question\nWhat does it mean for a data analysis to be \"reproducible\"?\n:::\n\n. . .\n\n**Near-term goals:**\n\n-   Are the tables and figures reproducible from the code and data?\n-   Does the code actually do what you think it does?\n-   In addition to what was done, is it clear *why* it was done?\n\n. . .\n\n**Long-term goals:**\n\n-   Can the code be used for other data?\n-   Can you extend the code to do other things?\n\n## Toolkit for reproducibility\n\n-   Scriptability $\\rightarrow$ R\n-   Literate programming (code, narrative, output in one place) $\\rightarrow$ Quarto\n-   Version control $\\rightarrow$ Git / GitHub\n\n# R and RStudio\n\n## R and RStudio {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/r-logo.png){fig-alt=\"R logo\" fig-align=\"center\"}\n\n-   R is an open-source statistical **programming language**\n-   R is also an environment for statistical computing and graphics\n-   It's easily extensible with *packages*\n:::\n\n::: {.column .fragment width=\"50%\"}\n![](images/rstudio-logo.png){fig-alt=\"RStudio logo\"}\n\n-   RStudio is a convenient interface for R called an **IDE** (integrated development environment), e.g. *\"I write R code in the RStudio IDE\"*\n-   RStudio is not a requirement for programming with R, but it's very commonly used by R programmers and data scientists\n:::\n:::\n\n## R vs. RStudio\n\n[![](images/r_vs_rstudio.png){fig-alt=\"On the left: a car engine. On the right: a car dashboard. The engine is labelled R. The dashboard is labelled RStudio.\" fig-align=\"center\" width=\"1001\"}](https://moderndive.com/1-getting-started.html)\n\n::: aside\nSource: [Modern Dive](https://moderndive.com/1-getting-started.html).\n:::\n\n## R packages\n\n::: incremental\n-   **Packages**: Fundamental units of reproducible R code, including reusable R functions, the documentation that describes how to use them, and sample data<sup>1</sup>\n\n-   As of September 2022, there are over 18,000 R packages available on **CRAN** (the Comprehensive R Archive Network)<sup>2</sup>\n\n-   We're going to work with a small (but important) subset of these!\n:::\n\n::: aside\n<sup>1</sup> Wickham and Bryan, [R Packages](https://r-pkgs.org/).\n\n<sup>2</sup> [CRAN contributed packages](https://cran.r-project.org/web/packages/).\n:::\n\n## Tour: R and RStudio\n\n![](images/tour-r-rstudio.png)\n\n## A short list (for now) of R essentials\n\n-   Functions are (most often) verbs, followed by what they will be applied to in parentheses:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndo_this(to_this)\ndo_that(to_this, to_that, with_those)\n```\n:::\n\n\n. . .\n\n-   Packages are installed with the `install.packages()` function and loaded with the `library` function, once per session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"package_name\")\nlibrary(package_name)\n```\n:::\n\n\n## R essentials (continued)\n\n-   Columns (variables) in data frames are accessed with `$`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndataframe$var_name\n```\n:::\n\n\n. . .\n\n-   Object documentation can be accessed with `?`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\n\n## tidyverse\n\n::: columns\n::: {.column width=\"50%\"}\n[![](images/tidyverse.png){fig-alt=\"Hex logos for dplyr, ggplot2, forcats, tibble, readr, stringr, tidyr, and purrr\"}](https://tidyverse.org)\n:::\n\n::: {.column width=\"50%\"}\n[tidyverse.org](https://www.tidyverse.org/)\n\n-   The **tidyverse** is an opinionated collection of R packages designed for data science\n-   All packages share an underlying philosophy and a common grammar\n:::\n:::\n\n# Quarto\n\n## Quarto\n\n::: incremental\n-   Fully reproducible reports -- each time you render the analysis is ran from the beginning\n-   Code goes in chunks narrative goes outside of chunks\n-   A visual editor for a familiar / Google docs-like editing experience\n:::\n\n## Tour: Quarto\n\n![](images/tour-quarto.png){fig-alt=\"RStudio IDE with a Quarto document, source code on the left and output on the right. Annotated to show the YAML, a link, a header, and a code chunk.\" fig-align=\"center\"}\n\n## How will we use Quarto?\n\n-   Every assignment / report / project / etc. is an Quarto document\n-   You'll always have a template Quarto document to start with\n-   The amount of scaffolding in the template will decrease over the semester\n\n## Application exercise: Flint\n\n::: task\nGo to Posit Cloud and start the project called **ae-02-flint**. Open the document titled `flint.qmd`.\n:::\n\n# Wrap up\n\n## Next time\n\n-   We'll continue out \"Meet the toolkit\" journey, focusing on version control tools, Git and GitHub, the last piece of the puzzle\n\n-   We'll then move on to the nuts and bolts of data visualization in R with ggplot2\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}