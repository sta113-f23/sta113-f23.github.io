{
  "hash": "ccf1cc00ae34748ccfd1b1f01fe23a8e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing uncertainty II\"\nsubtitle: Lecture 15\nformat: \n  revealjs:\n    fig-align: center\n    fig-width: 5\n    fig-asp: 0.618\n---\n\n\n# Warm-up\n\n## Announcements\n\n-   Project 2 proposal due tomorrow at 5 pm.\n\n# Confidence intervals\n\n## Packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\n```\n:::\n\n\n## Airbnb in Asheville, NC\n\nWe have data on the price per guest (ppg) for a random sample of 50 Airbnb listings in 2020 for Asheville, NC. We are going to use these data to investigate what we would of expected to pay for an Airbnb in in Asheville, NC in June 2020.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nabb <- read_csv(\"data/asheville.csv\")\n\nglimpse(abb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 50\nColumns: 1\n$ ppg <dbl> 48.00000, 40.00000, 99.00000, 13.00000, 55.00000, 75.00000, 74.000…\n```\n\n\n:::\n:::\n\n\n## Terminology\n\n-   **Population parameter** - What we are interested in. Statistical measure that describes an entire population.\n\n-   **Sample statistic (point estimate)** - describes a sample. A piece of information you get from a fraction of the population.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nabb |> \n  summarize(ppg.mean = mean(ppg))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  ppg.mean\n     <dbl>\n1     76.6\n```\n\n\n:::\n:::\n\n\n## Catching a fish\n\n::: task\nSuppose you're fishing in a murky lake. Are you more likely to catch a fish using a spear or a net?\n:::\n\n. . .\n\n- Spear $\\rightarrow$ point estimate\n- Net $\\rightarrow$ interval estimate\n\n## Constructing confidence intervals\n\nQuantifying the variability of the sample statistics to help calculate a range of plausible values for the population parameter of interest:\n\n- Via simulation $\\rightarrow$ using bootstrapping -- using a statistical procedure that re samples a single data set to create many simulated samples.\n\n- Via mathematical formulas $\\rightarrow$ using the Central Limit Theorem\n\n## Bootstrapping, what?\n\n- The term bootstrapping comes from the phrase \"pulling oneself up by one's bootstraps\", which is a metaphor for accomplishing an impossible task without any outside help.\n\n- Impossible task: estimating a population parameter using data from only the given sample.\n\n. . .\n\n::: callout-note\nNote: This notion of saying something about a population parameter using only information from an observed sample is the crux of statistical inference, it is not limited to bootstrapping.\n:::\n\n## Bootstrapping, how?\n\n- Resample with replacement from our data n times, where n is the sample size\n- Calculate the sample statistic of interest of the new, resampled (bootstrapped) sample and record the value\n- Do this entire process many many times to build the **bootstrap distribution**\n\n## Bootstrapping Airbnb rentals\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(25) \n\nboot_dist_abb <- abb |>\n  specify(response = ppg) |>\n  generate(reps = 100, type = \"bootstrap\") |>\n  calculate(stat = \"mean\")\n```\n:::\n\n\n## The bootstrap distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(boot_dist_abb)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 100\nColumns: 2\n$ replicate <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 1…\n$ stat      <dbl> 73.11500, 78.78333, 80.19333, 83.42000, 70.15000, 73.03667, …\n```\n\n\n:::\n:::\n\n\n## Visualzing the bootstrap distribution\n\n::: task\nWhat do you expect the center of the bootstrap distribution to be? Why? Check your guess by visualizing the distribution.\n:::\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(boot_dist_abb, aes(x = stat)) + \n  geom_histogram()\n```\n\n::: {.cell-output-display}\n![](15-visualize-uncertainty-II_files/figure-revealjs/boot-dist-abb-plot-1.png){width=576}\n:::\n:::\n\n\n## Calculating the bootstrap distribution\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboot_dist_abb |>\n  summarize(\n    lower = quantile(stat, 0.025),\n    upper = quantile(stat, 0.975)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  lower upper\n  <dbl> <dbl>\n1  64.7  89.6\n```\n\n\n:::\n:::\n\n\n## Interpretation {.smaller}\n\n::: task\nWhich of the following is the correct interpretation of the bootstrap interval?\n:::\n\na. There is a 95% probability the true mean price per night for an Airbnb in Asheville is between $64.7 and $89.6.\n\nb. There is a 95% probability the price per night for an Airbnb in Asheville is between $64.7 and $89.6.\n\nc. We are 95% confident the true mean price per night for Airbnbs in Asheville is between $64.7 and $89.6.\n\nd. We are 95% confident the price per night for an Airbnb in Asheville is between $64.7 and $89.6.\n\n## Leveraging tidymodels tools further\n\nCalculating the observed sample statistic:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nobs_stat_abb <- abb |>\n  specify(response = ppg) |>\n  calculate(stat = \"mean\")\n\nobs_stat_abb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nResponse: ppg (numeric)\n# A tibble: 1 × 1\n   stat\n  <dbl>\n1  76.6\n```\n\n\n:::\n:::\n\n\n## Leveraging tidymodels tools further\n\nCalculating the interval:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nci_95_abb <- boot_dist_abb |>\n  get_confidence_interval(\n    point_estimate = obs_stat_abb, \n    level = 0.95\n  )\n\nci_95_abb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  lower_ci upper_ci\n     <dbl>    <dbl>\n1     64.7     89.6\n```\n\n\n:::\n:::\n\n\n## Leveraging tidymodels tools further\n\nVisualizing the interval:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvisualize(boot_dist_abb) +\n  shade_confidence_interval(ci_95_abb)\n```\n\n::: {.cell-output-display}\n![](15-visualize-uncertainty-II_files/figure-revealjs/ci-95-abb-viz-1.png){width=576}\n:::\n:::\n",
    "supporting": [
      "15-visualize-uncertainty-II_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}