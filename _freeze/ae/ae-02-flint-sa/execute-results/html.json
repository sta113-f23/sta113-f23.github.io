{
  "hash": "db537b4e60ad2f22398f452cdf84d60d",
  "result": {
    "markdown": "---\ntitle: \"Exploring Flint's water data\"\ncategories: \n  - Application exercise\n  - Sugested answers\neditor: visual\n---\n\n\n::: callout-important\nThese are suggested answers to the application exercise. They may differ slightly from the code we developed in class and may not be complete. They're provided after class to help review the application activity, but are not an alternative to working on the exercise and actively participating in class.\n:::\n\n# Goals\n\nBy the end of this application exercise you will\n\n-   meet the computational toolkit for the course\n-   practice using `glimpse()`, `names()`, `nrow()`, `ncol()`, `count()`\n-   define and compute various statistics\n-   begin to gain familiarity with making data visualizations with `ggplot()`\n\nWe will do this using water lead content data from Flint, MI. The following paragraph will be useful in evaluating the lead amount values we'll see in the dataset.\n\n> While there is no completely safe amount of lead consumption, the limit allowed by the Lead and Copper Rule (LCR) of 1991 is 15 parts per billion (ppb). If this is exceeded in more than 10% of homes tested (or if the 90th percentile value of the total sample is above 15 ppb), action is required. And to make sure problems are caught, sampling for lead in water is supposed to target the \"worst-case\" homes -- those in areas served by lead pipes.\n\n# Meet the toolkit\n\n## RStudio\n\n-   Files, plots, viewer, environment, etc. panes\n\n-   Console\n\n-   Editor\n\n## R\n\n-   Writing code in the console\n\n-   Basic math with R\n\n-   Creating variables in R, the assignment operator (`<-`), and the Environment pane\n\n-   R functions and packages and the Packages pane\n\n-   Getting help with R and the Help pane\n\n## Quarto\n\n-   YAML: Metadata\n\n-   Narrative: Edited with the visual editor (or the source editor)\n\n-   Code: In code chunks\n\n    -   Chunk options (following `#|`)\n\n    -   Comments (following `#`)\n\n    -   Code\n\n-   Running individual code chunks vs. rendering a document\n\n# Back to analysis\n\n## Load packages\n\nWe'll use the tidyverse package for analysis, which offers functionality for data import, wrangling, visualization, and more.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\nLoading this package prints out a message. What does this message mean? How can we suppress the message from the output?\n\n## Load data\n\nThe `read_csv()` function can be used for reading CSV (comma separated values) files. The file we're reading is called `flint` with the suffix (`.csv`) which indicates its file type. The file is in the `data` folder.\n\nBefore reading in the file, go to the `data` folder in the Files pane to confirm that it is, indeed, there. Then, read the file by running the code chunk below by clicking on the green triangle icon on the code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflint <- read_csv(\"data/flint.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 813 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): draw\ndbl (4): id, zip, ward, lead\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\nOne of two things may have happened:\n\n1.  The file was read successfully and you now see a dataset called `flint` in your Environment pane.\n2.  The file was not read successfully and you see an error `Error in read_csv(\"data/flint.csv\") : could not find function \"read_csv\"`.\n\nIf (1) happened, great!\n\nIf (2) happened, let's troubleshoot first before continuing.\n\n## Data dictionary\n\nThe following variables are in the `flint` data frame:\n\n-   `id`: sample ID number (identifies the home)\n-   `zip`: ZIP code in Flint of the sample's location\n-   `ward`: ward in Flint of the sample's location\n-   `draw`: which time point the water was sampled from\n-   `lead`: lead content in parts per billion (ppb)\n\n## Populations and samples\n\nWe want to learn about the **population** using a **sample**.\n\nIn the case we want to learn about the lead content in all of Flint, MI homes but only have available water readings from a sample of homes (our data set).\n\n**Exercise 1:** Look at the data, how many observations are there? How many variables?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(flint)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 813\n```\n\n\n:::\n\n```{.r .cell-code}\nncol(flint)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n## Frequencies\n\nLet's `count()` to find the number of different time points water was sampled with the `count()` function.\n\n-   The first argument is `flint`: the data frame\n\n-   The second argument is `draw`: the variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount(flint, draw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  draw       n\n  <chr>  <int>\n1 first    271\n2 second   271\n3 third    271\n```\n\n\n:::\n:::\n\n\nWe can achieve the same result with the following \"piped\" operation as well.\n\n-   The first line is `flint`: the data frame\n\n-   Then the pipe operator, read as \"and then\", which places what comes before it as the first argument of what comes after it\n\n-   The second line is `count(draw)`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflint |>\n  count(draw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  draw       n\n  <chr>  <int>\n1 first    271\n2 second   271\n3 third    271\n```\n\n\n:::\n:::\n\n\nWe can use a similar approach to fund out how many unique homes are in the data set:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflint |>\n  count(id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 269 × 2\n      id     n\n   <dbl> <int>\n 1     1     3\n 2     2     3\n 3     4     3\n 4     5     3\n 5     6     3\n 6     7     3\n 7     8     3\n 8     9     3\n 9    12     3\n10    13     3\n# ℹ 259 more rows\n```\n\n\n:::\n:::\n\n\n**Exercise 2:** How many samples were taken from each zip code?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflint |>\n  count(zip)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n    zip     n\n  <dbl> <int>\n1 48502     3\n2 48503   207\n3 48504   165\n4 48505   144\n5 48506   132\n6 48507   153\n7 48529     3\n8 48532     6\n```\n\n\n:::\n:::\n\n\n**Exercise 3:** Which ZIP code had the most samples drawn? Hint: See the help for `count`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflint |>\n  count(zip, sort = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 2\n    zip     n\n  <dbl> <int>\n1 48503   207\n2 48504   165\n3 48507   153\n4 48505   144\n5 48506   132\n6 48532     6\n7 48502     3\n8 48529     3\n```\n\n\n:::\n:::\n\n\n# Summarization\n\nWhat is a statistic? It's **any mathematical function of the data**. Sometimes, a statistic is referred to as \"sample statistic\" or \"summary statistic\", since you compute it from a **sample** (the observed data) and not the entire **population**.\n\n## Measures of central tendency\n\n-   mean\n-   median\n-   mode\n\n## Measures of spread\n\n-   variance\n-   standard deviation\n-   range\n-   quartiles\n-   inter-quartile range (IQR)\n\n## Order statistics\n\n-   quantiles\n-   minimum (0 percentile)\n-   median (50th percentile)\n-   maximum (100 percentile)\n\n... and any other arbitrary function of the data you can come up with!\n\n**Exercise 4:** Compute each of these statistics for `lead` ppb.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflint |>\n  summarize(\n    mean_lead = mean(lead),\n    median_lead = median(lead),\n    sd_lead = sd(lead),\n    # etc.\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  mean_lead median_lead sd_lead\n      <dbl>       <dbl>   <dbl>\n1      8.20        1.85    41.5\n```\n\n\n:::\n:::\n\n\n# Plotting\n\n## Histograms\n\nLet's take a look at the **distribution** of lead content in homes in Flint, MI.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(flint, aes(x = lead)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](ae-02-flint-sa_files/figure-html/flint-histogram-1-1.png){width=672}\n:::\n:::\n\n\nWe can make this plot look nicer/more useful by adjusting the number of bins and zooming into the x-axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(flint, aes(x = lead)) +\n  geom_histogram(bins = 50) +\n  coord_cartesian(xlim = c(0, 100))\n```\n\n::: {.cell-output-display}\n![](ae-02-flint-sa_files/figure-html/flint-histogram-2-1.png){width=672}\n:::\n:::\n\n\nLet's visualize some of our summary statistics on the plot.\n\n**Exercise 5:** Add a new layer, `geom_vline(xintercept = __, color = \"red\")`, to the histogram below, filling in the blank with the mean.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(flint, aes(x = lead)) + \n  geom_histogram(bins = 50) + \n  coord_cartesian(xlim = c(0, 100))\n```\n\n::: {.cell-output-display}\n![](ae-02-flint-sa_files/figure-html/overlay-mean-1.png){width=672}\n:::\n:::\n\n\n**Exercise 6:** Add one more layer which overlays the median, in a different color.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(flint, aes(x = lead)) + \n  geom_histogram(bins = 50) + \n  geom_vline(xintercept = 1.852)\n```\n\n::: {.cell-output-display}\n![](ae-02-flint-sa_files/figure-html/overlay-median-1.png){width=672}\n:::\n\n```{.r .cell-code}\n  coord_cartesian(xlim = c(0, 100))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<ggproto object: Class CoordCartesian, Coord, gg>\n    aspect: function\n    backtransform_range: function\n    clip: on\n    default: FALSE\n    distance: function\n    expand: TRUE\n    is_free: function\n    is_linear: function\n    labels: function\n    limits: list\n    modify_scales: function\n    range: function\n    render_axis_h: function\n    render_axis_v: function\n    render_bg: function\n    render_fg: function\n    setup_data: function\n    setup_layout: function\n    setup_panel_guides: function\n    setup_panel_params: function\n    setup_params: function\n    train_panel_guides: function\n    transform: function\n    super:  <ggproto object: Class CoordCartesian, Coord, gg>\n```\n\n\n:::\n:::\n\n\n## Box plots\n\nNext, let's narrow our focus to the zip codes 48503, 48504, 48505, 48506, and 48507 and observations with lead values less than 1,000 ppb.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflint_focus <- flint |>\n  filter(zip %in% 48503:48507 & lead < 1000)\n```\n:::\n\n\n**Exercise 7:** Below are side-by-side box plots for the three flushing times in each of the five zip codes we considered. Add `x` and `y` labels; add a title by inserting `title = \"title_name\"` inside the `labs()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = flint_focus, aes(y = factor(zip), x = lead)) +\n  geom_boxplot(aes(fill = factor(draw))) +\n  labs(x = \"Lead amount (PPB)\", y = \"Zip code\", fill = \"Flushing time\") +\n  scale_fill_discrete(\n    breaks = c(\"first\", \"second\", \"third\"),\n    labels = c(\"0 (sec)\", \"45 (sec)\", \"120 (sec)\")\n  )\n```\n\n::: {.cell-output-display}\n![](ae-02-flint-sa_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n**Exercise 8:** Add labels for `x`, `y`, a `title`, and `subtitle` to the code below to update the corresponding plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = flint_focus, aes(y = factor(zip), x = lead)) +\n  geom_boxplot(aes(fill = factor(draw))) + \n  labs(\n    x = \"Lead amount (PPB)\", y = \"Zip code\", fill = \"Flushing time\",\n    title = \"Amount of lead in water\",\n    subtitle = \"Across various zip codes and flushing times\"\n    ) +\n  scale_fill_discrete(\n    breaks = c(\"first\", \"second\", \"third\"),\n    labels = c(\"0 (sec)\", \"45 (sec)\", \"120 (sec)\")\n  ) +\n  coord_cartesian(xlim = c(0, 50)) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](ae-02-flint-sa_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n**Exercise 9:** What is the difference between the two plots? What are the advantages and disadvantages to each plot?\n\n> It's easier to see the distribution of the bulk of data in the latter plot, but the extreme observations are gone, which can also be important in this context.\n\n# References\n\n1.  Langkjaer-Bain, R. (2017). The murky tale of Flint's deceptive water data. Significance, 14: 16-21. doi: <https://doi.org/10.1111/j.1740-9713.2017.01016.x>.\n\n2.  Kelsey J. Pieper, et. al. Evaluating Water Lead Levels During the Flint Water Crisis. Edwards Environmental Science & Technology 2018 52 (15), 8124-8132 doi: <https://doi.org/10.1021/acs.est.8b00791>.\n",
    "supporting": [
      "ae-02-flint-sa_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}