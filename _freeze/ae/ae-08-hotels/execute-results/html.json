{
  "hash": "c5d0da406bb57ad0f4ed33155e2e1168",
  "result": {
    "markdown": "---\ntitle: \"Hotels, types, classes\"\ncategories: \n  - Application exercise\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n## Packages\n\nWe will use the following two packages in this application exercise.\n\n-   **tidyverse**: For data import, wrangling, and visualization.\n-   **skimr**: For summarizing the entire data frame at once.\n-   **scales**: For better axis labels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(skimr)\nlibrary(scales)\n```\n:::\n\n\n## Type coercion\n\n-   **Demo:** Determine the type of the following vector. And then, change the type to numeric.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    x <- c(\"1\", \"2\", \"3\")\n    typeof(x)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"character\"\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    as.numeric(x)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 1 2 3\n    ```\n    \n    \n    :::\n    :::\n\n\n-   **Demo:** Once again, determine the type of the following vector. And then, change the type to numeric. What's different than the previous exercise?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    y <- c(\"a\", \"b\", \"c\")\n    \n    # add code here\n    ```\n    :::\n\n\n-   **Demo:** Once again, determine the type of the following vector. And then, change the type to numeric. What's different than the previous exercise?\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    z <- c(\"1\", \"2\", \"three\")\n    \n    # add code here\n    ```\n    :::\n\n\n-   **Demo:** Suppose you conducted a survey where you asked people how many cars their household owns collectively. And the answers are as follows:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    survey_results <- tibble(cars = c(1, 2, \"three\"))\n    survey_results\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 3 × 1\n      cars \n      <chr>\n    1 1    \n    2 2    \n    3 three\n    ```\n    \n    \n    :::\n    :::\n\n\n    This is annoying because of that third survey taker who just had to go and type out the number instead of providing as a numeric value. So now you need to update the `cars` variable to be numeric. You do the following\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    survey_results |>\n      mutate(cars = as.numeric(cars))\n    ```\n    \n    ::: {.cell-output .cell-output-stderr}\n    \n    ```\n    Warning: There was 1 warning in `mutate()`.\n    ℹ In argument: `cars = as.numeric(cars)`.\n    Caused by warning:\n    ! NAs introduced by coercion\n    ```\n    \n    \n    :::\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    # A tibble: 3 × 1\n       cars\n      <dbl>\n    1     1\n    2     2\n    3    NA\n    ```\n    \n    \n    :::\n    :::\n\n\n    And now things are even more annoying because you get a warning `NAs introduced by coercion` that happened while computing `cars = as.numeric(cars)` and the response from the third survey taker is now an `NA` (you lost their data). Fix your `mutate()` call to avoid this warning.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    # add code here\n    ```\n    :::\n\n\n-   Your turn (8 minutes): First, guess the type of the vector. Then, check if you guessed right. I've done the first one for you, you'll see that it's helpful to check the type of each element of the vector first.\n\n    -   `c(1, 1L, \"C\")`\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        v1 <- c(1, 1L, \"C\")\n        \n        # to help you guess\n        typeof(1)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        \n        ```\n        [1] \"double\"\n        ```\n        \n        \n        :::\n        \n        ```{.r .cell-code}\n        typeof(1L)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        \n        ```\n        [1] \"integer\"\n        ```\n        \n        \n        :::\n        \n        ```{.r .cell-code}\n        typeof(\"C\")\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        \n        ```\n        [1] \"character\"\n        ```\n        \n        \n        :::\n        \n        ```{.r .cell-code}\n        # to check after you guess\n        typeof(v1)\n        ```\n        \n        ::: {.cell-output .cell-output-stdout}\n        \n        ```\n        [1] \"character\"\n        ```\n        \n        \n        :::\n        :::\n\n\n    -   `c(1L / 0, \"A\")`\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        v2 <- c(1L / 0, \"A\")\n        \n        # to help you guess\n        \n        # to check after you guess\n        ```\n        :::\n\n\n    -   `c(1:3, 5)`\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        v3 <- c(1:3, 5)\n        \n        # to help you guess\n        \n        # to check after you guess\n        ```\n        :::\n\n\n    -   `c(3, \"3+\")`\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        v4 <- c(3, \"3+\")\n        \n        # to help you guess\n        \n        # to check after you guess\n        ```\n        :::\n\n\n    -   `c(NA, TRUE)`\n\n\n        ::: {.cell}\n        \n        ```{.r .cell-code}\n        v5 <- c(NA, TRUE)\n        \n        # to help you guess\n        \n        # to check after you guess\n        ```\n        :::\n\n\n## Hotel bookings\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# From TidyTuesday: https://github.com/rfordatascience/tidytuesday/blob/master/data/2020/2020-02-11/readme.md\n\nhotels <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n```\n:::\n\n\n**Question:** Take a look at the the following visualization. How are the months ordered? What would be a better order?\n\n*Add your response here.*\n\n![](images/hotel-prices-months.png){fig-align=\"center\"}\n\n**Demo:** Reorder the months on the x-axis (levels of `arrival_date_month`) in a way that makes more sense. You will want to use a function from the **forcats** package, see <https://forcats.tidyverse.org/reference/index.html> for inspiration and help.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n**Stretch goal:** If you finish the above task before time is up, change the y-axis label so the values are shown with dollar signs, e.g. \\$80 instead of 80. You will want to use a function from the **scales** package, see <https://scales.r-lib.org/reference/index.html> for inspiration and help.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n",
    "supporting": [
      "ae-08-hotels_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}