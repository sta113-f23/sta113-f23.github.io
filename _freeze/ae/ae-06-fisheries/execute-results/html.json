{
  "hash": "3f6421d1326dabbfe48b2fd3f2c20189",
  "result": {
    "markdown": "---\ntitle: \"AE 04: Joining fisheries\"\ncategories: \n  - Application exercise\neditor: visual\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(scales)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n```\n\n\n:::\n\n```{.r .cell-code}\nfisheries <- read_csv(\"data/fisheries.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 82 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (1): country\ndbl (3): capture, aquaculture, total\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\ncontinents <- read_csv(\"data/continents.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 245 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): country, continent\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n## Working with multiple data frames\n\nOften instead of being provided the data you need for your analysis in a single data frame, you will need to bring information from multiple datasets together into a data frame yourself. These datasets will be linked to each other via a column (usually an identifier, something that links the two datasets together) that you can use to join them together.\n\nThere are many possible types of joins. All have the format `something_join(x, y)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tibble(\n  value = c(1, 2, 3),\n  xcol = c(\"x1\", \"x2\", \"x3\")\n  )\n\ny <- tibble(\n  value = c(1, 2, 4),\n  ycol = c(\"y1\", \"y2\", \"y4\")\n  )\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  value xcol \n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n3     3 x3   \n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  value ycol \n  <dbl> <chr>\n1     1 y1   \n2     2 y2   \n3     4 y4   \n```\n\n\n:::\n:::\n\n\nWe will demonstrate each of the joins on these small, toy datasets.\n\n### `inner_join()`: join all rows from `x` where there are matching values in `y`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n```\n\n\n:::\n:::\n\n\n### `left_join()`: include all rows from `x`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    <NA> \n```\n\n\n:::\n:::\n\n\n### `right_join()`: include all rows from `y`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     4 <NA>  y4   \n```\n\n\n:::\n:::\n\n\n### `full_join()`: include all rows in `x` or `y` (use this one sparingly!!)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    <NA> \n4     4 <NA>  y4   \n```\n\n\n:::\n:::\n\n\n### `semi_join()`: return all rows from `x` with match in `y`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsemi_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  value xcol \n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n```\n\n\n:::\n:::\n\n\n### `anti_join()`: return all rows from `x` without a match in `y`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  value xcol \n  <dbl> <chr>\n1     3 x3   \n```\n\n\n:::\n:::\n\n\n**Question: How do the join functions above know to join `x` and `y` by `value`? *Hint: Examine the column names to find out.***\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"value\" \"xcol\" \n```\n\n\n:::\n\n```{.r .cell-code}\nnames(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"value\" \"ycol\" \n```\n\n\n:::\n:::\n\n\n## Global aquaculture production\n\nThe Fisheries and Aquaculture Department of the Food and Agriculture Organization of the United Nations collects data on fisheries production of countries.\n\nOur goal is to create a visualization of the mean share of aquaculture by continent.\n\nLet's start by looking at the `fisheries` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(fisheries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 82\nColumns: 4\n$ country     <chr> \"Angola\", \"Argentina\", \"Australia\", \"Bangladesh\", \"Brazil\"…\n$ capture     <dbl> 486490, 755226, 174629, 1674770, 705000, 629950, 233190, 8…\n$ aquaculture <dbl> 655, 3673, 96847, 2203554, 581230, 172500, 2315, 200765, 9…\n$ total       <dbl> 487145, 758899, 271476, 3878324, 1286230, 802450, 235505, …\n```\n\n\n:::\n:::\n\n\nWe have the countries, but our goal is to make a visualization by continent. Let's take a look at the continents data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(continents)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 245\nColumns: 2\n$ country   <chr> \"Afghanistan\", \"Åland Islands\", \"Albania\", \"Algeria\", \"Ameri…\n$ continent <chr> \"Asia\", \"Europe\", \"Europe\", \"Africa\", \"Oceania\", \"Europe\", \"…\n```\n\n\n:::\n:::\n\n\n-   **Your turn (2 minutes):**\n    -   Which variable(s) will we use to join the `fisheries` and `continents` data frames?\n    -   We want to keep all rows and columns from `fisheries` and add a column for corresponding continents. Which join function should we use?\n-   **Demo:** Join the two data frames and name assign the joined data frame back to `fisheries`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Demo:** Take a look at the updated `fisheries` data frame. There are some countries that were not in `continents`. First, identify which countries these are (they will have `NA` values for `continent`). Then, manually update the `continent` information for these countries using the `case_when` function. Finally, check that these updates have been made as intended and no countries are left without continent information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Demo:** Add a new column to the `fisheries` data frame called `aq_prop`. We will calculate it as `aquaculture / total`. Save the resulting frame as `fisheries`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Demo:** Calculate the mean aquaculture proportion (we'll call it `mean_aq_prop`) for continents in the fisheries data using the `summarize()` function in dplyr. Note that the function for calculating the mean is `mean()` in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Your turn (5 minutes):** Now expand your calculations to also calculate the minimum and maximum aquaculture proportion for continents in the fisheries data. Note that the functions for calculating minimum and maximum in R are `min()` and `max()` respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here \n```\n:::\n\n\n-   **Demo:** Create a new data frame called `fisheries_summary` that calculates minimum, mean, and maximum aquaculture proportion for each continent in the fisheries data. Then, determine which continent has the largest value of `max_ap`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Demo:** Take the `fisheries_summary` data frame and order the results in descending order of mean aquaculture proportion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Demo:** Recreate the following plot using the data frame you have developed so far.\n\n![](images/aquaculture-production-by-continent.png){fig-align=\"center\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add code here\n```\n:::\n\n\n-   **Your turn (time permitting):** Change the [theme](https://ggplot2.tidyverse.org/reference/ggtheme.html) of the plot and make any other changes you would like to improve it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add your code here\n```\n:::\n",
    "supporting": [
      "ae-06-fisheries_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}