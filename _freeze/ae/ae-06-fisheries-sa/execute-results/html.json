{
  "hash": "89c66bf3ac23142916886ae6787dd72b",
  "result": {
    "markdown": "---\ntitle: \"Joining fisheries\"\ncategories: \n  - Application exercise\n  - Sugested answers\neditor: visual\n---\n\n\n::: {.callout-important appearance=\"minimal\" icon=\"false\"}\nThese are suggested answers to the application exercise. They may differ slightly from the code we developed in class and may not be complete. They're provided after class to help review the application activity, but are not an alternative to working on the exercise and actively participating in class.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\n\nfisheries <- read_csv(\"data/fisheries.csv\")\ncontinents <- read_csv(\"data/continents.csv\")\n```\n:::\n\n\n## Working with multiple data frames\n\nOften instead of being provided the data you need for your analysis in a single data frame, you will need to bring information from multiple datasets together into a data frame yourself. These datasets will be linked to each other via a column (usually an identifier, something that links the two datasets together) that you can use to join them together.\n\nThere are many possible types of joins. All have the format `something_join(x, y)`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tibble(\n  value = c(1, 2, 3),\n  xcol = c(\"x1\", \"x2\", \"x3\")\n  )\n\ny <- tibble(\n  value = c(1, 2, 4),\n  ycol = c(\"y1\", \"y2\", \"y4\")\n  )\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  value xcol \n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n3     3 x3   \n```\n\n\n:::\n\n```{.r .cell-code}\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  value ycol \n  <dbl> <chr>\n1     1 y1   \n2     2 y2   \n3     4 y4   \n```\n\n\n:::\n:::\n\n\nWe will demonstrate each of the joins on these small, toy datasets.\n\n### `inner_join()`: join all rows from `x` where there are matching values in `y`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n```\n\n\n:::\n:::\n\n\n### `left_join()`: include all rows from `x`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    <NA> \n```\n\n\n:::\n:::\n\n\n### `right_join()`: include all rows from `y`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     4 <NA>  y4   \n```\n\n\n:::\n:::\n\n\n### `full_join()`: include all rows in `x` or `y` (use this one sparingly!!)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  value xcol  ycol \n  <dbl> <chr> <chr>\n1     1 x1    y1   \n2     2 x2    y2   \n3     3 x3    <NA> \n4     4 <NA>  y4   \n```\n\n\n:::\n:::\n\n\n### `semi_join()`: return all rows from `x` with match in `y`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsemi_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  value xcol \n  <dbl> <chr>\n1     1 x1   \n2     2 x2   \n```\n\n\n:::\n:::\n\n\n### `anti_join()`: return all rows from `x` without a match in `y`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(value)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  value xcol \n  <dbl> <chr>\n1     3 x3   \n```\n\n\n:::\n:::\n\n\n**Question: How do the join functions above know to join `x` and `y` by `value`? *Hint: Examine the column names to find out.***\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"value\" \"xcol\" \n```\n\n\n:::\n\n```{.r .cell-code}\nnames(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"value\" \"ycol\" \n```\n\n\n:::\n:::\n\n\n## Global aquaculture production\n\nThe Fisheries and Aquaculture Department of the Food and Agriculture Organization of the United Nations collects data on fisheries production of countries.\n\nOur goal is to create a visualization of the mean share of aquaculture by continent.\n\nLet's start by looking at the `fisheries` data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(fisheries)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 82\nColumns: 4\n$ country     <chr> \"Angola\", \"Argentina\", \"Australia\", \"Bangladesh\", \"Brazil\"…\n$ capture     <dbl> 486490, 755226, 174629, 1674770, 705000, 629950, 233190, 8…\n$ aquaculture <dbl> 655, 3673, 96847, 2203554, 581230, 172500, 2315, 200765, 9…\n$ total       <dbl> 487145, 758899, 271476, 3878324, 1286230, 802450, 235505, …\n```\n\n\n:::\n:::\n\n\nWe have the countries, but our goal is to make a visualization by continent. Let's take a look at the continents data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(continents)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 245\nColumns: 2\n$ country   <chr> \"Afghanistan\", \"Åland Islands\", \"Albania\", \"Algeria\", \"Ameri…\n$ continent <chr> \"Asia\", \"Europe\", \"Europe\", \"Africa\", \"Oceania\", \"Europe\", \"…\n```\n\n\n:::\n:::\n\n\n-   **Your turn (2 minutes):**\n    -   Which variable(s) will we use to join the `fisheries` and `continents` data frames?\n    -   We want to keep all rows and columns from `fisheries` and add a column for corresponding continents. Which join function should we use?\n-   **Demo:** Join the two data frames and name assign the joined data frame back to `fisheries`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries <- fisheries |>\n  left_join(continents)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(country)`\n```\n\n\n:::\n:::\n\n\n-   **Demo:** Take a look at the updated `fisheries` data frame. There are some countries that were not in `continents`. First, identify which countries these are (they will have `NA` values for `continent`). Then, manually update the `continent` information for these countries using the `case_when` function. Finally, check that these updates have been made as intended and no countries are left without continent information.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries |>\n  filter(is.na(continent))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n  country                          capture aquaculture   total continent\n  <chr>                              <dbl>       <dbl>   <dbl> <chr>    \n1 Democratic Republic of the Congo  237372        3161  240533 <NA>     \n2 Hong Kong                         142775        4258  147033 <NA>     \n3 Myanmar                          2072390     1017644 3090034 <NA>     \n```\n\n\n:::\n\n```{.r .cell-code}\nfisheries <- fisheries %>%\n  mutate(\n    continent = case_when(\n      country == \"Democratic Republic of the Congo\" ~ \"Africa\",\n      country == \"Hong Kong\" ~ \"Asia\",\n      country == \"Myanmar\" ~ \"Asia\",\n      TRUE ~ continent\n    )\n  )\n\nfisheries |>\n  filter(is.na(continent))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 5\n# ℹ 5 variables: country <chr>, capture <dbl>, aquaculture <dbl>, total <dbl>,\n#   continent <chr>\n```\n\n\n:::\n:::\n\n\n-   **Demo:** Add a new column to the `fisheries` data frame called `aq_prop`. We will calculate it as `aquaculture / total`. Save the resulting frame as `fisheries`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries <- fisheries |>\n  mutate(aq_prop = aquaculture / total)\n```\n:::\n\n\n-   **Demo:** Calculate the mean aquaculture proportion (we'll call it `mean_aq_prop`) for continents in the fisheries data using the `summarize()` function in dplyr. Note that the function for calculating the mean is `mean()` in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries |>                              # start with fisheries data frame\n  group_by(continent) |>                  # group by continent\n  summarize(mean_aq_prop = mean(aq_prop)) # calculate mean aquaculture\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  continent mean_aq_prop\n  <chr>            <dbl>\n1 Africa          0.0943\n2 Americas        0.192 \n3 Asia            0.367 \n4 Europe          0.165 \n5 Oceania         0.150 \n```\n\n\n:::\n:::\n\n\n-   **Your turn (5 minutes):** Now expand your calculations to also calculate the minimum and maximum aquaculture proportion for continents in the fisheries data. Note that the functions for calculating minimum and maximum in R are `min()` and `max()` respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries |>                              # start with fisheries data frame\n  group_by(continent) |>                  # group by continent\n  summarize(                              # calculate summary stats  \n    min_aq_prop  = min(aq_prop),\n    mean_aq_prop = mean(aq_prop),\n    max_aq_prop  = max(aq_prop)\n  )    \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  continent min_aq_prop mean_aq_prop max_aq_prop\n  <chr>           <dbl>        <dbl>       <dbl>\n1 Africa        0             0.0943       0.803\n2 Americas      0             0.192        0.529\n3 Asia          0             0.367        0.782\n4 Europe        0.00682       0.165        0.618\n5 Oceania       0.0197        0.150        0.357\n```\n\n\n:::\n:::\n\n\n-   **Demo:** Create a new data frame called `fisheries_summary` that calculates minimum, mean, and maximum aquaculture proportion for each continent in the fisheries data. Then, determine which continent has the largest value of `max_ap`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries_summary <- fisheries |>         # start with fisheries data frame\n  group_by(continent) |>                  # group by continent\n  summarize(                              # calculate summary stats  \n    min_aq_prop  = min(aq_prop),\n    mean_aq_prop = mean(aq_prop),\n    max_aq_prop  = max(aq_prop)\n  )\n```\n:::\n\n\n-   **Demo:** Take the `fisheries_summary` data frame and order the results in descending order of mean aquaculture proportion.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfisheries_summary |>            # start with fisheries_summary data frame\n  arrange(desc(mean_aq_prop))   # order in descending order of mean_aq_prop\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  continent min_aq_prop mean_aq_prop max_aq_prop\n  <chr>           <dbl>        <dbl>       <dbl>\n1 Asia          0             0.367        0.782\n2 Americas      0             0.192        0.529\n3 Europe        0.00682       0.165        0.618\n4 Oceania       0.0197        0.150        0.357\n5 Africa        0             0.0943       0.803\n```\n\n\n:::\n:::\n\n\n-   **Demo:** Recreate the following plot using the data frame you have developed so far.\n\n![](images/aquaculture-production-by-continent.png){fig-align=\"center\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(fisheries_summary, \n       aes(y = fct_reorder(continent, mean_aq_prop), x = mean_aq_prop)) +\n  geom_col() +\n  scale_x_continuous(labels = label_percent(accuracy = 1)) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Average share of aquaculture by continent\",\n    subtitle = \"out of total fisheries harvest, 2016\",\n    caption = \"Source: bit.ly/2VrawTt\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](ae-06-fisheries-sa_files/figure-html/fisheries-summary-plot-1.png){width=672}\n:::\n:::\n\n\n-   **Your turn (time permitting):** Change the [theme](https://ggplot2.tidyverse.org/reference/ggtheme.html) of the plot and make any other changes you would like to improve it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add your code here\n```\n:::\n",
    "supporting": [
      "ae-06-fisheries-sa_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}