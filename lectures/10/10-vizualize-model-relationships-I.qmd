---
title: "Visualizing and modeling relationships I"
subtitle: Lecture 10
format: 
  revealjs:
    fig-align: center
    fig-width: 5
    fig-asp: 0.618
---

# Warm-up

## Coming up

-   HW 3 due next Thursday, to be posted later today

-   Due dates for the rest of the semester posted

-   Plans for next week

-   Any questions before we dive into the rest of the semester?

## Today's goals

-   What is a model?
-   Why do we model?
-   What is correlation?
-   How can we leverage visualizations to better understand and evaluate models?

## Setup

```{r}
#| label: load-pkg

library(tidyverse)
library(gt)
```

# Visualizing relationships

## `mpg` dataset {.smaller}

```{r}
glimpse(mpg)
```

## Two categorical variables

::: question
What type of plot would you use to visualize the relationship between two categorical variables?
:::

. . .

```{r}
#| output-location: column
#| fig-width: 5
#| fig-asp: 0.618

ggplot(
  mpg, 
  aes(x = class, fill = drv)
  ) +
  geom_bar(position = "fill") +
  labs(
    x = "Class",
    y = "Count",
    fill = "Drive type",
    title = "Drive type vs. class"
  )
```

## One categorical, one numerical variable

::: question
What type of plot would you use to visualize the relationship between one numerical and one categorical variables?
:::

. . .

```{r}
#| output-location: column
#| fig-width: 5
#| fig-asp: 0.618

ggplot(
  mpg, 
  aes(x = class, y = cty)
  ) +
  geom_boxplot() +
  labs(
    x = "Class",
    y = "City mileage (MPG)",
    title = "City mileage vs. class"
  )
```

## Two numerical variables

::: question
What type of plot would you use to visualize the relationship between two numerical variables?
:::

. . .

```{r}
#| output-location: column
#| fig-width: 5
#| fig-asp: 0.618

ggplot(
  mpg, 
  aes(x = cty, y = hwy)
  ) +
  geom_point() +
  labs(
    x = "City mileage (MPG)",
    y = "Highway mileage (MPG)",
    title = "Highway vs. city mileage"
  )
```

## Let's look a little closer

::: question
Roughly how many points are there in the plot? How many points are there supposed to be? If there is a discrepancy, what explains it?
:::

```{r}
#| echo: false
#| fig-width: 5
#| fig-asp: 0.618

ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_point()
```

## Adjust alpha

```{r}
#| fig-width: 5
#| fig-asp: 0.618

ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_point(alpha = 0.5)
```

## Jitter

```{r}
#| fig-width: 5
#| fig-asp: 0.618

ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_jitter()
```

## Adjust alpha + jitter

```{r}
#| fig-width: 5
#| fig-asp: 0.618

ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_jitter(alpha = 0.5)
```

## Add more jitter

```{r}
#| fig-width: 5
#| fig-asp: 0.618

ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_jitter(alpha = 0.5, width = 3, height = 3)
```

## Bin the data

```{r}
#| fig-width: 5
#| fig-asp: 0.618

ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_hex(bins = 15)
```

## Contour 2D density

```{r}
#| fig-width: 5
#| fig-asp: 0.618

ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_density_2d()
```

## Filled contour 2D density

```{r}
#| fig-width: 5
#| fig-asp: 0.618

ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_density_2d_filled()
```

# Modelling

## Modelling cars {.smaller}

::: question
-   What is the relationship between cars' city and highway mileage?
-   What is your best guess for a car's highway MPG that gets 20 MPG in the city?
:::

```{r}
#| echo: false

ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_jitter(alpha = 0.5)
```

## Modelling

-   Use models to explain the relationship between variables and to make predictions
-   For now we will focus on **linear** models (but there are *many* *many* other types of models too!)

## Modelling vocabulary

-   Predictor (explanatory variable)
-   Outcome (response variable)
-   Regression line
    -   Slope
    -   Intercept
-   Correlation

## Predictor (explanatory variable)

```{r}
#| echo: false

base <- ggplot(mpg, aes(x = cty, y = hwy)) +
  geom_jitter(alpha = 0.5)
```

::: columns
::: {.column width="25%"}
```{r}
#| echo: false

mpg |>
  select(cty, hwy) |>
  slice_head(n = 6) |>
  mutate(across(where(is.numeric), as.character)) |>
  bind_rows(c(cty = "...", hwy = "...")) |>
  gt() |>
  tab_style(
    style = list(
      cell_fill(color = "#E34A6F"),
      cell_text(color = "white")
      ),
    locations = cells_body(columns = cty)
  )
```
:::

::: {.column width="75%"}
```{r}
#| echo: false

base +
  theme(
    axis.title.x = element_text(color = "#E34A6F", face = "bold", size = 16)
  )
```
:::
:::

## Outcome (response variable)

::: columns
::: {.column width="25%"}
```{r}
#| echo: false

mpg |>
  select(cty, hwy) |>
  slice_head(n = 6) |>
  mutate(across(where(is.numeric), as.character)) |>
  bind_rows(c(cty = "...", hwy = "...")) |>
  gt() |>
  tab_style(
    style = list(
      cell_fill(color = "#E34A6F"),
      cell_text(color = "white")
      ),
    locations = cells_body(columns = hwy)
  )
```
:::

::: {.column width="5%"}
:::

::: {.column width="70%"}
```{r}
#| echo: false

base +
  theme(
    axis.title.y = element_text(color = "#E34A6F", face = "bold", size = 16)
  )
```
:::
:::

## Regression line

```{r}
#| echo: false

base +
  geom_smooth(method = "lm", color = "#E34A6F", size = 1.5, se = FALSE)
```

## Regression line: slope

```{r}
#| echo: false

base +
  geom_smooth(method = "lm", color = "black", se = FALSE) +
  annotate(
    geom = "segment",
    x = 20, xend = 20, y = 25, yend = 27, 
    color = "#E34A6F"
  ) +
  annotate(
    geom = "segment",
    x = 19, xend = 20, y = 25, yend = 25, 
    color = "#E34A6F", linetype = "dashed"
  ) +
  annotate(
    geom = "text",
    x = 21, y = 25, label = "slope", 
    color = "#E34A6F", size = 5, hjust = 0
  )
```

## Regression line: intercept

```{r}
#| echo: false

base +
  geom_smooth(method = "lm", color = "gray", se = FALSE, fullrange = TRUE, linetype = "dashed") +
  geom_smooth(method = "lm", color = "black", se = FALSE) +
  scale_x_continuous(limits = c(0, 40)) +
  annotate(
    geom = "point",
    shape = 1, size = 4, stroke = 2,
    x = 0, y = 1, 
    color = "#E34A6F"
  ) +
  annotate(
    geom = "text",
    label = "intercept",
    x = 1.5, y = 1, 
    color = "#E34A6F", size = 5, hjust = 0
  )
```

## Correlation

```{r}
#| echo: false

r <- mpg |>
  summarize(cor = round(cor(cty, hwy), 2)) |>
  pull()

base +
  stat_ellipse(geom = "polygon", color = "#E34A6F", fill = "#E34A6F30") +
  annotate(
    geom = "text",
    x = 11, y = 27.5, 
    label = paste("r =", r),
    color = "#E34A6F", size = 5, hjust = 0
  )
```

## Correlation

-   Ranges between -1 and 1.
-   Same sign as the slope.

![](images/corr-example.png){fig-align="center"}

## Guess the correlation

::: question
Are you good at guessing correlation?

[Play the game!](https://www.rossmanchance.com/applets/2021/guesscorrelation/GuessCorrelation.html)
:::

# Application exercise

## New computing access: Duke containers

-   Go to <https://cmgr.oit.duke.edu/containers>
-   Find `STA 101` on the list, and reserve a container
-   Click on the STA 101 container under "My reservation", then click on Login, then Start

## Set up your SSH key {.smaller}

You will authenticate GitHub using SSH. Below are an outline of the authentication steps.

::: callout-note
You only need to do this authentication process one time on a single system.
:::

-   Type `credentials::ssh_setup_github()` into your console.
-   R will ask "No SSH key found. Generate one now?" You should click 1 for yes.
-   You will generate a key. It will begin with "ssh-rsa...." R will then ask "Would you like to open a browser now?" You should click 1 for yes.
-   You may be asked to provide your GitHub username and password to log into GitHub. After entering this information, you should paste the key in and give it a name. You might name it in a way that indicates where the key will be used, e.g., sta113).

You can find more detailed instructions [here](https://github.com/DukeStatSci/github_auth_guide) if you're interested.

## Configure Git

Type the following lines of code in the console in RStudio filling in your name and the email address associated with your GitHub account.

```{r}
#| eval: false

usethis::use_git_config(
  user.name = "Your name", 
  user.email = "Email associated with your GitHub account"
  )
```

For example, mine would be

```{r}
#| eval: false

usethis::use_git_config(
  user.name = "Mine Çetinkaya-Rundel", 
  user.email = "cetinkaya.mine@gmail.com"
  )
```

You are now ready interact with GitHub via RStudio on the Duke Containers!

## `ae-09` {.smaller}

::: task
{{< fa user >}}

-   Go to the course [GitHub org](https://github.com/sta113-f23) and find your `ae-09-fish` (repo name will be suffixed with your GitHub name).
-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**). Click on the clipboard icon to copy the repo URL.
-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.
-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.
-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.
-   Click *ae-09-fish.qmd* to open the template Quarto file. This is where you will write up your code and narrative for the lab.
:::
