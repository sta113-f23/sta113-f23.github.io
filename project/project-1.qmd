---
title: "Project 1"
---

For this project, you will be use the Pell Grants dataset from the [TidyTuesday project](https://github.com/rfordatascience/tidytuesday). Your task for the project is to come up with **one** questions to answer, answer it with **two** data visualizations, and write-up and present your analysis and findings. You will also get to peer review others' projects.

## Dataset

To learn more about the dataset, visit <https://github.com/rfordatascience/tidytuesday/blob/master/data/2022/2022-08-30/readme.md>.

## Question

The questions you come up with should involve **more than two variables** two answer.

## Due dates

-   Proposal: Thu, Sep 28
-   Peer review: Tue, Oct 10
-   Write-up and presentation: Thu, Oct 12

## Deliverables

### Proposal

Your proposal should include:

-   A brief description of your dataset including its provenance, dimensions, etc. (Make sure to load the data and use inline code for some of this information.)
-   The question you want to answer.
-   A plan for answering the question, including the variables involved, variables to be created (if any), external data to be merged in (if any) as well as the types of visualizations you're planning to make.

### Peer review

#### Reviewer tasks {.unnumbered}

Each team will review the project of one other team. A few days before the peer review deadline, teams will have access to the project repo of the team whose work they're reviewing. Reviews should start by cloning the team's repo, re-rendering it locally to make sure you can reproduce their work, and then adding an issue to their repo with your peer review feedback.

The reviewer / reviewee assignments can be found below:

- Coding Clowns will review Just Make Some Noise
- Just Make Some Noise will review Stats Slayers
- Stats Slayers will review Coding Clowns

Teams will develop the review together, with discussion among all team members, but only one team member will submit it as an issue on the project repo. To do so, go to the *Issues* tab, click on the green *New issue* button on the top right, and then click on the green *Get started* button for the issue template titled *Peer review*.

This will start a new issue with a peer review form that you can fill out. Make sure to update the introductory paragraph with your team name and the names of the team members participating in the review. Then, answer each of the questions in the spaces provided underneath them. You're expected to be thorough in your review, but this doesn't necessarily require lengthy responses.

Remember, your goal is to help the team whose project proposal you're reviewing. The team will not lose points because of issues you point out, as long as they address them before I review their proposals. You should be critical, but respectful in your review. Also remember that you will be evaluated on the quality of your review. So that's an additional incentive to do a good job.

#### Reviewee tasks {.unnumbered}

Once you receive feedback from your peers, you should address them. You should do this by directly updating your proposal or making any other updates to your repo as needed. You can do these updates all in one commit or you can spread it across multiple commits. Regardless, in the last commit that addresses the peer review comments, you should use a keyword in your commit message that will close the peer review issues. These words are close, closes, closed, fix, fixes, fixed, resolve, resolves, and resolved and they need to be followed by the issue number (which you can find next to the issue title). So, your commit message can say something like *"Finished updates based on peer review, fixes #1"*.

### Write-up

Your write-up should consist of three parts:

1.  **Introduction** (1-2 paragraphs): Brief introduction to the dataset. You may repeat some of the information about the dataset provided in the introduction to the dataset on the TidyTuesday repository, paraphrasing on your own terms, but you should rephrase it. Imagine that your project is a standalone document and the grader has no prior knowledge of the dataset. The introduction should also introduce the question you're answering in our project.

2.  **Analysis** (2-3 code blocks, 2 visualizations, text/code comments as needed): In this section, provide the code that generates your visualizations. Use scale functions to provide nice axis labels and guides. You are welcome to use theme functions to customize the appearance of your plot, but you are not required to do so. All visualizations must be made with **ggplot2**. Do not use base R or lattice plotting functions.

3.  **Discussion** (1-3 paragraphs): In the Discussion section, interpret the results of your analysis. Identify any trends revealed (or not revealed) by the visualizations. Speculate about why the visualizations look the way they do.

We encourage you to be concise. A paragraph should typically not be longer than 5 sentences.

### Presentation

Your presentation should generally follow the same structure as your write-up. Each team will have 5-8 minutes for their presentation, and each team member must speak (roughly equally) during this time. You can create your presentation with any software you like, just make sure to place a PDF of your presentation, titled `presentation.pdf`, in your repo, replacing the placeholder PDF in your repo.

Roughly I recommend 1-2 slides for introduction, one slide for each of the visualizations you create, and 1 slide for discussion. You can imagine spending roughly one minute on each slide. You should feel free to have more (or fewer) slides. Your evaluation will be based on your content, professionalism (including sticking to time), and your performance during the Q&A (question and answer). We don't care how many slides you use to do this.

## Repo organization

The following folders and files in your project repository:

-   `about.qmd`: Information about your team members

-   `data/`:

    -   `data/pell.csv`: Your dataset in CSV format

    -   `data/README.md`: Codebook of your dataset

-   `index.qmd`: Your project write-up

-   `presentation.pdf`: Your project presentation

-   `proposal.qmd`: Your project proposal

## Grading

| Total                                        | 100 pts                                          |
|-----------------------------------|-------------------------------------|
| Proposal                                     | 10 pts                                           |
| Presentation                                 | 30 pts                                           |
|                                              | (25 pts from teaching team, 5 pts from audience) |
| Write-up                                     | 30 pts                                           |
| Reproducibility, style, and organization[^1] | 10 pts                                           |
| Within team peer evaluation[^2]              | 10 pts                                           |
| Between team peer evaluation[^3]             | 10 pts                                           |

[^1]: Style and format does count for this assignment, so please take the time to make sure everything looks good and your data and code are properly formatted.

[^2]: This relates to your contribution to the teamwork and how your team members evaluate this contribution. Scores for each teammate will be different for this component of the project grade.

[^3]: This relates to the quality and quantity of the peer review you provide for other teams.

Some of the components are further detailed below.

### Proposal (10 points)

-   Write-up - All required components included.
-   Workflow - A reasonable number of commits.
-   Teamwork - All team members must contribute to the repo via commits.

### Presentation (30 points)

#### Teaching team (25 points)

-   Time management: Did the team divide the time well amongst themselves or got cut off going over time?

-   Professionalism: How well did the team present? Does the presentation appear to be well practiced? Did everyone get a chance to say something meaningful about the project?

-   Teamwork: Did the team present a unified story, or did it seem like independent pieces of work patched together?

-   Slides: Are the slides well organized, readable, not full of text, featuring visualizations with legible labels, legends, etc.?

-   Creativity Critical Thought: Is the project carefully thought out? Does it appear that time and effort went into the planning and implementation of the project?

-   Content:

    -   Is the question well articulated in the presentation?
    -   Can the question be answered with the data?
    -   Do(es) the data visualization(s) answer the question?
    -   Do(es) the data visualization(s) follow good visualization practices?
    -   Is/are the conclusion(s) made based on the visualization(s) justifiable?
    -   Are the limitations carefully considered and articulated?

#### Peers (5 points)

-   Content: Is the research question well designed and is the data being used relevant to the research question?
-   Content: Did the team use appropriate visualizations and did they interpret them accurately?
-   Creativity and Critical Thought: Is the project carefully thought out? Are the limitations carefully considered? Does it appear that time and effort went into the planning and implementation of the project?
-   Slides: Are the slides well organized, readable, not full of text, featuring visualizations with legible labels, legends, etc.?
-   Professionalism: How well did the team present? Does the presentation appear to be well practiced? Are they reading off of a script? Did everyone get a chance to say something meaningful about the project?

### Write-up (30 points)

-   Introduction: The introduction provides a clear explanation of the question and the dataset used to answer the question, including a description of all relevant variables in the dataset.
-   Justification of approach: The chosen analysis approach and visualizations are clearly explained and justified.
-   Code: Code is correct, easy to read, properly formatted, and properly documented.
-   Visualization: The visualizations are appropriate, easy to read, and properly labeled.
-   Discussion: Discussion of results is clear and correct, and it has some depth without begin excessively long.

### Reproducibility, style, and organization (10 points)

-   All required files are provided. Quarto files render without issues and reproduce the necessary outputs.
-   Data is in the data folder and is loaded from this folder in your writeup.
-   Documents are well structured and easy to follow. No extraneous materials.
-   All issues are closed, mostly with specific commits addressing them.

## Guidelines

Please use the project repository that has been created for your team to complete your project. This means putting all of the content in the Quarto files provided, rendering them to obtain the output, and committing and pushing all files to your repository by the indicated deadlines. Your Quarto files (`.qmd`) and the resulting html files (`.html`) will be graded jointly, so they must be consistent (as in, don't change the Quarto file without also updating the rendered document!).

All results presented must have corresponding code. If you do calculations by hand instead of using R and then report the results from the calculations, you will not receive credit for those calculations. Any answers/results given without the corresponding R code that generated the result will not be considered. For example, if you're reporting the number of observations in your dataset, don't just write the number manually, use inline R code to calculate the number. All code reported in your final project document should work properly. Please do not include any extraneous code or code which produces error messages. Code which produces certain warnings and messages is acceptable, as long as you understand what the warnings mean. In such cases you can add `warning: false` and `message: false` in the relevant R chunks. Warnings that signal lifecycle changes (e.g., a function is deprecated and there's a newer/better function out there) should generally be addressed by updating your code, not just by hiding the warning.

## Tips

-   You're working in the same repo as your teammates now, so merge conflicts will happen, issues will arise, and that's fine! Commit and push often, and ask questions when stuck.

-   Review the marking guidelines below and ask questions if any of the expectations are unclear.

-   Make sure each team member is contributing, both in terms of quality and quantity of contribution (we will be reviewing commits from different team members).

-   Set aside time to work together and apart (physically).

-   Code:

    -   In the output of your write-up, your code should be hidden (`echo: false`) so that your slides are neat and easy to read and your write-up is about your narrative and results only. However your document should include all your code such that if I re-render your Quarto file I should be able to obtain the results you presented. **Exception:** If you want to highlight something specific about a piece of code, you're welcomed to show that portion.

    -   Even though your code is hidden, it should still conform to good coding practice, style, etc. You will be evaluated on code quality as well, which we will check by explicitly reviewing your Quarto documents (not just the rendered output).

-   Teamwork: You are to complete the assignment as a team. All team members are expected to contribute equally to the completion of this assignment and team evaluations will be given at its completion - anyone judged to not have sufficiently contributed to the final product will have their grade penalized. While different team members may have different backgrounds and abilities, it is the responsibility of every team member to understand how and why all code and approaches in the assignment work.

-   When you're done, review the documents on GitHub to make sure you're happy with the final state of your work. Then go get some rest!
